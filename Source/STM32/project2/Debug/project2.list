
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800a110  0800a110  0000b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a890  0800a890  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a890  0800a890  0000b890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a898  0800a898  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a898  0800a898  0000b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a89c  0800a89c  0000b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a8a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          00000308  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147b2  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003253  00000000  00000000  000209b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00023c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e70  00000000  00000000  00024e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024afe  00000000  00000000  00025d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bf4  00000000  00000000  0004a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc517  00000000  00000000  000633f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f909  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ecc  00000000  00000000  0013f94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00145818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0f4 	.word	0x0800a0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a0f4 	.word	0x0800a0f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <BH1750_init_i2c>:
#include "BH1750.h"

void BH1750_init_i2c(I2C_HandleTypeDef *hi2c) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    // I2C initialization is handled by CubeMX-generated code (see main.c)
    // This function can be used for additional setup if needed
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef *hi2c, const char *name, bool auto_init) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	71fb      	strb	r3, [r7, #7]
    BH1750_device_t *dev = (BH1750_device_t *)malloc(sizeof(BH1750_device_t));
 8000efa:	202c      	movs	r0, #44	@ 0x2c
 8000efc:	f006 fa8e 	bl	800741c <malloc>
 8000f00:	4603      	mov	r3, r0
 8000f02:	617b      	str	r3, [r7, #20]
    if (dev == NULL) return NULL;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <BH1750_init_dev_struct+0x22>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e01e      	b.n	8000f4c <BH1750_init_dev_struct+0x60>

    dev->hi2c = hi2c;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	601a      	str	r2, [r3, #0]
    strncpy(dev->name, name, sizeof(dev->name) - 1);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3304      	adds	r3, #4
 8000f18:	221f      	movs	r2, #31
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 f8cc 	bl	80080ba <strncpy>
    dev->name[sizeof(dev->name) - 1] = '\0';
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    dev->initialized = false;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    dev->lux = 0;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2200      	movs	r2, #0
 8000f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    dev->poll = BH1750_poll;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <BH1750_init_dev_struct+0x68>)
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28

    if (auto_init) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <BH1750_init_dev_struct+0x5e>
        BH1750_init_dev(dev);
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f000 f807 	bl	8000f58 <BH1750_init_dev>
    }

    return dev;
 8000f4a:	697b      	ldr	r3, [r7, #20]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08000fc1 	.word	0x08000fc1

08000f58 <BH1750_init_dev>:

void BH1750_init_dev(BH1750_device_t *dev) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
    uint8_t data = BH1750_POWER_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(dev->hi2c, BH1750_ADDR, &data, 1, HAL_MAX_DELAY);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	f107 020f 	add.w	r2, r7, #15
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	2146      	movs	r1, #70	@ 0x46
 8000f76:	f003 f91d 	bl	80041b4 <HAL_I2C_Master_Transmit>

    data = BH1750_RESET;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(dev->hi2c, BH1750_ADDR, &data, 1, HAL_MAX_DELAY);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	f107 020f 	add.w	r2, r7, #15
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2146      	movs	r1, #70	@ 0x46
 8000f90:	f003 f910 	bl	80041b4 <HAL_I2C_Master_Transmit>

    data = BH1750_CONT_H_RES;
 8000f94:	2310      	movs	r3, #16
 8000f96:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(dev->hi2c, BH1750_ADDR, &data, 1, HAL_MAX_DELAY);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f107 020f 	add.w	r2, r7, #15
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2146      	movs	r1, #70	@ 0x46
 8000faa:	f003 f903 	bl	80041b4 <HAL_I2C_Master_Transmit>

    dev->initialized = true;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <BH1750_poll>:

void BH1750_poll(BH1750_device_t *dev) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
    if (!dev->initialized) return;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fce:	f083 0301 	eor.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d12b      	bne.n	8001030 <BH1750_poll+0x70>

    uint8_t buffer[2];
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(dev->hi2c, BH1750_ADDR, buffer, 2, HAL_MAX_DELAY);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	f107 0208 	add.w	r2, r7, #8
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	2146      	movs	r1, #70	@ 0x46
 8000fea:	f003 f9e1 	bl	80043b0 <HAL_I2C_Master_Receive>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11c      	bne.n	8001032 <BH1750_poll+0x72>
        uint16_t raw_lux = (buffer[0] << 8) | buffer[1];
 8000ff8:	7a3b      	ldrb	r3, [r7, #8]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	81bb      	strh	r3, [r7, #12]
        dev->lux = (uint16_t)(raw_lux / 1.2); // Convert to lux
 8001008:	89bb      	ldrh	r3, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa8a 	bl	8000524 <__aeabi_i2d>
 8001010:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <BH1750_poll+0x78>)
 8001016:	f7ff fc19 	bl	800084c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdc1 	bl	8000ba8 <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800102e:	e000      	b.n	8001032 <BH1750_poll+0x72>
    if (!dev->initialized) return;
 8001030:	bf00      	nop
    }
}
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	3ff33333 	.word	0x3ff33333

0800103c <delay_us>:

// --- Các hàm nội bộ (static) ---

// Hàm tạo độ trễ micro giây
// Yêu cầu Timer đã được khởi tạo và Start trong main.c hoặc DHT22_Init
static void delay_us(uint16_t us) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(dht_timer, 0); // Reset bộ đếm Timer
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <delay_us+0x34>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(dht_timer) < us); // Chờ đến khi bộ đếm đạt giá trị us
 8001050:	bf00      	nop
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <delay_us+0x34>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f8      	bcc.n	8001052 <delay_us+0x16>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200001f0 	.word	0x200001f0

08001074 <Set_Pin_Output>:

// Hàm thay đổi chế độ chân GPIO thành Output
static void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Output Push-Pull
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Tốc độ thấp là đủ
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f002 fd74 	bl	8003b90 <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Set_Pin_Input>:

// Hàm thay đổi chế độ chân GPIO thành Input
static void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // Không cần pull-up/down nội bộ
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 fd56 	bl	8003b90 <HAL_GPIO_Init>
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <DHT22_Start>:

// Hàm gửi tín hiệu Start
static void DHT22_Start(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT22_PORT, DHT22_PIN); // Chuyển sang Output
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <DHT22_Start+0x38>)
 80010f4:	f7ff ffbe 	bl	8001074 <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET); // Kéo xuống LOW
 80010f8:	2200      	movs	r2, #0
 80010fa:	2180      	movs	r1, #128	@ 0x80
 80010fc:	4809      	ldr	r0, [pc, #36]	@ (8001124 <DHT22_Start+0x38>)
 80010fe:	f002 fefb 	bl	8003ef8 <HAL_GPIO_WritePin>
    HAL_Delay(2); // Giữ LOW ít nhất 1ms (dùng HAL_Delay cho ms) [3, 4]
 8001102:	2002      	movs	r0, #2
 8001104:	f001 ff7c 	bl	8003000 <HAL_Delay>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET); // Kéo lên HIGH
 8001108:	2201      	movs	r2, #1
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <DHT22_Start+0x38>)
 800110e:	f002 fef3 	bl	8003ef8 <HAL_GPIO_WritePin>
    delay_us(30); // Giữ HIGH 20-40us [3, 4]
 8001112:	201e      	movs	r0, #30
 8001114:	f7ff ff92 	bl	800103c <delay_us>
    Set_Pin_Input(DHT22_PORT, DHT22_PIN); // Chuyển sang Input để nhận phản hồi
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	4802      	ldr	r0, [pc, #8]	@ (8001124 <DHT22_Start+0x38>)
 800111c:	f7ff ffc8 	bl	80010b0 <Set_Pin_Input>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020000 	.word	0x40020000

08001128 <DHT22_Check_Response>:

// Hàm kiểm tra tín hiệu phản hồi từ DHT22
static uint8_t DHT22_Check_Response(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
    delay_us(40); // Đợi khoảng 40us sau khi chuyển sang Input [3, 17]
 8001132:	2028      	movs	r0, #40	@ 0x28
 8001134:	f7ff ff82 	bl	800103c <delay_us>
    if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // Kiểm tra xem cảm biến có kéo xuống LOW không
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	4811      	ldr	r0, [pc, #68]	@ (8001180 <DHT22_Check_Response+0x58>)
 800113c:	f002 fec4 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10e      	bne.n	8001164 <DHT22_Check_Response+0x3c>
    {
        delay_us(80); // Đợi hết pha LOW 80us của cảm biến
 8001146:	2050      	movs	r0, #80	@ 0x50
 8001148:	f7ff ff78 	bl	800103c <delay_us>
        if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // Kiểm tra xem cảm biến có kéo lên HIGH không
 800114c:	2180      	movs	r1, #128	@ 0x80
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <DHT22_Check_Response+0x58>)
 8001150:	f002 feba 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <DHT22_Check_Response+0x38>
        {
            Response = 1; // Phản hồi OK
 800115a:	2301      	movs	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	e001      	b.n	8001164 <DHT22_Check_Response+0x3c>
        } else {
            Response = 0; // Lỗi, không kéo lên HIGH sau 80us LOW
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
        }
    }
    // Đợi cho đến khi kết thúc pha HIGH 80us của cảm biến (chân về LOW)
    while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)));
 8001164:	bf00      	nop
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <DHT22_Check_Response+0x58>)
 800116a:	f002 fead 	bl	8003ec8 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f8      	bne.n	8001166 <DHT22_Check_Response+0x3e>

    return Response;
 8001174:	79fb      	ldrb	r3, [r7, #7]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020000 	.word	0x40020000

08001184 <DHT22_Read_Byte>:

// Hàm đọc một byte (8 bit) từ DHT22
static uint8_t DHT22_Read_Byte(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
    uint8_t i, result = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e037      	b.n	8001204 <DHT22_Read_Byte+0x80>
        // Đợi cho đến khi chân lên HIGH (kết thúc pha LOW 50us đầu bit)
        while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)));
 8001194:	bf00      	nop
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	481e      	ldr	r0, [pc, #120]	@ (8001214 <DHT22_Read_Byte+0x90>)
 800119a:	f002 fe95 	bl	8003ec8 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f8      	beq.n	8001196 <DHT22_Read_Byte+0x12>

        // Đợi 40us (dài hơn bit 0, ngắn hơn bit 1)
        delay_us(40); // [3, 17]
 80011a4:	2028      	movs	r0, #40	@ 0x28
 80011a6:	f7ff ff49 	bl	800103c <delay_us>

        if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // Nếu chân đã xuống LOW -> bit 0
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	4819      	ldr	r0, [pc, #100]	@ (8001214 <DHT22_Read_Byte+0x90>)
 80011ae:	f002 fe8b 	bl	8003ec8 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10e      	bne.n	80011d6 <DHT22_Read_Byte+0x52>
        {
            result &= ~(1 << (7 - i)); // Ghi bit 0 (thực ra chỉ cần dịch trái là đủ nếu khởi tạo = 0)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2201      	movs	r2, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011ce:	4013      	ands	r3, r2
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	e013      	b.n	80011fe <DHT22_Read_Byte+0x7a>
        } else // Nếu chân vẫn còn HIGH -> bit 1
        {
            result |= (1 << (7 - i)); // Ghi bit 1
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f1c3 0307 	rsb	r3, r3, #7
 80011dc:	2201      	movs	r2, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	71bb      	strb	r3, [r7, #6]
            // Đợi cho đến khi chân xuống LOW (kết thúc pha HIGH của bit 1)
            while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)));
 80011ee:	bf00      	nop
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	4808      	ldr	r0, [pc, #32]	@ (8001214 <DHT22_Read_Byte+0x90>)
 80011f4:	f002 fe68 	bl	8003ec8 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f8      	bne.n	80011f0 <DHT22_Read_Byte+0x6c>
    for (i = 0; i < 8; i++) {
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	3301      	adds	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d9c4      	bls.n	8001194 <DHT22_Read_Byte+0x10>
        }
         // Nếu là bit 0, chân đã xuống LOW trước đó, không cần đợi thêm
    }
    return result;
 800120a:	79bb      	ldrb	r3, [r7, #6]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020000 	.word	0x40020000

08001218 <DHT22_Init>:

// --- Các hàm Public ---

// Hàm khởi tạo driver DHT22
void DHT22_Init(TIM_HandleTypeDef *htim) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    dht_timer = htim; // Lưu con trỏ timer handle
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <DHT22_Init+0x1c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
    // Đảm bảo Timer đã được start ở đâu đó (ví dụ trong main)
    // HAL_TIM_Base_Start(dht_timer); // Có thể start ở đây hoặc trong main
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200001f0 	.word	0x200001f0

08001238 <DHT22_Read_Data>:

// Hàm đọc nhiệt độ và độ ẩm
uint8_t DHT22_Read_Data(float *Temperature, float *Humidity) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	uint8_t data[5];
	uint16_t temp_raw, hum_raw;
	uint8_t checksum_calc;

	DHT22_Start();
 8001242:	f7ff ff53 	bl	80010ec <DHT22_Start>

	if (DHT22_Check_Response()) {
 8001246:	f7ff ff6f 	bl	8001128 <DHT22_Check_Response>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d064      	beq.n	800131a <DHT22_Read_Data+0xe2>
	    data[0] = DHT22_Read_Byte(); // Humidity integral
 8001250:	f7ff ff98 	bl	8001184 <DHT22_Read_Byte>
 8001254:	4603      	mov	r3, r0
 8001256:	733b      	strb	r3, [r7, #12]
	    data[1] = DHT22_Read_Byte(); // Humidity decimal
 8001258:	f7ff ff94 	bl	8001184 <DHT22_Read_Byte>
 800125c:	4603      	mov	r3, r0
 800125e:	737b      	strb	r3, [r7, #13]
	    data[2] = DHT22_Read_Byte(); // Temperature integral
 8001260:	f7ff ff90 	bl	8001184 <DHT22_Read_Byte>
 8001264:	4603      	mov	r3, r0
 8001266:	73bb      	strb	r3, [r7, #14]
	    data[3] = DHT22_Read_Byte(); // Temperature decimal
 8001268:	f7ff ff8c 	bl	8001184 <DHT22_Read_Byte>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]
	    data[4] = DHT22_Read_Byte(); // Checksum
 8001270:	f7ff ff88 	bl	8001184 <DHT22_Read_Byte>
 8001274:	4603      	mov	r3, r0
 8001276:	743b      	strb	r3, [r7, #16]

	    checksum_calc = data[0] + data[1] + data[2] + data[3];
 8001278:	7b3a      	ldrb	r2, [r7, #12]
 800127a:	7b7b      	ldrb	r3, [r7, #13]
 800127c:	4413      	add	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	4413      	add	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4413      	add	r3, r2
 800128a:	75fb      	strb	r3, [r7, #23]

	    if (checksum_calc == data[4]) {
 800128c:	7c3b      	ldrb	r3, [r7, #16]
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	429a      	cmp	r2, r3
 8001292:	d140      	bne.n	8001316 <DHT22_Read_Data+0xde>
	        hum_raw = (data[0] << 8) | data[1];
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	82bb      	strh	r3, [r7, #20]
	        temp_raw = (data[2] << 8) | data[3];
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	827b      	strh	r3, [r7, #18]

	        *Humidity = hum_raw / 10.0f;
 80012b4:	8abb      	ldrh	r3, [r7, #20]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012be:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	edc3 7a00 	vstr	s15, [r3]

	        if (temp_raw & 0x8000) { // check sign bit
 80012cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da12      	bge.n	80012fa <DHT22_Read_Data+0xc2>
	            temp_raw = temp_raw & 0x7FFF;
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012da:	827b      	strh	r3, [r7, #18]
	            *Temperature = -(temp_raw / 10.0f);
 80012dc:	8a7b      	ldrh	r3, [r7, #18]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ee:	eef1 7a67 	vneg.f32	s15, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edc3 7a00 	vstr	s15, [r3]
 80012f8:	e00b      	b.n	8001312 <DHT22_Read_Data+0xda>
	        } else {
	            *Temperature = temp_raw / 10.0f;
 80012fa:	8a7b      	ldrh	r3, [r7, #18]
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a00 	vstr	s15, [r3]
	        }

	        return DHT22_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e002      	b.n	800131c <DHT22_Read_Data+0xe4>
	    } else {
	        return DHT22_ERR_CHECKSUM;
 8001316:	2302      	movs	r3, #2
 8001318:	e000      	b.n	800131c <DHT22_Read_Data+0xe4>
	    }
	} else {
	    return DHT22_ERR_RESPONSE;
 800131a:	2301      	movs	r3, #1
	}

}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001338:	4a21      	ldr	r2, [pc, #132]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 800133a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800133c:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <MX_ADC1_Init+0x98>)
 800133e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001342:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <MX_ADC1_Init+0xa0>)
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_ADC1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001372:	2201      	movs	r2, #1
 8001374:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001380:	2201      	movs	r2, #1
 8001382:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_ADC1_Init+0x98>)
 8001386:	f001 fe5f 	bl	8003048 <HAL_ADC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001390:	f001 fad2 	bl	8002938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001394:	2306      	movs	r3, #6
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800139c:	2306      	movs	r3, #6
 800139e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_ADC1_Init+0x98>)
 80013a6:	f002 f831 	bl	800340c <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013b0:	f001 fac2 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001f4 	.word	0x200001f4
 80013c0:	40012000 	.word	0x40012000
 80013c4:	0f000001 	.word	0x0f000001

080013c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_ADC_MspInit+0x7c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d127      	bne.n	800143a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <HAL_ADC_MspInit+0x80>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	4a15      	ldr	r2, [pc, #84]	@ (8001448 <HAL_ADC_MspInit+0x80>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fa:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <HAL_ADC_MspInit+0x80>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_ADC_MspInit+0x80>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <HAL_ADC_MspInit+0x80>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <HAL_ADC_MspInit+0x80>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_ADC_MspInit+0x84>)
 8001436:	f002 fbab 	bl	8003b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012000 	.word	0x40012000
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b41      	ldr	r3, [pc, #260]	@ (8001570 <MX_GPIO_Init+0x120>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a40      	ldr	r2, [pc, #256]	@ (8001570 <MX_GPIO_Init+0x120>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b3e      	ldr	r3, [pc, #248]	@ (8001570 <MX_GPIO_Init+0x120>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <MX_GPIO_Init+0x120>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a39      	ldr	r2, [pc, #228]	@ (8001570 <MX_GPIO_Init+0x120>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <MX_GPIO_Init+0x120>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b33      	ldr	r3, [pc, #204]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a32      	ldr	r2, [pc, #200]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_GPIO_Init+0x120>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT22_PIN_GPIO_Port, DHT22_PIN_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	481f      	ldr	r0, [pc, #124]	@ (8001574 <MX_GPIO_Init+0x124>)
 80014f8:	f002 fcfe 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_PIN_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2106      	movs	r1, #6
 8001500:	481d      	ldr	r0, [pc, #116]	@ (8001578 <MX_GPIO_Init+0x128>)
 8001502:	f002 fcf9 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800150c:	481b      	ldr	r0, [pc, #108]	@ (800157c <MX_GPIO_Init+0x12c>)
 800150e:	f002 fcf3 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT22_PIN_Pin */
  GPIO_InitStruct.Pin = DHT22_PIN_Pin;
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT22_PIN_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <MX_GPIO_Init+0x124>)
 800152a:	f002 fb31 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PIN_Pin PB2 */
  GPIO_InitStruct.Pin = LED_PIN_Pin|GPIO_PIN_2;
 800152e:	2306      	movs	r3, #6
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_GPIO_Init+0x128>)
 8001546:	f002 fb23 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800154a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_GPIO_Init+0x12c>)
 8001564:	f002 fb14 	bl	8003b90 <HAL_GPIO_Init>

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	@ 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40021000 	.word	0x40021000

08001580 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_I2C1_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <MX_I2C1_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_I2C1_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <MX_I2C1_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_I2C1_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_I2C1_Init+0x50>)
 80015be:	f002 fcb5 	bl	8003f2c <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f001 f9b6 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000023c 	.word	0x2000023c
 80015d4:	40005400 	.word	0x40005400
 80015d8:	000186a0 	.word	0x000186a0

080015dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_I2C_MspInit+0x84>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12b      	bne.n	8001656 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23c0      	movs	r3, #192	@ 0xc0
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	2312      	movs	r3, #18
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162a:	2304      	movs	r3, #4
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <HAL_I2C_MspInit+0x8c>)
 8001636:	f002 faab 	bl	8003b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f023 030f 	bic.w	r3, r3, #15
 800167e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	f043 030c 	orr.w	r3, r3, #12
 800168c:	b2db      	uxtb	r3, r3
 800168e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	b2db      	uxtb	r3, r3
 8001698:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800169a:	7bbb      	ldrb	r3, [r7, #14]
 800169c:	f043 030c 	orr.w	r3, r3, #12
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80016a4:	7bbb      	ldrb	r3, [r7, #14]
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	4619      	mov	r1, r3
 80016b8:	f107 0208 	add.w	r2, r7, #8
 80016bc:	2364      	movs	r3, #100	@ 0x64
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2304      	movs	r3, #4
 80016c2:	f002 fd77 	bl	80041b4 <HAL_I2C_Master_Transmit>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af02      	add	r7, sp, #8
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f023 030f 	bic.w	r3, r3, #15
 80016e0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	f043 030d 	orr.w	r3, r3, #13
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f043 0309 	orr.w	r3, r3, #9
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	f043 030d 	orr.w	r3, r3, #13
 8001702:	b2db      	uxtb	r3, r3
 8001704:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	f043 0309 	orr.w	r3, r3, #9
 800170c:	b2db      	uxtb	r3, r3
 800170e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	f107 0208 	add.w	r2, r7, #8
 800171e:	2364      	movs	r3, #100	@ 0x64
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2304      	movs	r3, #4
 8001724:	f002 fd46 	bl	80041b4 <HAL_I2C_Master_Transmit>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ff96 	bl	800166c <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e006      	b.n	8001754 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001746:	2120      	movs	r1, #32
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffc0 	bl	80016ce <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b4f      	cmp	r3, #79	@ 0x4f
 8001758:	ddf5      	ble.n	8001746 <lcd_clear+0x16>
    }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d824      	bhi.n	80017c0 <lcd_gotoxy+0x5c>
 8001776:	a201      	add	r2, pc, #4	@ (adr r2, 800177c <lcd_gotoxy+0x18>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	08001797 	.word	0x08001797
 8001784:	080017a1 	.word	0x080017a1
 8001788:	080017ab 	.word	0x080017ab
    {
        case 0: address = 0x80 + col; break;  // First row
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3b80      	subs	r3, #128	@ 0x80
 8001792:	75fb      	strb	r3, [r7, #23]
 8001794:	e00e      	b.n	80017b4 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b40      	subs	r3, #64	@ 0x40
 800179c:	75fb      	strb	r3, [r7, #23]
 800179e:	e009      	b.n	80017b4 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3b6c      	subs	r3, #108	@ 0x6c
 80017a6:	75fb      	strb	r3, [r7, #23]
 80017a8:	e004      	b.n	80017b4 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b2c      	subs	r3, #44	@ 0x2c
 80017b0:	75fb      	strb	r3, [r7, #23]
 80017b2:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	4619      	mov	r1, r3
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff ff57 	bl	800166c <lcd_send_cmd>
 80017be:	e000      	b.n	80017c2 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 80017c0:	bf00      	nop
}
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80017d0:	2032      	movs	r0, #50	@ 0x32
 80017d2:	f001 fc15 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80017d6:	2130      	movs	r1, #48	@ 0x30
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff47 	bl	800166c <lcd_send_cmd>
    HAL_Delay(5);
 80017de:	2005      	movs	r0, #5
 80017e0:	f001 fc0e 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80017e4:	2130      	movs	r1, #48	@ 0x30
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff40 	bl	800166c <lcd_send_cmd>
    HAL_Delay(1);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f001 fc07 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80017f2:	2130      	movs	r1, #48	@ 0x30
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff39 	bl	800166c <lcd_send_cmd>
    HAL_Delay(10);
 80017fa:	200a      	movs	r0, #10
 80017fc:	f001 fc00 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001800:	2120      	movs	r1, #32
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff32 	bl	800166c <lcd_send_cmd>
    HAL_Delay(10);
 8001808:	200a      	movs	r0, #10
 800180a:	f001 fbf9 	bl	8003000 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800180e:	2128      	movs	r1, #40	@ 0x28
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff2b 	bl	800166c <lcd_send_cmd>
    HAL_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f001 fbf2 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800181c:	2108      	movs	r1, #8
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ff24 	bl	800166c <lcd_send_cmd>
    HAL_Delay(1);
 8001824:	2001      	movs	r0, #1
 8001826:	f001 fbeb 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800182a:	2101      	movs	r1, #1
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff1d 	bl	800166c <lcd_send_cmd>
    HAL_Delay(2);
 8001832:	2002      	movs	r0, #2
 8001834:	f001 fbe4 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001838:	2106      	movs	r1, #6
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff16 	bl	800166c <lcd_send_cmd>
    HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f001 fbdd 	bl	8003000 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001846:	210c      	movs	r1, #12
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff0f 	bl	800166c <lcd_send_cmd>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001860:	e007      	b.n	8001872 <lcd_puts+0x1c>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	603a      	str	r2, [r7, #0]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff2e 	bl	80016ce <lcd_send_data>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f3      	bne.n	8001862 <lcd_puts+0xc>
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <Display_Intro>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Display_Intro(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  lcd_clear(&lcd1);
 8001888:	4814      	ldr	r0, [pc, #80]	@ (80018dc <Display_Intro+0x58>)
 800188a:	f7ff ff51 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 1, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <Display_Intro+0x58>)
 8001894:	f7ff ff66 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "HE THONG GIAM SAT");
 8001898:	4911      	ldr	r1, [pc, #68]	@ (80018e0 <Display_Intro+0x5c>)
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <Display_Intro+0x58>)
 800189c:	f7ff ffdb 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 3, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2103      	movs	r1, #3
 80018a4:	480d      	ldr	r0, [pc, #52]	@ (80018dc <Display_Intro+0x58>)
 80018a6:	f7ff ff5d 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "NHA THONG MINH");
 80018aa:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <Display_Intro+0x60>)
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <Display_Intro+0x58>)
 80018ae:	f7ff ffd2 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 1, 2);
 80018b2:	2202      	movs	r2, #2
 80018b4:	2101      	movs	r1, #1
 80018b6:	4809      	ldr	r0, [pc, #36]	@ (80018dc <Display_Intro+0x58>)
 80018b8:	f7ff ff54 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "NGUYEN TAI ANH TUAN");
 80018bc:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <Display_Intro+0x64>)
 80018be:	4807      	ldr	r0, [pc, #28]	@ (80018dc <Display_Intro+0x58>)
 80018c0:	f7ff ffc9 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 3, 3);
 80018c4:	2203      	movs	r2, #3
 80018c6:	2103      	movs	r1, #3
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <Display_Intro+0x58>)
 80018ca:	f7ff ff4b 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "DH SPKT TP.HCM");
 80018ce:	4907      	ldr	r1, [pc, #28]	@ (80018ec <Display_Intro+0x68>)
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <Display_Intro+0x58>)
 80018d2:	f7ff ffc0 	bl	8001856 <lcd_puts>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000290 	.word	0x20000290
 80018e0:	0800a110 	.word	0x0800a110
 80018e4:	0800a124 	.word	0x0800a124
 80018e8:	0800a134 	.word	0x0800a134
 80018ec:	0800a148 	.word	0x0800a148

080018f0 <Display_Auth>:

void Display_Auth(uint8_t position) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  lcd_clear(&lcd1);
 80018fa:	481e      	ldr	r0, [pc, #120]	@ (8001974 <Display_Auth+0x84>)
 80018fc:	f7ff ff18 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <Display_Auth+0x84>)
 8001906:	f7ff ff2d 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "CHE DO XAC THUC");
 800190a:	491b      	ldr	r1, [pc, #108]	@ (8001978 <Display_Auth+0x88>)
 800190c:	4819      	ldr	r0, [pc, #100]	@ (8001974 <Display_Auth+0x84>)
 800190e:	f7ff ffa2 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 1);
 8001912:	2201      	movs	r2, #1
 8001914:	2100      	movs	r1, #0
 8001916:	4817      	ldr	r0, [pc, #92]	@ (8001974 <Display_Auth+0x84>)
 8001918:	f7ff ff24 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, position == 0 ? "> KEYPAD4x4" : "  KEYPAD4x4");
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <Display_Auth+0x36>
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <Display_Auth+0x8c>)
 8001924:	e000      	b.n	8001928 <Display_Auth+0x38>
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <Display_Auth+0x90>)
 8001928:	4619      	mov	r1, r3
 800192a:	4812      	ldr	r0, [pc, #72]	@ (8001974 <Display_Auth+0x84>)
 800192c:	f7ff ff93 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 2);
 8001930:	2202      	movs	r2, #2
 8001932:	2100      	movs	r1, #0
 8001934:	480f      	ldr	r0, [pc, #60]	@ (8001974 <Display_Auth+0x84>)
 8001936:	f7ff ff15 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, position == 1 ? "> THE RFID" : "  THE RFID");
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <Display_Auth+0x54>
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <Display_Auth+0x94>)
 8001942:	e000      	b.n	8001946 <Display_Auth+0x56>
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <Display_Auth+0x98>)
 8001946:	4619      	mov	r1, r3
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <Display_Auth+0x84>)
 800194a:	f7ff ff84 	bl	8001856 <lcd_puts>

  lcd_gotoxy(&lcd1, 0, 3);
 800194e:	2203      	movs	r2, #3
 8001950:	2100      	movs	r1, #0
 8001952:	4808      	ldr	r0, [pc, #32]	@ (8001974 <Display_Auth+0x84>)
 8001954:	f7ff ff06 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, position == 2 ? "> VAN TAY" : "  VAN TAY");
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d101      	bne.n	8001962 <Display_Auth+0x72>
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <Display_Auth+0x9c>)
 8001960:	e000      	b.n	8001964 <Display_Auth+0x74>
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <Display_Auth+0xa0>)
 8001964:	4619      	mov	r1, r3
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <Display_Auth+0x84>)
 8001968:	f7ff ff75 	bl	8001856 <lcd_puts>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000290 	.word	0x20000290
 8001978:	0800a158 	.word	0x0800a158
 800197c:	0800a168 	.word	0x0800a168
 8001980:	0800a174 	.word	0x0800a174
 8001984:	0800a180 	.word	0x0800a180
 8001988:	0800a18c 	.word	0x0800a18c
 800198c:	0800a198 	.word	0x0800a198
 8001990:	0800a1a4 	.word	0x0800a1a4

08001994 <Display_Sensors>:

void Display_Sensors(float temp, float humidity, uint32_t gas, uint32_t light) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af02      	add	r7, sp, #8
 800199a:	ed87 0a03 	vstr	s0, [r7, #12]
 800199e:	edc7 0a02 	vstr	s1, [r7, #8]
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  lcd_clear(&lcd1);
 80019a6:	4843      	ldr	r0, [pc, #268]	@ (8001ab4 <Display_Sensors+0x120>)
 80019a8:	f7ff fec2 	bl	8001730 <lcd_clear>
  
  char buffer[20];
  
  lcd_gotoxy(&lcd1, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	4840      	ldr	r0, [pc, #256]	@ (8001ab4 <Display_Sensors+0x120>)
 80019b2:	f7ff fed7 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "THONG TIN CAM BIEN");
 80019b6:	4940      	ldr	r1, [pc, #256]	@ (8001ab8 <Display_Sensors+0x124>)
 80019b8:	483e      	ldr	r0, [pc, #248]	@ (8001ab4 <Display_Sensors+0x120>)
 80019ba:	f7ff ff4c 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 1);
 80019be:	2201      	movs	r2, #1
 80019c0:	2100      	movs	r1, #0
 80019c2:	483c      	ldr	r0, [pc, #240]	@ (8001ab4 <Display_Sensors+0x120>)
 80019c4:	f7ff fece 	bl	8001764 <lcd_gotoxy>
  snprintf(buffer, sizeof(buffer), "NHIET DO: %d.%01d", (int)temp, (int)(temp * 10) % 10);
 80019c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019cc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e0:	ee17 1a90 	vmov	r1, s15
 80019e4:	4b35      	ldr	r3, [pc, #212]	@ (8001abc <Display_Sensors+0x128>)
 80019e6:	fb83 2301 	smull	r2, r3, r3, r1
 80019ea:	109a      	asrs	r2, r3, #2
 80019ec:	17cb      	asrs	r3, r1, #31
 80019ee:	1ad2      	subs	r2, r2, r3
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	1aca      	subs	r2, r1, r3
 80019fa:	f107 0014 	add.w	r0, r7, #20
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	ee16 3a90 	vmov	r3, s13
 8001a04:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac0 <Display_Sensors+0x12c>)
 8001a06:	2114      	movs	r1, #20
 8001a08:	f006 fad8 	bl	8007fbc <sniprintf>
  lcd_puts(&lcd1, buffer);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4828      	ldr	r0, [pc, #160]	@ (8001ab4 <Display_Sensors+0x120>)
 8001a14:	f7ff ff1f 	bl	8001856 <lcd_puts>
  lcd_send_data(&lcd1, 0xDF);
 8001a18:	21df      	movs	r1, #223	@ 0xdf
 8001a1a:	4826      	ldr	r0, [pc, #152]	@ (8001ab4 <Display_Sensors+0x120>)
 8001a1c:	f7ff fe57 	bl	80016ce <lcd_send_data>
  lcd_send_data(&lcd1, 'C');
 8001a20:	2143      	movs	r1, #67	@ 0x43
 8001a22:	4824      	ldr	r0, [pc, #144]	@ (8001ab4 <Display_Sensors+0x120>)
 8001a24:	f7ff fe53 	bl	80016ce <lcd_send_data>
  
  lcd_gotoxy(&lcd1, 0, 2);
 8001a28:	2202      	movs	r2, #2
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4821      	ldr	r0, [pc, #132]	@ (8001ab4 <Display_Sensors+0x120>)
 8001a2e:	f7ff fe99 	bl	8001764 <lcd_gotoxy>
  snprintf(buffer, sizeof(buffer), "DO AM: %d.%01d%%", (int)humidity, (int)(humidity * 10) % 10);
 8001a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a36:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4a:	ee17 1a90 	vmov	r1, s15
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <Display_Sensors+0x128>)
 8001a50:	fb83 2301 	smull	r2, r3, r3, r1
 8001a54:	109a      	asrs	r2, r3, #2
 8001a56:	17cb      	asrs	r3, r1, #31
 8001a58:	1ad2      	subs	r2, r2, r3
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	1aca      	subs	r2, r1, r3
 8001a64:	f107 0014 	add.w	r0, r7, #20
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	ee16 3a90 	vmov	r3, s13
 8001a6e:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <Display_Sensors+0x130>)
 8001a70:	2114      	movs	r1, #20
 8001a72:	f006 faa3 	bl	8007fbc <sniprintf>
  lcd_puts(&lcd1, buffer);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <Display_Sensors+0x120>)
 8001a7e:	f7ff feea 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 3);
 8001a82:	2203      	movs	r2, #3
 8001a84:	2100      	movs	r1, #0
 8001a86:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <Display_Sensors+0x120>)
 8001a88:	f7ff fe6c 	bl	8001764 <lcd_gotoxy>
  snprintf(buffer, sizeof(buffer), "GAS:%u  LUX:%u", gas, light);
 8001a8c:	f107 0014 	add.w	r0, r7, #20
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <Display_Sensors+0x134>)
 8001a98:	2114      	movs	r1, #20
 8001a9a:	f006 fa8f 	bl	8007fbc <sniprintf>
  lcd_puts(&lcd1, buffer);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <Display_Sensors+0x120>)
 8001aa6:	f7ff fed6 	bl	8001856 <lcd_puts>
}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	@ 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000290 	.word	0x20000290
 8001ab8:	0800a1b0 	.word	0x0800a1b0
 8001abc:	66666667 	.word	0x66666667
 8001ac0:	0800a1c4 	.word	0x0800a1c4
 8001ac4:	0800a1d8 	.word	0x0800a1d8
 8001ac8:	0800a1ec 	.word	0x0800a1ec

08001acc <Display_Password_Entry>:

void Display_Password_Entry(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  lcd_clear(&lcd1);
 8001ad2:	4820      	ldr	r0, [pc, #128]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001ad4:	f7ff fe2c 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	481d      	ldr	r0, [pc, #116]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001ade:	f7ff fe41 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "NHAP MAT KHAU:");
 8001ae2:	491d      	ldr	r1, [pc, #116]	@ (8001b58 <Display_Password_Entry+0x8c>)
 8001ae4:	481b      	ldr	r0, [pc, #108]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001ae6:	f7ff feb6 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2100      	movs	r1, #0
 8001aee:	4819      	ldr	r0, [pc, #100]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001af0:	f7ff fe38 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "MAT KHAU: ");
 8001af4:	4919      	ldr	r1, [pc, #100]	@ (8001b5c <Display_Password_Entry+0x90>)
 8001af6:	4817      	ldr	r0, [pc, #92]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001af8:	f7ff fead 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 10, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	210a      	movs	r1, #10
 8001b00:	4814      	ldr	r0, [pc, #80]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001b02:	f7ff fe2f 	bl	8001764 <lcd_gotoxy>
  for (int i = 0; i < password_length; i++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	e006      	b.n	8001b1a <Display_Password_Entry+0x4e>
    lcd_send_data(&lcd1, '*');
 8001b0c:	212a      	movs	r1, #42	@ 0x2a
 8001b0e:	4811      	ldr	r0, [pc, #68]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001b10:	f7ff fddd 	bl	80016ce <lcd_send_data>
  for (int i = 0; i < password_length; i++) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <Display_Password_Entry+0x94>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	dbf2      	blt.n	8001b0c <Display_Password_Entry+0x40>
  }
  
  lcd_gotoxy(&lcd1, 0, 2);
 8001b26:	2202      	movs	r2, #2
 8001b28:	2100      	movs	r1, #0
 8001b2a:	480a      	ldr	r0, [pc, #40]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001b2c:	f7ff fe1a 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "# XAC NHAN");
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <Display_Password_Entry+0x98>)
 8001b32:	4808      	ldr	r0, [pc, #32]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001b34:	f7ff fe8f 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 3);
 8001b38:	2203      	movs	r2, #3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001b3e:	f7ff fe11 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "* XOA/HUY");
 8001b42:	4909      	ldr	r1, [pc, #36]	@ (8001b68 <Display_Password_Entry+0x9c>)
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <Display_Password_Entry+0x88>)
 8001b46:	f7ff fe86 	bl	8001856 <lcd_puts>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000290 	.word	0x20000290
 8001b58:	0800a1fc 	.word	0x0800a1fc
 8001b5c:	0800a20c 	.word	0x0800a20c
 8001b60:	200002ab 	.word	0x200002ab
 8001b64:	0800a218 	.word	0x0800a218
 8001b68:	0800a224 	.word	0x0800a224

08001b6c <Display_Setup_Verify>:

void Display_Setup_Verify(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  lcd_clear(&lcd1);
 8001b72:	4820      	ldr	r0, [pc, #128]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001b74:	f7ff fddc 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	481d      	ldr	r0, [pc, #116]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001b7e:	f7ff fdf1 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "XAC THUC CAI DAT");
 8001b82:	491d      	ldr	r1, [pc, #116]	@ (8001bf8 <Display_Setup_Verify+0x8c>)
 8001b84:	481b      	ldr	r0, [pc, #108]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001b86:	f7ff fe66 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 1);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001b90:	f7ff fde8 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "MAT KHAU: ");
 8001b94:	4919      	ldr	r1, [pc, #100]	@ (8001bfc <Display_Setup_Verify+0x90>)
 8001b96:	4817      	ldr	r0, [pc, #92]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001b98:	f7ff fe5d 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 10, 1);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	210a      	movs	r1, #10
 8001ba0:	4814      	ldr	r0, [pc, #80]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001ba2:	f7ff fddf 	bl	8001764 <lcd_gotoxy>
  for (int i = 0; i < password_length; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	e006      	b.n	8001bba <Display_Setup_Verify+0x4e>
    lcd_send_data(&lcd1, '*');
 8001bac:	212a      	movs	r1, #42	@ 0x2a
 8001bae:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001bb0:	f7ff fd8d 	bl	80016ce <lcd_send_data>
  for (int i = 0; i < password_length; i++) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <Display_Setup_Verify+0x94>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	dbf2      	blt.n	8001bac <Display_Setup_Verify+0x40>
  }
  
  lcd_gotoxy(&lcd1, 0, 2);
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001bcc:	f7ff fdca 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "# XAC NHAN");
 8001bd0:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <Display_Setup_Verify+0x98>)
 8001bd2:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001bd4:	f7ff fe3f 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 3);
 8001bd8:	2203      	movs	r2, #3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001bde:	f7ff fdc1 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "* XOA/HUY");
 8001be2:	4909      	ldr	r1, [pc, #36]	@ (8001c08 <Display_Setup_Verify+0x9c>)
 8001be4:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <Display_Setup_Verify+0x88>)
 8001be6:	f7ff fe36 	bl	8001856 <lcd_puts>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000290 	.word	0x20000290
 8001bf8:	0800a230 	.word	0x0800a230
 8001bfc:	0800a20c 	.word	0x0800a20c
 8001c00:	200002ab 	.word	0x200002ab
 8001c04:	0800a218 	.word	0x0800a218
 8001c08:	0800a224 	.word	0x0800a224

08001c0c <HAL_UART_RxCpltCallback>:

void Servo_SetAngle(uint8_t angle);
bool status_open = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4ac1      	ldr	r2, [pc, #772]	@ (8001f20 <HAL_UART_RxCpltCallback+0x314>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	f040 8345 	bne.w	80022aa <HAL_UART_RxCpltCallback+0x69e>
  {
    switch(rx_char) {
 8001c20:	4bc0      	ldr	r3, [pc, #768]	@ (8001f24 <HAL_UART_RxCpltCallback+0x318>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3b23      	subs	r3, #35	@ 0x23
 8001c26:	2b50      	cmp	r3, #80	@ 0x50
 8001c28:	f200 833a 	bhi.w	80022a0 <HAL_UART_RxCpltCallback+0x694>
 8001c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c34 <HAL_UART_RxCpltCallback+0x28>)
 8001c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c32:	bf00      	nop
 8001c34:	08001e6f 	.word	0x08001e6f
 8001c38:	080022a1 	.word	0x080022a1
 8001c3c:	080022a1 	.word	0x080022a1
 8001c40:	080022a1 	.word	0x080022a1
 8001c44:	080022a1 	.word	0x080022a1
 8001c48:	080022a1 	.word	0x080022a1
 8001c4c:	080022a1 	.word	0x080022a1
 8001c50:	080022a1 	.word	0x080022a1
 8001c54:	080022a1 	.word	0x080022a1
 8001c58:	080022a1 	.word	0x080022a1
 8001c5c:	080022a1 	.word	0x080022a1
 8001c60:	080022a1 	.word	0x080022a1
 8001c64:	080022a1 	.word	0x080022a1
 8001c68:	0800208b 	.word	0x0800208b
 8001c6c:	0800208b 	.word	0x0800208b
 8001c70:	0800208b 	.word	0x0800208b
 8001c74:	0800208b 	.word	0x0800208b
 8001c78:	0800208b 	.word	0x0800208b
 8001c7c:	0800208b 	.word	0x0800208b
 8001c80:	0800208b 	.word	0x0800208b
 8001c84:	0800208b 	.word	0x0800208b
 8001c88:	0800208b 	.word	0x0800208b
 8001c8c:	0800208b 	.word	0x0800208b
 8001c90:	080022a1 	.word	0x080022a1
 8001c94:	080022a1 	.word	0x080022a1
 8001c98:	080022a1 	.word	0x080022a1
 8001c9c:	080022a1 	.word	0x080022a1
 8001ca0:	080022a1 	.word	0x080022a1
 8001ca4:	080022a1 	.word	0x080022a1
 8001ca8:	080022a1 	.word	0x080022a1
 8001cac:	08001ddd 	.word	0x08001ddd
 8001cb0:	08001dfb 	.word	0x08001dfb
 8001cb4:	08001f13 	.word	0x08001f13
 8001cb8:	080022a1 	.word	0x080022a1
 8001cbc:	080021c5 	.word	0x080021c5
 8001cc0:	0800216f 	.word	0x0800216f
 8001cc4:	0800207f 	.word	0x0800207f
 8001cc8:	080022a1 	.word	0x080022a1
 8001ccc:	08001f7f 	.word	0x08001f7f
 8001cd0:	080022a1 	.word	0x080022a1
 8001cd4:	080022a1 	.word	0x080022a1
 8001cd8:	080022a1 	.word	0x080022a1
 8001cdc:	080022a1 	.word	0x080022a1
 8001ce0:	08001fcf 	.word	0x08001fcf
 8001ce4:	08002129 	.word	0x08002129
 8001ce8:	08001fb3 	.word	0x08001fb3
 8001cec:	080022a1 	.word	0x080022a1
 8001cf0:	08001feb 	.word	0x08001feb
 8001cf4:	08001f61 	.word	0x08001f61
 8001cf8:	0800202f 	.word	0x0800202f
 8001cfc:	080021d3 	.word	0x080021d3
 8001d00:	0800203b 	.word	0x0800203b
 8001d04:	08001f91 	.word	0x08001f91
 8001d08:	080020db 	.word	0x080020db
 8001d0c:	08002161 	.word	0x08002161
 8001d10:	0800225d 	.word	0x0800225d
 8001d14:	080022a1 	.word	0x080022a1
 8001d18:	080022a1 	.word	0x080022a1
 8001d1c:	080022a1 	.word	0x080022a1
 8001d20:	080022a1 	.word	0x080022a1
 8001d24:	080022a1 	.word	0x080022a1
 8001d28:	080022a1 	.word	0x080022a1
 8001d2c:	08001dc1 	.word	0x08001dc1
 8001d30:	080022a1 	.word	0x080022a1
 8001d34:	080022a1 	.word	0x080022a1
 8001d38:	08001da9 	.word	0x08001da9
 8001d3c:	080022a1 	.word	0x080022a1
 8001d40:	08001db5 	.word	0x08001db5
 8001d44:	08001d91 	.word	0x08001d91
 8001d48:	08001d9d 	.word	0x08001d9d
 8001d4c:	080022a1 	.word	0x080022a1
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	08001d85 	.word	0x08001d85
 8001d58:	080022a1 	.word	0x080022a1
 8001d5c:	080022a1 	.word	0x080022a1
 8001d60:	080022a1 	.word	0x080022a1
 8001d64:	080022a1 	.word	0x080022a1
 8001d68:	080022a1 	.word	0x080022a1
 8001d6c:	080022a1 	.word	0x080022a1
 8001d70:	080022a1 	.word	0x080022a1
 8001d74:	08001dcf 	.word	0x08001dcf
      case 'j':
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	486a      	ldr	r0, [pc, #424]	@ (8001f28 <HAL_UART_RxCpltCallback+0x31c>)
 8001d7e:	f002 f8bb 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001d82:	e28d      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'k':
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	4867      	ldr	r0, [pc, #412]	@ (8001f28 <HAL_UART_RxCpltCallback+0x31c>)
 8001d8a:	f002 f8b5 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001d8e:	e287      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'g':
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2104      	movs	r1, #4
 8001d94:	4864      	ldr	r0, [pc, #400]	@ (8001f28 <HAL_UART_RxCpltCallback+0x31c>)
 8001d96:	f002 f8af 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001d9a:	e281      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'h':
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4861      	ldr	r0, [pc, #388]	@ (8001f28 <HAL_UART_RxCpltCallback+0x31c>)
 8001da2:	f002 f8a9 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001da6:	e27b      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'd':
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	485f      	ldr	r0, [pc, #380]	@ (8001f2c <HAL_UART_RxCpltCallback+0x320>)
 8001dae:	f002 f8a3 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001db2:	e275      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'f':
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	@ 0x80
 8001db8:	485c      	ldr	r0, [pc, #368]	@ (8001f2c <HAL_UART_RxCpltCallback+0x320>)
 8001dba:	f002 f89d 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001dbe:	e26f      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'a':
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc6:	4859      	ldr	r0, [pc, #356]	@ (8001f2c <HAL_UART_RxCpltCallback+0x320>)
 8001dc8:	f002 f896 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001dcc:	e268      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 's':
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd4:	4855      	ldr	r0, [pc, #340]	@ (8001f2c <HAL_UART_RxCpltCallback+0x320>)
 8001dd6:	f002 f88f 	bl	8003ef8 <HAL_GPIO_WritePin>
        break;
 8001dda:	e261      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
      case 'A':
        currentMode = MODE_AUTH;
 8001ddc:	4b54      	ldr	r3, [pc, #336]	@ (8001f30 <HAL_UART_RxCpltCallback+0x324>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
        menuPosition = 0;
 8001de2:	4b54      	ldr	r3, [pc, #336]	@ (8001f34 <HAL_UART_RxCpltCallback+0x328>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
        is_entering_password = false;
 8001de8:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <HAL_UART_RxCpltCallback+0x32c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
        Display_Auth(menuPosition);
 8001dee:	4b51      	ldr	r3, [pc, #324]	@ (8001f34 <HAL_UART_RxCpltCallback+0x328>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fd7c 	bl	80018f0 <Display_Auth>
        break;
 8001df8:	e252      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'B':
        if (currentMode == MODE_AUTH && !is_entering_password) {
 8001dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8001f30 <HAL_UART_RxCpltCallback+0x324>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d11b      	bne.n	8001e3a <HAL_UART_RxCpltCallback+0x22e>
 8001e02:	4b4d      	ldr	r3, [pc, #308]	@ (8001f38 <HAL_UART_RxCpltCallback+0x32c>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f083 0301 	eor.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <HAL_UART_RxCpltCallback+0x22e>
          menuPosition = (menuPosition + 1) % 3;
 8001e10:	4b48      	ldr	r3, [pc, #288]	@ (8001f34 <HAL_UART_RxCpltCallback+0x328>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4b49      	ldr	r3, [pc, #292]	@ (8001f3c <HAL_UART_RxCpltCallback+0x330>)
 8001e18:	fb83 3102 	smull	r3, r1, r3, r2
 8001e1c:	17d3      	asrs	r3, r2, #31
 8001e1e:	1ac9      	subs	r1, r1, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	1ad1      	subs	r1, r2, r3
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	4b42      	ldr	r3, [pc, #264]	@ (8001f34 <HAL_UART_RxCpltCallback+0x328>)
 8001e2c:	701a      	strb	r2, [r3, #0]
          Display_Auth(menuPosition);
 8001e2e:	4b41      	ldr	r3, [pc, #260]	@ (8001f34 <HAL_UART_RxCpltCallback+0x328>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fd5c 	bl	80018f0 <Display_Auth>
        }
        else if (currentMode == MODE_SETUP) {
          setupMenuPosition = (setupMenuPosition + 1) % 3;
          Display_Setup(setupMenuPosition);
        }
        break;
 8001e38:	e229      	b.n	800228e <HAL_UART_RxCpltCallback+0x682>
        else if (currentMode == MODE_SETUP) {
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_UART_RxCpltCallback+0x324>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	f040 8225 	bne.w	800228e <HAL_UART_RxCpltCallback+0x682>
          setupMenuPosition = (setupMenuPosition + 1) % 3;
 8001e44:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_UART_RxCpltCallback+0x334>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f3c <HAL_UART_RxCpltCallback+0x330>)
 8001e4c:	fb83 3102 	smull	r3, r1, r3, r2
 8001e50:	17d3      	asrs	r3, r2, #31
 8001e52:	1ac9      	subs	r1, r1, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	440b      	add	r3, r1
 8001e5a:	1ad1      	subs	r1, r2, r3
 8001e5c:	b2ca      	uxtb	r2, r1
 8001e5e:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <HAL_UART_RxCpltCallback+0x334>)
 8001e60:	701a      	strb	r2, [r3, #0]
          Display_Setup(setupMenuPosition);
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_UART_RxCpltCallback+0x334>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fa58 	bl	800231c <Display_Setup>
        break;
 8001e6c:	e20f      	b.n	800228e <HAL_UART_RxCpltCallback+0x682>
        
      case '#':
        if (currentMode == MODE_AUTH && !is_entering_password) {
 8001e6e:	4b30      	ldr	r3, [pc, #192]	@ (8001f30 <HAL_UART_RxCpltCallback+0x324>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d126      	bne.n	8001ec4 <HAL_UART_RxCpltCallback+0x2b8>
 8001e76:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_UART_RxCpltCallback+0x32c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01f      	beq.n	8001ec4 <HAL_UART_RxCpltCallback+0x2b8>
          lcd_gotoxy(&lcd1, 0, 3);
 8001e84:	2203      	movs	r2, #3
 8001e86:	2100      	movs	r1, #0
 8001e88:	482e      	ldr	r0, [pc, #184]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001e8a:	f7ff fc6b 	bl	8001764 <lcd_gotoxy>
          switch(menuPosition) {
 8001e8e:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <HAL_UART_RxCpltCallback+0x328>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d010      	beq.n	8001eb8 <HAL_UART_RxCpltCallback+0x2ac>
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	dc39      	bgt.n	8001f0e <HAL_UART_RxCpltCallback+0x302>
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <HAL_UART_RxCpltCallback+0x298>
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_RxCpltCallback+0x2a2>
 8001ea2:	e034      	b.n	8001f0e <HAL_UART_RxCpltCallback+0x302>
            case 0:
              lcd_puts(&lcd1, "XAC THUC KEYPAD...");
 8001ea4:	4928      	ldr	r1, [pc, #160]	@ (8001f48 <HAL_UART_RxCpltCallback+0x33c>)
 8001ea6:	4827      	ldr	r0, [pc, #156]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001ea8:	f7ff fcd5 	bl	8001856 <lcd_puts>
              break;
 8001eac:	e009      	b.n	8001ec2 <HAL_UART_RxCpltCallback+0x2b6>
            case 1:
              lcd_puts(&lcd1, "XAC THUC RFID...");
 8001eae:	4927      	ldr	r1, [pc, #156]	@ (8001f4c <HAL_UART_RxCpltCallback+0x340>)
 8001eb0:	4824      	ldr	r0, [pc, #144]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001eb2:	f7ff fcd0 	bl	8001856 <lcd_puts>
              break;
 8001eb6:	e004      	b.n	8001ec2 <HAL_UART_RxCpltCallback+0x2b6>
            case 2:
              lcd_puts(&lcd1, "XAC THUC VAN TAY...");
 8001eb8:	4925      	ldr	r1, [pc, #148]	@ (8001f50 <HAL_UART_RxCpltCallback+0x344>)
 8001eba:	4822      	ldr	r0, [pc, #136]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001ebc:	f7ff fccb 	bl	8001856 <lcd_puts>
              break;
 8001ec0:	bf00      	nop
          switch(menuPosition) {
 8001ec2:	e024      	b.n	8001f0e <HAL_UART_RxCpltCallback+0x302>
          }
        }
        else if (currentMode == MODE_SETUP) {
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_UART_RxCpltCallback+0x324>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	f040 81e2 	bne.w	8002292 <HAL_UART_RxCpltCallback+0x686>
          lcd_gotoxy(&lcd1, 0, 3);
 8001ece:	2203      	movs	r2, #3
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	481c      	ldr	r0, [pc, #112]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001ed4:	f7ff fc46 	bl	8001764 <lcd_gotoxy>
          switch(setupMenuPosition) {
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_UART_RxCpltCallback+0x334>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d011      	beq.n	8001f04 <HAL_UART_RxCpltCallback+0x2f8>
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f300 81d6 	bgt.w	8002292 <HAL_UART_RxCpltCallback+0x686>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_UART_RxCpltCallback+0x2e4>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_UART_RxCpltCallback+0x2ee>
            case 2:
              lcd_puts(&lcd1, "SETUP RFID...");
              break;
          }
        }
        break;
 8001eee:	e1d0      	b.n	8002292 <HAL_UART_RxCpltCallback+0x686>
              lcd_puts(&lcd1, "SETUP MAT KHAU...");
 8001ef0:	4918      	ldr	r1, [pc, #96]	@ (8001f54 <HAL_UART_RxCpltCallback+0x348>)
 8001ef2:	4814      	ldr	r0, [pc, #80]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001ef4:	f7ff fcaf 	bl	8001856 <lcd_puts>
              break;
 8001ef8:	e00a      	b.n	8001f10 <HAL_UART_RxCpltCallback+0x304>
              lcd_puts(&lcd1, "SETUP VAN TAY...");
 8001efa:	4917      	ldr	r1, [pc, #92]	@ (8001f58 <HAL_UART_RxCpltCallback+0x34c>)
 8001efc:	4811      	ldr	r0, [pc, #68]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001efe:	f7ff fcaa 	bl	8001856 <lcd_puts>
              break;
 8001f02:	e005      	b.n	8001f10 <HAL_UART_RxCpltCallback+0x304>
              lcd_puts(&lcd1, "SETUP RFID...");
 8001f04:	4915      	ldr	r1, [pc, #84]	@ (8001f5c <HAL_UART_RxCpltCallback+0x350>)
 8001f06:	480f      	ldr	r0, [pc, #60]	@ (8001f44 <HAL_UART_RxCpltCallback+0x338>)
 8001f08:	f7ff fca5 	bl	8001856 <lcd_puts>
              break;
 8001f0c:	e000      	b.n	8001f10 <HAL_UART_RxCpltCallback+0x304>
          switch(menuPosition) {
 8001f0e:	bf00      	nop
        break;
 8001f10:	e1bf      	b.n	8002292 <HAL_UART_RxCpltCallback+0x686>
        
      case 'C':
        currentMode = MODE_SENSOR;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_UART_RxCpltCallback+0x324>)
 8001f14:	2202      	movs	r2, #2
 8001f16:	701a      	strb	r2, [r3, #0]
        is_entering_password = false;
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <HAL_UART_RxCpltCallback+0x32c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
        break;
 8001f1e:	e1bf      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
 8001f20:	40011400 	.word	0x40011400
 8001f24:	200002a0 	.word	0x200002a0
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	20000298 	.word	0x20000298
 8001f34:	20000299 	.word	0x20000299
 8001f38:	200002ac 	.word	0x200002ac
 8001f3c:	55555556 	.word	0x55555556
 8001f40:	2000029a 	.word	0x2000029a
 8001f44:	20000290 	.word	0x20000290
 8001f48:	0800a244 	.word	0x0800a244
 8001f4c:	0800a258 	.word	0x0800a258
 8001f50:	0800a26c 	.word	0x0800a26c
 8001f54:	0800a280 	.word	0x0800a280
 8001f58:	0800a294 	.word	0x0800a294
 8001f5c:	0800a2a8 	.word	0x0800a2a8
        
      case 'S':
        currentMode = MODE_SETUP;
 8001f60:	4ba8      	ldr	r3, [pc, #672]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 8001f62:	2203      	movs	r2, #3
 8001f64:	701a      	strb	r2, [r3, #0]
        setupMenuPosition = 0;
 8001f66:	4ba8      	ldr	r3, [pc, #672]	@ (8002208 <HAL_UART_RxCpltCallback+0x5fc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
        is_entering_password = false;
 8001f6c:	4ba7      	ldr	r3, [pc, #668]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
        Display_Setup(setupMenuPosition);
 8001f72:	4ba5      	ldr	r3, [pc, #660]	@ (8002208 <HAL_UART_RxCpltCallback+0x5fc>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f9d0 	bl	800231c <Display_Setup>
        break;
 8001f7c:	e190      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'I':
        currentMode = MODE_INTRO;
 8001f7e:	4ba1      	ldr	r3, [pc, #644]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
        is_entering_password = false;
 8001f84:	4ba1      	ldr	r3, [pc, #644]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
        Display_Intro();
 8001f8a:	f7ff fc7b 	bl	8001884 <Display_Intro>
        break;
 8001f8e:	e187      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'W':
        currentMode = MODE_VERIFY_SETUP;
 8001f90:	4b9c      	ldr	r3, [pc, #624]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 8001f92:	2204      	movs	r2, #4
 8001f94:	701a      	strb	r2, [r3, #0]
        is_entering_password = true;
 8001f96:	4b9d      	ldr	r3, [pc, #628]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
        password_length = 0;
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
        memset(password_display, 0, sizeof(password_display));
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	489b      	ldr	r0, [pc, #620]	@ (8002214 <HAL_UART_RxCpltCallback+0x608>)
 8001fa8:	f006 f87f 	bl	80080aa <memset>
        Display_Setup_Verify();
 8001fac:	f7ff fdde 	bl	8001b6c <Display_Setup_Verify>
        break;
 8001fb0:	e176      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'P':
        is_entering_password = true;
 8001fb2:	4b96      	ldr	r3, [pc, #600]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
        password_length = 0;
 8001fb8:	4b95      	ldr	r3, [pc, #596]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
        memset(password_display, 0, sizeof(password_display));
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4894      	ldr	r0, [pc, #592]	@ (8002214 <HAL_UART_RxCpltCallback+0x608>)
 8001fc4:	f006 f871 	bl	80080aa <memset>
        Display_Password_Entry();
 8001fc8:	f7ff fd80 	bl	8001acc <Display_Password_Entry>
        break;
 8001fcc:	e168      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'N':
        is_entering_password = true;
 8001fce:	4b8f      	ldr	r3, [pc, #572]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
        password_length = 0;
 8001fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
        memset(password_display, 0, sizeof(password_display));
 8001fda:	2207      	movs	r2, #7
 8001fdc:	2100      	movs	r1, #0
 8001fde:	488d      	ldr	r0, [pc, #564]	@ (8002214 <HAL_UART_RxCpltCallback+0x608>)
 8001fe0:	f006 f863 	bl	80080aa <memset>
        Display_Setup_Password();
 8001fe4:	f000 f9ec 	bl	80023c0 <Display_Setup_Password>
        break;
 8001fe8:	e15a      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'R':
        is_entering_password = false;
 8001fea:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
        lcd_clear(&lcd1);
 8001ff0:	4889      	ldr	r0, [pc, #548]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8001ff2:	f7ff fb9d 	bl	8001730 <lcd_clear>
        lcd_gotoxy(&lcd1, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4887      	ldr	r0, [pc, #540]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8001ffc:	f7ff fbb2 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "XAC THUC RFID");
 8002000:	4986      	ldr	r1, [pc, #536]	@ (800221c <HAL_UART_RxCpltCallback+0x610>)
 8002002:	4885      	ldr	r0, [pc, #532]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002004:	f7ff fc27 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 1);
 8002008:	2201      	movs	r2, #1
 800200a:	2100      	movs	r1, #0
 800200c:	4882      	ldr	r0, [pc, #520]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 800200e:	f7ff fba9 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "VUI LONG QUET THE...");
 8002012:	4983      	ldr	r1, [pc, #524]	@ (8002220 <HAL_UART_RxCpltCallback+0x614>)
 8002014:	4880      	ldr	r0, [pc, #512]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002016:	f7ff fc1e 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 3);
 800201a:	2203      	movs	r2, #3
 800201c:	2100      	movs	r1, #0
 800201e:	487e      	ldr	r0, [pc, #504]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002020:	f7ff fba0 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "* DE HUY");
 8002024:	497f      	ldr	r1, [pc, #508]	@ (8002224 <HAL_UART_RxCpltCallback+0x618>)
 8002026:	487c      	ldr	r0, [pc, #496]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002028:	f7ff fc15 	bl	8001856 <lcd_puts>
        break;
 800202c:	e138      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'T':
        is_entering_password = false;
 800202e:	4b77      	ldr	r3, [pc, #476]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
        Display_Setup_RFID();
 8002034:	f000 fa4a 	bl	80024cc <Display_Setup_RFID>
        break;
 8002038:	e132      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'V':
        is_entering_password = false;
 800203a:	4b74      	ldr	r3, [pc, #464]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
        lcd_clear(&lcd1);
 8002040:	4875      	ldr	r0, [pc, #468]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002042:	f7ff fb75 	bl	8001730 <lcd_clear>
        lcd_gotoxy(&lcd1, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	4873      	ldr	r0, [pc, #460]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 800204c:	f7ff fb8a 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "XAC THUC VAN TAY");
 8002050:	4975      	ldr	r1, [pc, #468]	@ (8002228 <HAL_UART_RxCpltCallback+0x61c>)
 8002052:	4871      	ldr	r0, [pc, #452]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002054:	f7ff fbff 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 1);
 8002058:	2201      	movs	r2, #1
 800205a:	2100      	movs	r1, #0
 800205c:	486e      	ldr	r0, [pc, #440]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 800205e:	f7ff fb81 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "DAT NGON TAY...");
 8002062:	4972      	ldr	r1, [pc, #456]	@ (800222c <HAL_UART_RxCpltCallback+0x620>)
 8002064:	486c      	ldr	r0, [pc, #432]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002066:	f7ff fbf6 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 3);
 800206a:	2203      	movs	r2, #3
 800206c:	2100      	movs	r1, #0
 800206e:	486a      	ldr	r0, [pc, #424]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002070:	f7ff fb78 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "* DE HUY");
 8002074:	496b      	ldr	r1, [pc, #428]	@ (8002224 <HAL_UART_RxCpltCallback+0x618>)
 8002076:	4868      	ldr	r0, [pc, #416]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002078:	f7ff fbed 	bl	8001856 <lcd_puts>
        break;
 800207c:	e110      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'G':
        is_entering_password = false;
 800207e:	4b63      	ldr	r3, [pc, #396]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
        Display_Setup_Fingerprint();
 8002084:	f000 f9ec 	bl	8002460 <Display_Setup_Fingerprint>
        break;
 8002088:	e10a      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9':
        if (is_entering_password && password_length < 6) {
 800208a:	4b60      	ldr	r3, [pc, #384]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8101 	beq.w	8002296 <HAL_UART_RxCpltCallback+0x68a>
 8002094:	4b5e      	ldr	r3, [pc, #376]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b05      	cmp	r3, #5
 800209a:	f200 80fc 	bhi.w	8002296 <HAL_UART_RxCpltCallback+0x68a>
          password_display[password_length] = rx_char;
 800209e:	4b5c      	ldr	r3, [pc, #368]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b62      	ldr	r3, [pc, #392]	@ (8002230 <HAL_UART_RxCpltCallback+0x624>)
 80020a6:	7819      	ldrb	r1, [r3, #0]
 80020a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002214 <HAL_UART_RxCpltCallback+0x608>)
 80020aa:	5499      	strb	r1, [r3, r2]
          password_length++;
 80020ac:	4b58      	ldr	r3, [pc, #352]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b56      	ldr	r3, [pc, #344]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020b6:	701a      	strb	r2, [r3, #0]
          if (currentMode == MODE_SETUP) {
 80020b8:	4b52      	ldr	r3, [pc, #328]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d102      	bne.n	80020c6 <HAL_UART_RxCpltCallback+0x4ba>
            Display_Setup_Password();
 80020c0:	f000 f97e 	bl	80023c0 <Display_Setup_Password>
            Display_Setup_Verify();
          } else {
            Display_Password_Entry();
          }
        }
        break;
 80020c4:	e0e7      	b.n	8002296 <HAL_UART_RxCpltCallback+0x68a>
          } else if (currentMode == MODE_VERIFY_SETUP) {
 80020c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d102      	bne.n	80020d4 <HAL_UART_RxCpltCallback+0x4c8>
            Display_Setup_Verify();
 80020ce:	f7ff fd4d 	bl	8001b6c <Display_Setup_Verify>
        break;
 80020d2:	e0e0      	b.n	8002296 <HAL_UART_RxCpltCallback+0x68a>
            Display_Password_Entry();
 80020d4:	f7ff fcfa 	bl	8001acc <Display_Password_Entry>
        break;
 80020d8:	e0dd      	b.n	8002296 <HAL_UART_RxCpltCallback+0x68a>
        
      case 'X':
        if (is_entering_password && password_length > 0) {
 80020da:	4b4c      	ldr	r3, [pc, #304]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80db 	beq.w	800229a <HAL_UART_RxCpltCallback+0x68e>
 80020e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80d6 	beq.w	800229a <HAL_UART_RxCpltCallback+0x68e>
          password_length--;
 80020ee:	4b48      	ldr	r3, [pc, #288]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b46      	ldr	r3, [pc, #280]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020f8:	701a      	strb	r2, [r3, #0]
          password_display[password_length] = '\0';
 80020fa:	4b45      	ldr	r3, [pc, #276]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HAL_UART_RxCpltCallback+0x608>)
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]
          if (currentMode == MODE_SETUP) {
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d102      	bne.n	8002114 <HAL_UART_RxCpltCallback+0x508>
            Display_Setup_Password();
 800210e:	f000 f957 	bl	80023c0 <Display_Setup_Password>
            Display_Setup_Verify();
          } else {
            Display_Password_Entry();
          }
        }
        break;
 8002112:	e0c2      	b.n	800229a <HAL_UART_RxCpltCallback+0x68e>
          } else if (currentMode == MODE_VERIFY_SETUP) {
 8002114:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d102      	bne.n	8002122 <HAL_UART_RxCpltCallback+0x516>
            Display_Setup_Verify();
 800211c:	f7ff fd26 	bl	8001b6c <Display_Setup_Verify>
        break;
 8002120:	e0bb      	b.n	800229a <HAL_UART_RxCpltCallback+0x68e>
            Display_Password_Entry();
 8002122:	f7ff fcd3 	bl	8001acc <Display_Password_Entry>
        break;
 8002126:	e0b8      	b.n	800229a <HAL_UART_RxCpltCallback+0x68e>
        
      case 'O':
        status_open = true;
 8002128:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <HAL_UART_RxCpltCallback+0x628>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
        is_entering_password = false;
 800212e:	4b37      	ldr	r3, [pc, #220]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
        lcd_clear(&lcd1);
 8002134:	4838      	ldr	r0, [pc, #224]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002136:	f7ff fafb 	bl	8001730 <lcd_clear>
        lcd_gotoxy(&lcd1, 0, 1);
 800213a:	2201      	movs	r2, #1
 800213c:	2100      	movs	r1, #0
 800213e:	4836      	ldr	r0, [pc, #216]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002140:	f7ff fb10 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "XAC THUC THANH CONG");
 8002144:	493c      	ldr	r1, [pc, #240]	@ (8002238 <HAL_UART_RxCpltCallback+0x62c>)
 8002146:	4834      	ldr	r0, [pc, #208]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002148:	f7ff fb85 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 2);
 800214c:	2202      	movs	r2, #2
 800214e:	2100      	movs	r1, #0
 8002150:	4831      	ldr	r0, [pc, #196]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002152:	f7ff fb07 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "DANG MO CUA...");
 8002156:	4939      	ldr	r1, [pc, #228]	@ (800223c <HAL_UART_RxCpltCallback+0x630>)
 8002158:	482f      	ldr	r0, [pc, #188]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 800215a:	f7ff fb7c 	bl	8001856 <lcd_puts>
        break;
 800215e:	e09f      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'Y':
        is_entering_password = false;
 8002160:	4b2a      	ldr	r3, [pc, #168]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
        Display_Success("CAI DAT THANH CONG");
 8002166:	4836      	ldr	r0, [pc, #216]	@ (8002240 <HAL_UART_RxCpltCallback+0x634>)
 8002168:	f000 f9da 	bl	8002520 <Display_Success>
        break;
 800216c:	e098      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'F':
        if (is_entering_password) {
 800216e:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8093 	beq.w	800229e <HAL_UART_RxCpltCallback+0x692>
          if (currentMode == MODE_VERIFY_SETUP) {
 8002178:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <HAL_UART_RxCpltCallback+0x5f8>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d106      	bne.n	800218e <HAL_UART_RxCpltCallback+0x582>
            is_entering_password = false;
 8002180:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
            Display_Error("SAI MAT KHAU!");
 8002186:	482f      	ldr	r0, [pc, #188]	@ (8002244 <HAL_UART_RxCpltCallback+0x638>)
 8002188:	f000 f9ec 	bl	8002564 <Display_Error>
            lcd_puts(&lcd1, "THU LAI...        ");
            password_length = 0;
            memset(password_display, 0, sizeof(password_display));
          }
        }
        break;
 800218c:	e087      	b.n	800229e <HAL_UART_RxCpltCallback+0x692>
            lcd_gotoxy(&lcd1, 0, 2);
 800218e:	2202      	movs	r2, #2
 8002190:	2100      	movs	r1, #0
 8002192:	4821      	ldr	r0, [pc, #132]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 8002194:	f7ff fae6 	bl	8001764 <lcd_gotoxy>
            lcd_puts(&lcd1, "SAI MAT KHAU!     ");
 8002198:	492b      	ldr	r1, [pc, #172]	@ (8002248 <HAL_UART_RxCpltCallback+0x63c>)
 800219a:	481f      	ldr	r0, [pc, #124]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 800219c:	f7ff fb5b 	bl	8001856 <lcd_puts>
            lcd_gotoxy(&lcd1, 0, 3);
 80021a0:	2203      	movs	r2, #3
 80021a2:	2100      	movs	r1, #0
 80021a4:	481c      	ldr	r0, [pc, #112]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021a6:	f7ff fadd 	bl	8001764 <lcd_gotoxy>
            lcd_puts(&lcd1, "THU LAI...        ");
 80021aa:	4928      	ldr	r1, [pc, #160]	@ (800224c <HAL_UART_RxCpltCallback+0x640>)
 80021ac:	481a      	ldr	r0, [pc, #104]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021ae:	f7ff fb52 	bl	8001856 <lcd_puts>
            password_length = 0;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_UART_RxCpltCallback+0x604>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
            memset(password_display, 0, sizeof(password_display));
 80021b8:	2207      	movs	r2, #7
 80021ba:	2100      	movs	r1, #0
 80021bc:	4815      	ldr	r0, [pc, #84]	@ (8002214 <HAL_UART_RxCpltCallback+0x608>)
 80021be:	f005 ff74 	bl	80080aa <memset>
        break;
 80021c2:	e06c      	b.n	800229e <HAL_UART_RxCpltCallback+0x692>
        
      case 'E':
        is_entering_password = false;
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
        Display_Error("CAI DAT THAT BAI");
 80021ca:	4821      	ldr	r0, [pc, #132]	@ (8002250 <HAL_UART_RxCpltCallback+0x644>)
 80021cc:	f000 f9ca 	bl	8002564 <Display_Error>
        break;
 80021d0:	e066      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        
      case 'U':
        is_entering_password = false;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_UART_RxCpltCallback+0x600>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
        lcd_clear(&lcd1);
 80021d8:	480f      	ldr	r0, [pc, #60]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021da:	f7ff faa9 	bl	8001730 <lcd_clear>
        lcd_gotoxy(&lcd1, 0, 1);
 80021de:	2201      	movs	r2, #1
 80021e0:	2100      	movs	r1, #0
 80021e2:	480d      	ldr	r0, [pc, #52]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021e4:	f7ff fabe 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "XAC THUC THAT BAI!");
 80021e8:	491a      	ldr	r1, [pc, #104]	@ (8002254 <HAL_UART_RxCpltCallback+0x648>)
 80021ea:	480b      	ldr	r0, [pc, #44]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021ec:	f7ff fb33 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 2);
 80021f0:	2202      	movs	r2, #2
 80021f2:	2100      	movs	r1, #0
 80021f4:	4808      	ldr	r0, [pc, #32]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021f6:	f7ff fab5 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "THE KHONG HOP LE");
 80021fa:	4917      	ldr	r1, [pc, #92]	@ (8002258 <HAL_UART_RxCpltCallback+0x64c>)
 80021fc:	4806      	ldr	r0, [pc, #24]	@ (8002218 <HAL_UART_RxCpltCallback+0x60c>)
 80021fe:	f7ff fb2a 	bl	8001856 <lcd_puts>
        break;
 8002202:	e04d      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
 8002204:	20000298 	.word	0x20000298
 8002208:	2000029a 	.word	0x2000029a
 800220c:	200002ac 	.word	0x200002ac
 8002210:	200002ab 	.word	0x200002ab
 8002214:	200002a4 	.word	0x200002a4
 8002218:	20000290 	.word	0x20000290
 800221c:	0800a2b8 	.word	0x0800a2b8
 8002220:	0800a2c8 	.word	0x0800a2c8
 8002224:	0800a2e0 	.word	0x0800a2e0
 8002228:	0800a2ec 	.word	0x0800a2ec
 800222c:	0800a300 	.word	0x0800a300
 8002230:	200002a0 	.word	0x200002a0
 8002234:	200002ad 	.word	0x200002ad
 8002238:	0800a310 	.word	0x0800a310
 800223c:	0800a324 	.word	0x0800a324
 8002240:	0800a334 	.word	0x0800a334
 8002244:	0800a348 	.word	0x0800a348
 8002248:	0800a358 	.word	0x0800a358
 800224c:	0800a36c 	.word	0x0800a36c
 8002250:	0800a380 	.word	0x0800a380
 8002254:	0800a394 	.word	0x0800a394
 8002258:	0800a3a8 	.word	0x0800a3a8
        
      case 'Z':
        is_entering_password = false;
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_UART_RxCpltCallback+0x6a8>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
        lcd_clear(&lcd1);
 8002262:	4815      	ldr	r0, [pc, #84]	@ (80022b8 <HAL_UART_RxCpltCallback+0x6ac>)
 8002264:	f7ff fa64 	bl	8001730 <lcd_clear>
        lcd_gotoxy(&lcd1, 0, 1);
 8002268:	2201      	movs	r2, #1
 800226a:	2100      	movs	r1, #0
 800226c:	4812      	ldr	r0, [pc, #72]	@ (80022b8 <HAL_UART_RxCpltCallback+0x6ac>)
 800226e:	f7ff fa79 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "SAI VAN TAY!");
 8002272:	4912      	ldr	r1, [pc, #72]	@ (80022bc <HAL_UART_RxCpltCallback+0x6b0>)
 8002274:	4810      	ldr	r0, [pc, #64]	@ (80022b8 <HAL_UART_RxCpltCallback+0x6ac>)
 8002276:	f7ff faee 	bl	8001856 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 2);
 800227a:	2202      	movs	r2, #2
 800227c:	2100      	movs	r1, #0
 800227e:	480e      	ldr	r0, [pc, #56]	@ (80022b8 <HAL_UART_RxCpltCallback+0x6ac>)
 8002280:	f7ff fa70 	bl	8001764 <lcd_gotoxy>
        lcd_puts(&lcd1, "THU LAI...");
 8002284:	490e      	ldr	r1, [pc, #56]	@ (80022c0 <HAL_UART_RxCpltCallback+0x6b4>)
 8002286:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <HAL_UART_RxCpltCallback+0x6ac>)
 8002288:	f7ff fae5 	bl	8001856 <lcd_puts>
        break;
 800228c:	e008      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        break;
 800228e:	bf00      	nop
 8002290:	e006      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        break;
 8002292:	bf00      	nop
 8002294:	e004      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        break;
 8002296:	bf00      	nop
 8002298:	e002      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        break;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <HAL_UART_RxCpltCallback+0x694>
        break;
 800229e:	bf00      	nop
    }
    
    HAL_UART_Receive_IT(&huart6, &rx_char, 1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	4908      	ldr	r1, [pc, #32]	@ (80022c4 <HAL_UART_RxCpltCallback+0x6b8>)
 80022a4:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <HAL_UART_RxCpltCallback+0x6bc>)
 80022a6:	f004 f93e 	bl	8006526 <HAL_UART_Receive_IT>
  }
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200002ac 	.word	0x200002ac
 80022b8:	20000290 	.word	0x20000290
 80022bc:	0800a3bc 	.word	0x0800a3bc
 80022c0:	0800a3cc 	.word	0x0800a3cc
 80022c4:	200002a0 	.word	0x200002a0
 80022c8:	20000344 	.word	0x20000344

080022cc <Servo_SetAngle>:

void Servo_SetAngle(uint8_t angle) {
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
    if (angle > 180) angle = 180;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2bb4      	cmp	r3, #180	@ 0xb4
 80022da:	d901      	bls.n	80022e0 <Servo_SetAngle+0x14>
 80022dc:	23b4      	movs	r3, #180	@ 0xb4
 80022de:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse = 500 + (angle * 2000) / 180;
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <Servo_SetAngle+0x48>)
 80022ec:	fb82 1203 	smull	r1, r2, r2, r3
 80022f0:	441a      	add	r2, r3
 80022f2:	11d2      	asrs	r2, r2, #7
 80022f4:	17db      	asrs	r3, r3, #31
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80022fe:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse);
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <Servo_SetAngle+0x4c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	89fa      	ldrh	r2, [r7, #14]
 8002306:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	b60b60b7 	.word	0xb60b60b7
 8002318:	200002b4 	.word	0x200002b4

0800231c <Display_Setup>:

void Display_Setup(uint8_t position) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  lcd_clear(&lcd1);
 8002326:	481e      	ldr	r0, [pc, #120]	@ (80023a0 <Display_Setup+0x84>)
 8002328:	f7ff fa02 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	481b      	ldr	r0, [pc, #108]	@ (80023a0 <Display_Setup+0x84>)
 8002332:	f7ff fa17 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "CHE DO CAI DAT");
 8002336:	491b      	ldr	r1, [pc, #108]	@ (80023a4 <Display_Setup+0x88>)
 8002338:	4819      	ldr	r0, [pc, #100]	@ (80023a0 <Display_Setup+0x84>)
 800233a:	f7ff fa8c 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 1);
 800233e:	2201      	movs	r2, #1
 8002340:	2100      	movs	r1, #0
 8002342:	4817      	ldr	r0, [pc, #92]	@ (80023a0 <Display_Setup+0x84>)
 8002344:	f7ff fa0e 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, position == 0 ? "> MAT KHAU MOI" : "  MAT KHAU MOI");
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <Display_Setup+0x36>
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <Display_Setup+0x8c>)
 8002350:	e000      	b.n	8002354 <Display_Setup+0x38>
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <Display_Setup+0x90>)
 8002354:	4619      	mov	r1, r3
 8002356:	4812      	ldr	r0, [pc, #72]	@ (80023a0 <Display_Setup+0x84>)
 8002358:	f7ff fa7d 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 2);
 800235c:	2202      	movs	r2, #2
 800235e:	2100      	movs	r1, #0
 8002360:	480f      	ldr	r0, [pc, #60]	@ (80023a0 <Display_Setup+0x84>)
 8002362:	f7ff f9ff 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, position == 1 ? "> VAN TAY MOI" : "  VAN TAY MOI");
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <Display_Setup+0x54>
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <Display_Setup+0x94>)
 800236e:	e000      	b.n	8002372 <Display_Setup+0x56>
 8002370:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <Display_Setup+0x98>)
 8002372:	4619      	mov	r1, r3
 8002374:	480a      	ldr	r0, [pc, #40]	@ (80023a0 <Display_Setup+0x84>)
 8002376:	f7ff fa6e 	bl	8001856 <lcd_puts>

  lcd_gotoxy(&lcd1, 0, 3);
 800237a:	2203      	movs	r2, #3
 800237c:	2100      	movs	r1, #0
 800237e:	4808      	ldr	r0, [pc, #32]	@ (80023a0 <Display_Setup+0x84>)
 8002380:	f7ff f9f0 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, position == 2 ? "> THE RFID MOI" : "  THE RFID MOI");
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d101      	bne.n	800238e <Display_Setup+0x72>
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <Display_Setup+0x9c>)
 800238c:	e000      	b.n	8002390 <Display_Setup+0x74>
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <Display_Setup+0xa0>)
 8002390:	4619      	mov	r1, r3
 8002392:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <Display_Setup+0x84>)
 8002394:	f7ff fa5f 	bl	8001856 <lcd_puts>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000290 	.word	0x20000290
 80023a4:	0800a3d8 	.word	0x0800a3d8
 80023a8:	0800a3e8 	.word	0x0800a3e8
 80023ac:	0800a3f8 	.word	0x0800a3f8
 80023b0:	0800a408 	.word	0x0800a408
 80023b4:	0800a418 	.word	0x0800a418
 80023b8:	0800a428 	.word	0x0800a428
 80023bc:	0800a438 	.word	0x0800a438

080023c0 <Display_Setup_Password>:

void Display_Setup_Password(void) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  lcd_clear(&lcd1);
 80023c6:	4820      	ldr	r0, [pc, #128]	@ (8002448 <Display_Setup_Password+0x88>)
 80023c8:	f7ff f9b2 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	481d      	ldr	r0, [pc, #116]	@ (8002448 <Display_Setup_Password+0x88>)
 80023d2:	f7ff f9c7 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "DAT MAT KHAU MOI:");
 80023d6:	491d      	ldr	r1, [pc, #116]	@ (800244c <Display_Setup_Password+0x8c>)
 80023d8:	481b      	ldr	r0, [pc, #108]	@ (8002448 <Display_Setup_Password+0x88>)
 80023da:	f7ff fa3c 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 0, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	2100      	movs	r1, #0
 80023e2:	4819      	ldr	r0, [pc, #100]	@ (8002448 <Display_Setup_Password+0x88>)
 80023e4:	f7ff f9be 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "MAT KHAU: ");
 80023e8:	4919      	ldr	r1, [pc, #100]	@ (8002450 <Display_Setup_Password+0x90>)
 80023ea:	4817      	ldr	r0, [pc, #92]	@ (8002448 <Display_Setup_Password+0x88>)
 80023ec:	f7ff fa33 	bl	8001856 <lcd_puts>
  
  lcd_gotoxy(&lcd1, 10, 1);
 80023f0:	2201      	movs	r2, #1
 80023f2:	210a      	movs	r1, #10
 80023f4:	4814      	ldr	r0, [pc, #80]	@ (8002448 <Display_Setup_Password+0x88>)
 80023f6:	f7ff f9b5 	bl	8001764 <lcd_gotoxy>
  for (int i = 0; i < password_length; i++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	e006      	b.n	800240e <Display_Setup_Password+0x4e>
    lcd_send_data(&lcd1, '*');
 8002400:	212a      	movs	r1, #42	@ 0x2a
 8002402:	4811      	ldr	r0, [pc, #68]	@ (8002448 <Display_Setup_Password+0x88>)
 8002404:	f7ff f963 	bl	80016ce <lcd_send_data>
  for (int i = 0; i < password_length; i++) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <Display_Setup_Password+0x94>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4293      	cmp	r3, r2
 8002418:	dbf2      	blt.n	8002400 <Display_Setup_Password+0x40>
  }
  
  lcd_gotoxy(&lcd1, 0, 2);
 800241a:	2202      	movs	r2, #2
 800241c:	2100      	movs	r1, #0
 800241e:	480a      	ldr	r0, [pc, #40]	@ (8002448 <Display_Setup_Password+0x88>)
 8002420:	f7ff f9a0 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "# XAC NHAN");
 8002424:	490c      	ldr	r1, [pc, #48]	@ (8002458 <Display_Setup_Password+0x98>)
 8002426:	4808      	ldr	r0, [pc, #32]	@ (8002448 <Display_Setup_Password+0x88>)
 8002428:	f7ff fa15 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 3);
 800242c:	2203      	movs	r2, #3
 800242e:	2100      	movs	r1, #0
 8002430:	4805      	ldr	r0, [pc, #20]	@ (8002448 <Display_Setup_Password+0x88>)
 8002432:	f7ff f997 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "* XOA/HUY");
 8002436:	4909      	ldr	r1, [pc, #36]	@ (800245c <Display_Setup_Password+0x9c>)
 8002438:	4803      	ldr	r0, [pc, #12]	@ (8002448 <Display_Setup_Password+0x88>)
 800243a:	f7ff fa0c 	bl	8001856 <lcd_puts>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000290 	.word	0x20000290
 800244c:	0800a448 	.word	0x0800a448
 8002450:	0800a20c 	.word	0x0800a20c
 8002454:	200002ab 	.word	0x200002ab
 8002458:	0800a218 	.word	0x0800a218
 800245c:	0800a224 	.word	0x0800a224

08002460 <Display_Setup_Fingerprint>:

void Display_Setup_Fingerprint(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  lcd_clear(&lcd1);
 8002464:	4814      	ldr	r0, [pc, #80]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 8002466:	f7ff f963 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	4812      	ldr	r0, [pc, #72]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 8002470:	f7ff f978 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "DANG KY VAN TAY");
 8002474:	4911      	ldr	r1, [pc, #68]	@ (80024bc <Display_Setup_Fingerprint+0x5c>)
 8002476:	4810      	ldr	r0, [pc, #64]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 8002478:	f7ff f9ed 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 1);
 800247c:	2201      	movs	r2, #1
 800247e:	2100      	movs	r1, #0
 8002480:	480d      	ldr	r0, [pc, #52]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 8002482:	f7ff f96f 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "DAT NGON TAY...");
 8002486:	490e      	ldr	r1, [pc, #56]	@ (80024c0 <Display_Setup_Fingerprint+0x60>)
 8002488:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 800248a:	f7ff f9e4 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 2);
 800248e:	2202      	movs	r2, #2
 8002490:	2100      	movs	r1, #0
 8002492:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 8002494:	f7ff f966 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "# DE BAT DAU");
 8002498:	490a      	ldr	r1, [pc, #40]	@ (80024c4 <Display_Setup_Fingerprint+0x64>)
 800249a:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 800249c:	f7ff f9db 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 3);
 80024a0:	2203      	movs	r2, #3
 80024a2:	2100      	movs	r1, #0
 80024a4:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 80024a6:	f7ff f95d 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "* DE HUY");
 80024aa:	4907      	ldr	r1, [pc, #28]	@ (80024c8 <Display_Setup_Fingerprint+0x68>)
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <Display_Setup_Fingerprint+0x58>)
 80024ae:	f7ff f9d2 	bl	8001856 <lcd_puts>
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000290 	.word	0x20000290
 80024bc:	0800a45c 	.word	0x0800a45c
 80024c0:	0800a300 	.word	0x0800a300
 80024c4:	0800a46c 	.word	0x0800a46c
 80024c8:	0800a2e0 	.word	0x0800a2e0

080024cc <Display_Setup_RFID>:

void Display_Setup_RFID(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  lcd_clear(&lcd1);
 80024d0:	480f      	ldr	r0, [pc, #60]	@ (8002510 <Display_Setup_RFID+0x44>)
 80024d2:	f7ff f92d 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	480d      	ldr	r0, [pc, #52]	@ (8002510 <Display_Setup_RFID+0x44>)
 80024dc:	f7ff f942 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "DANG KY THE RFID");
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <Display_Setup_RFID+0x48>)
 80024e2:	480b      	ldr	r0, [pc, #44]	@ (8002510 <Display_Setup_RFID+0x44>)
 80024e4:	f7ff f9b7 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 1);
 80024e8:	2201      	movs	r2, #1
 80024ea:	2100      	movs	r1, #0
 80024ec:	4808      	ldr	r0, [pc, #32]	@ (8002510 <Display_Setup_RFID+0x44>)
 80024ee:	f7ff f939 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "VUI LONG QUET THE...");
 80024f2:	4909      	ldr	r1, [pc, #36]	@ (8002518 <Display_Setup_RFID+0x4c>)
 80024f4:	4806      	ldr	r0, [pc, #24]	@ (8002510 <Display_Setup_RFID+0x44>)
 80024f6:	f7ff f9ae 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 3);
 80024fa:	2203      	movs	r2, #3
 80024fc:	2100      	movs	r1, #0
 80024fe:	4804      	ldr	r0, [pc, #16]	@ (8002510 <Display_Setup_RFID+0x44>)
 8002500:	f7ff f930 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "* DE HUY");
 8002504:	4905      	ldr	r1, [pc, #20]	@ (800251c <Display_Setup_RFID+0x50>)
 8002506:	4802      	ldr	r0, [pc, #8]	@ (8002510 <Display_Setup_RFID+0x44>)
 8002508:	f7ff f9a5 	bl	8001856 <lcd_puts>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000290 	.word	0x20000290
 8002514:	0800a47c 	.word	0x0800a47c
 8002518:	0800a2c8 	.word	0x0800a2c8
 800251c:	0800a2e0 	.word	0x0800a2e0

08002520 <Display_Success>:

void Display_Success(char* message) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  lcd_clear(&lcd1);
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <Display_Success+0x3c>)
 800252a:	f7ff f901 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 1);
 800252e:	2201      	movs	r2, #1
 8002530:	2100      	movs	r1, #0
 8002532:	480a      	ldr	r0, [pc, #40]	@ (800255c <Display_Success+0x3c>)
 8002534:	f7ff f916 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "THANH CONG!");
 8002538:	4909      	ldr	r1, [pc, #36]	@ (8002560 <Display_Success+0x40>)
 800253a:	4808      	ldr	r0, [pc, #32]	@ (800255c <Display_Success+0x3c>)
 800253c:	f7ff f98b 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 2);
 8002540:	2202      	movs	r2, #2
 8002542:	2100      	movs	r1, #0
 8002544:	4805      	ldr	r0, [pc, #20]	@ (800255c <Display_Success+0x3c>)
 8002546:	f7ff f90d 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, message);
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4803      	ldr	r0, [pc, #12]	@ (800255c <Display_Success+0x3c>)
 800254e:	f7ff f982 	bl	8001856 <lcd_puts>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000290 	.word	0x20000290
 8002560:	0800a490 	.word	0x0800a490

08002564 <Display_Error>:

void Display_Error(char* message) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  lcd_clear(&lcd1);
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <Display_Error+0x3c>)
 800256e:	f7ff f8df 	bl	8001730 <lcd_clear>
  lcd_gotoxy(&lcd1, 0, 1);
 8002572:	2201      	movs	r2, #1
 8002574:	2100      	movs	r1, #0
 8002576:	480a      	ldr	r0, [pc, #40]	@ (80025a0 <Display_Error+0x3c>)
 8002578:	f7ff f8f4 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, "LOI!");
 800257c:	4909      	ldr	r1, [pc, #36]	@ (80025a4 <Display_Error+0x40>)
 800257e:	4808      	ldr	r0, [pc, #32]	@ (80025a0 <Display_Error+0x3c>)
 8002580:	f7ff f969 	bl	8001856 <lcd_puts>
  lcd_gotoxy(&lcd1, 0, 2);
 8002584:	2202      	movs	r2, #2
 8002586:	2100      	movs	r1, #0
 8002588:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <Display_Error+0x3c>)
 800258a:	f7ff f8eb 	bl	8001764 <lcd_gotoxy>
  lcd_puts(&lcd1, message);
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <Display_Error+0x3c>)
 8002592:	f7ff f960 	bl	8001856 <lcd_puts>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000290 	.word	0x20000290
 80025a4:	0800a49c 	.word	0x0800a49c

080025a8 <Send_Sensor_Data_To_ESP32>:

void Send_Sensor_Data_To_ESP32(float temp, float humidity, uint32_t gas, uint32_t light) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0a2      	sub	sp, #136	@ 0x88
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80025b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  char buffer[100];
  snprintf(buffer, sizeof(buffer), "SENSOR:%d,%d,%lu,%lu\n", (int)temp, (int)humidity, gas, light);
 80025ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80025be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80025c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 2a90 	vmov	r2, s15
 80025ce:	f107 0014 	add.w	r0, r7, #20
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	9200      	str	r2, [sp, #0]
 80025dc:	ee17 3a10 	vmov	r3, s14
 80025e0:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <Send_Sensor_Data_To_ESP32+0x64>)
 80025e2:	2164      	movs	r1, #100	@ 0x64
 80025e4:	f005 fcea 	bl	8007fbc <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd fe3f 	bl	8000270 <strlen>
 80025f2:	4603      	mov	r3, r0
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	f107 0114 	add.w	r1, r7, #20
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	4804      	ldr	r0, [pc, #16]	@ (8002610 <Send_Sensor_Data_To_ESP32+0x68>)
 8002600:	f003 ff06 	bl	8006410 <HAL_UART_Transmit>
}
 8002604:	bf00      	nop
 8002606:	3778      	adds	r7, #120	@ 0x78
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	0800a4a4 	.word	0x0800a4a4
 8002610:	20000344 	.word	0x20000344

08002614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	b09f      	sub	sp, #124	@ 0x7c
 8002618:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800261a:	f000 fc7f 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261e:	f000 f921 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002622:	f7fe ff15 	bl	8001450 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002626:	f7fe ffab 	bl	8001580 <MX_I2C1_Init>
  MX_TIM6_Init();
 800262a:	f000 fb1f 	bl	8002c6c <MX_TIM6_Init>
  MX_ADC1_Init();
 800262e:	f7fe fe79 	bl	8001324 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002632:	f000 fac1 	bl	8002bb8 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002636:	f000 fbcd 	bl	8002dd4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  BH1750_init_i2c(&hi2c1);
 800263a:	487c      	ldr	r0, [pc, #496]	@ (800282c <main+0x218>)
 800263c:	f7fe fc4c 	bl	8000ed8 <BH1750_init_i2c>
  BH1750_device_t *test_dev = BH1750_init_dev_struct(&hi2c1, "test device", true);
 8002640:	2201      	movs	r2, #1
 8002642:	497b      	ldr	r1, [pc, #492]	@ (8002830 <main+0x21c>)
 8002644:	4879      	ldr	r0, [pc, #484]	@ (800282c <main+0x218>)
 8002646:	f7fe fc51 	bl	8000eec <BH1750_init_dev_struct>
 800264a:	6638      	str	r0, [r7, #96]	@ 0x60
  global_test_dev = test_dev;
 800264c:	4a79      	ldr	r2, [pc, #484]	@ (8002834 <main+0x220>)
 800264e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002650:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start(&htim6);
 8002652:	4879      	ldr	r0, [pc, #484]	@ (8002838 <main+0x224>)
 8002654:	f003 f94c 	bl	80058f0 <HAL_TIM_Base_Start>
  DHT22_Init(&htim6);
 8002658:	4877      	ldr	r0, [pc, #476]	@ (8002838 <main+0x224>)
 800265a:	f7fe fddd 	bl	8001218 <DHT22_Init>
  lcd1.hi2c = &hi2c1;
 800265e:	4b77      	ldr	r3, [pc, #476]	@ (800283c <main+0x228>)
 8002660:	4a72      	ldr	r2, [pc, #456]	@ (800282c <main+0x218>)
 8002662:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4e;
 8002664:	4b75      	ldr	r3, [pc, #468]	@ (800283c <main+0x228>)
 8002666:	224e      	movs	r2, #78	@ 0x4e
 8002668:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd1);
 800266a:	4874      	ldr	r0, [pc, #464]	@ (800283c <main+0x228>)
 800266c:	f7ff f8ac 	bl	80017c8 <lcd_init>

  Display_Intro();
 8002670:	f7ff f908 	bl	8001884 <Display_Intro>
  
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002674:	2108      	movs	r1, #8
 8002676:	4872      	ldr	r0, [pc, #456]	@ (8002840 <main+0x22c>)
 8002678:	f003 f9f2 	bl	8005a60 <HAL_TIM_PWM_Start>
  
  HAL_UART_Receive_IT(&huart6, &rx_char, 1);
 800267c:	2201      	movs	r2, #1
 800267e:	4971      	ldr	r1, [pc, #452]	@ (8002844 <main+0x230>)
 8002680:	4871      	ldr	r0, [pc, #452]	@ (8002848 <main+0x234>)
 8002682:	f003 ff50 	bl	8006526 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  
    if (status_open) {
 8002686:	4b71      	ldr	r3, [pc, #452]	@ (800284c <main+0x238>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <main+0xa4>
      Servo_SetAngle(180);
 800268e:	20b4      	movs	r0, #180	@ 0xb4
 8002690:	f7ff fe1c 	bl	80022cc <Servo_SetAngle>
      HAL_Delay(3000); 
 8002694:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002698:	f000 fcb2 	bl	8003000 <HAL_Delay>
      Servo_SetAngle(0);
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff fe15 	bl	80022cc <Servo_SetAngle>
      status_open = false;
 80026a2:	4b6a      	ldr	r3, [pc, #424]	@ (800284c <main+0x238>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
      
      
      currentMode = MODE_INTRO;
 80026a8:	4b69      	ldr	r3, [pc, #420]	@ (8002850 <main+0x23c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
      is_entering_password = false;
 80026ae:	4b69      	ldr	r3, [pc, #420]	@ (8002854 <main+0x240>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
      Display_Intro();
 80026b4:	f7ff f8e6 	bl	8001884 <Display_Intro>
    }
    
 
    if (currentMode == MODE_SENSOR) {
 80026b8:	4b65      	ldr	r3, [pc, #404]	@ (8002850 <main+0x23c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	f040 80b0 	bne.w	8002822 <main+0x20e>
      float temp = 0, hum = 0;
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	657b      	str	r3, [r7, #84]	@ 0x54
      uint8_t retry = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      uint8_t dht_status = DHT22_ERR_RESPONSE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
      
      while (retry < 3 && dht_status != DHT22_OK) {
 80026da:	e017      	b.n	800270c <main+0xf8>
        dht_status = DHT22_Read_Data(&temp, &hum);
 80026dc:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80026e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fda6 	bl	8001238 <DHT22_Read_Data>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        retry++;
 80026f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80026f6:	3301      	adds	r3, #1
 80026f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (dht_status != DHT22_OK) {
 80026fc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <main+0xf8>
          HAL_Delay(500);
 8002704:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002708:	f000 fc7a 	bl	8003000 <HAL_Delay>
      while (retry < 3 && dht_status != DHT22_OK) {
 800270c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002710:	2b02      	cmp	r3, #2
 8002712:	d803      	bhi.n	800271c <main+0x108>
 8002714:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1df      	bne.n	80026dc <main+0xc8>
        }
      }
      
      char debug_buffer[50];
      snprintf(debug_buffer, sizeof(debug_buffer), "DHT22: Status=%d, Temp=%.2f, Hum=%.2f\n", dht_status, temp, hum);
 800271c:	f897 6066 	ldrb.w	r6, [r7, #102]	@ 0x66
 8002720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd ff10 	bl	8000548 <__aeabi_f2d>
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff0a 	bl	8000548 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4638      	mov	r0, r7
 800273a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800273e:	e9cd 4500 	strd	r4, r5, [sp]
 8002742:	4633      	mov	r3, r6
 8002744:	4a44      	ldr	r2, [pc, #272]	@ (8002858 <main+0x244>)
 8002746:	2132      	movs	r1, #50	@ 0x32
 8002748:	f005 fc38 	bl	8007fbc <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 800274c:	463b      	mov	r3, r7
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fd8e 	bl	8000270 <strlen>
 8002754:	4603      	mov	r3, r0
 8002756:	b29a      	uxth	r2, r3
 8002758:	4639      	mov	r1, r7
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	483a      	ldr	r0, [pc, #232]	@ (8002848 <main+0x234>)
 8002760:	f003 fe56 	bl	8006410 <HAL_UART_Transmit>
      
      uint32_t mq2_value = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	65fb      	str	r3, [r7, #92]	@ 0x5c
      HAL_ADC_Start(&hadc1);
 8002768:	483c      	ldr	r0, [pc, #240]	@ (800285c <main+0x248>)
 800276a:	f000 fcb1 	bl	80030d0 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800276e:	f04f 31ff 	mov.w	r1, #4294967295
 8002772:	483a      	ldr	r0, [pc, #232]	@ (800285c <main+0x248>)
 8002774:	f000 fdb1 	bl	80032da <HAL_ADC_PollForConversion>
      mq2_value = HAL_ADC_GetValue(&hadc1);
 8002778:	4838      	ldr	r0, [pc, #224]	@ (800285c <main+0x248>)
 800277a:	f000 fe39 	bl	80033f0 <HAL_ADC_GetValue>
 800277e:	65f8      	str	r0, [r7, #92]	@ 0x5c
      HAL_ADC_Stop(&hadc1);
 8002780:	4836      	ldr	r0, [pc, #216]	@ (800285c <main+0x248>)
 8002782:	f000 fd77 	bl	8003274 <HAL_ADC_Stop>
      
      global_test_dev->poll(global_test_dev);
 8002786:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <main+0x220>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <main+0x220>)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4610      	mov	r0, r2
 8002792:	4798      	blx	r3
      
      Display_Sensors(temp, hum, mq2_value, global_test_dev->lux);
 8002794:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002798:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800279c:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <main+0x220>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027a2:	4619      	mov	r1, r3
 80027a4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80027a6:	eef0 0a47 	vmov.f32	s1, s14
 80027aa:	eeb0 0a67 	vmov.f32	s0, s15
 80027ae:	f7ff f8f1 	bl	8001994 <Display_Sensors>
      
      if (dht_status == DHT22_OK && temp != 0.0 && hum != 0.0) {
 80027b2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11d      	bne.n	80027f6 <main+0x1e2>
 80027ba:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80027be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d016      	beq.n	80027f6 <main+0x1e2>
 80027c8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80027cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	d00f      	beq.n	80027f6 <main+0x1e2>
        Send_Sensor_Data_To_ESP32(temp, hum, mq2_value, global_test_dev->lux);
 80027d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80027da:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <main+0x220>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027e4:	4619      	mov	r1, r3
 80027e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80027e8:	eef0 0a47 	vmov.f32	s1, s14
 80027ec:	eeb0 0a67 	vmov.f32	s0, s15
 80027f0:	f7ff feda 	bl	80025a8 <Send_Sensor_Data_To_ESP32>
 80027f4:	e015      	b.n	8002822 <main+0x20e>
      } else {
        char error_msg[30];
        snprintf(error_msg, sizeof(error_msg), "DHT22_ERROR: Status=%d\n", dht_status);
 80027f6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80027fa:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80027fe:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <main+0x24c>)
 8002800:	211e      	movs	r1, #30
 8002802:	f005 fbdb 	bl	8007fbc <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8002806:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fd30 	bl	8000270 <strlen>
 8002810:	4603      	mov	r3, r0
 8002812:	b29a      	uxth	r2, r3
 8002814:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	480a      	ldr	r0, [pc, #40]	@ (8002848 <main+0x234>)
 800281e:	f003 fdf7 	bl	8006410 <HAL_UART_Transmit>
      }
    }
    
    HAL_Delay(500);
 8002822:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002826:	f000 fbeb 	bl	8003000 <HAL_Delay>
    if (status_open) {
 800282a:	e72c      	b.n	8002686 <main+0x72>
 800282c:	2000023c 	.word	0x2000023c
 8002830:	0800a4bc 	.word	0x0800a4bc
 8002834:	2000029c 	.word	0x2000029c
 8002838:	200002fc 	.word	0x200002fc
 800283c:	20000290 	.word	0x20000290
 8002840:	200002b4 	.word	0x200002b4
 8002844:	200002a0 	.word	0x200002a0
 8002848:	20000344 	.word	0x20000344
 800284c:	200002ad 	.word	0x200002ad
 8002850:	20000298 	.word	0x20000298
 8002854:	200002ac 	.word	0x200002ac
 8002858:	0800a4c8 	.word	0x0800a4c8
 800285c:	200001f4 	.word	0x200001f4
 8002860:	0800a4f0 	.word	0x0800a4f0

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b094      	sub	sp, #80	@ 0x50
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 0320 	add.w	r3, r7, #32
 800286e:	2230      	movs	r2, #48	@ 0x30
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f005 fc19 	bl	80080aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <SystemClock_Config+0xcc>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	4a27      	ldr	r2, [pc, #156]	@ (8002930 <SystemClock_Config+0xcc>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	@ 0x40
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <SystemClock_Config+0xcc>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <SystemClock_Config+0xd0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <SystemClock_Config+0xd0>)
 80028ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <SystemClock_Config+0xd0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ca:	2302      	movs	r3, #2
 80028cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028d4:	2308      	movs	r3, #8
 80028d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80028dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028de:	2302      	movs	r3, #2
 80028e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028e2:	2304      	movs	r3, #4
 80028e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e6:	f107 0320 	add.w	r3, r7, #32
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 fb18 	bl	8004f20 <HAL_RCC_OscConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028f6:	f000 f81f 	bl	8002938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fa:	230f      	movs	r3, #15
 80028fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028fe:	2302      	movs	r3, #2
 8002900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002906:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800290a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800290c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	2105      	movs	r1, #5
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fd79 	bl	8005410 <HAL_RCC_ClockConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002924:	f000 f808 	bl	8002938 <Error_Handler>
  }
}
 8002928:	bf00      	nop
 800292a:	3750      	adds	r7, #80	@ 0x50
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <Error_Handler+0x8>

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_MspInit+0x4c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_MspInit+0x4c>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002958:	6453      	str	r3, [r2, #68]	@ 0x44
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_MspInit+0x4c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_MspInit+0x4c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_MspInit+0x4c>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <NMI_Handler+0x4>

0800299c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <MemManage_Handler+0x4>

080029ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <UsageFault_Handler+0x4>

080029bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ea:	f000 fae9 	bl	8002fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <USART6_IRQHandler+0x10>)
 80029fa:	f003 fdb9 	bl	8006570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000344 	.word	0x20000344

08002a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return 1;
 8002a0c:	2301      	movs	r3, #1
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_kill>:

int _kill(int pid, int sig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a22:	f005 fbb7 	bl	8008194 <__errno>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2216      	movs	r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_exit>:

void _exit (int status)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffe7 	bl	8002a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4a:	bf00      	nop
 8002a4c:	e7fd      	b.n	8002a4a <_exit+0x12>

08002a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e00a      	b.n	8002a76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a60:	f3af 8000 	nop.w
 8002a64:	4601      	mov	r1, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf0      	blt.n	8002a60 <_read+0x12>
  }

  return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e009      	b.n	8002aae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf1      	blt.n	8002a9a <_write+0x12>
  }
  return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_close>:

int _close(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ae8:	605a      	str	r2, [r3, #4]
  return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_isatty>:

int _isatty(int file)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b00:	2301      	movs	r3, #1
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f005 fb1c 	bl	8008194 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20020000 	.word	0x20020000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	200002b0 	.word	0x200002b0
 8002b90:	200004e0 	.word	0x200004e0

08002b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bda:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002bdc:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <MX_TIM3_Init+0xb0>)
 8002bde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002be0:	4b20      	ldr	r3, [pc, #128]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002be2:	2253      	movs	r2, #83	@ 0x53
 8002be4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 ;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002bee:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c00:	4818      	ldr	r0, [pc, #96]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002c02:	f002 fedd 	bl	80059c0 <HAL_TIM_PWM_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c0c:	f7ff fe94 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c18:	f107 0320 	add.w	r3, r7, #32
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4811      	ldr	r0, [pc, #68]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002c20:	f003 fb2a 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002c2a:	f7ff fe85 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2e:	2360      	movs	r3, #96	@ 0x60
 8002c30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002c32:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002c36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	2208      	movs	r2, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	4807      	ldr	r0, [pc, #28]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002c48:	f002 ffd2 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002c52:	f7ff fe71 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c56:	4803      	ldr	r0, [pc, #12]	@ (8002c64 <MX_TIM3_Init+0xac>)
 8002c58:	f000 f882 	bl	8002d60 <HAL_TIM_MspPostInit>

}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	@ 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200002b4 	.word	0x200002b4
 8002c68:	40000400 	.word	0x40000400

08002c6c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c72:	463b      	mov	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002c7c:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <MX_TIM6_Init+0x68>)
 8002c7e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002c82:	2253      	movs	r2, #83	@ 0x53
 8002c84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c9a:	480d      	ldr	r0, [pc, #52]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002c9c:	f002 fdd8 	bl	8005850 <HAL_TIM_Base_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002ca6:	f7ff fe47 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4806      	ldr	r0, [pc, #24]	@ (8002cd0 <MX_TIM6_Init+0x64>)
 8002cb8:	f003 fade 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002cc2:	f7ff fe39 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200002fc 	.word	0x200002fc
 8002cd4:	40001000 	.word	0x40001000

08002cd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10d      	bne.n	8002d06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x40>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x40>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x40>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0b      	ldr	r2, [pc, #44]	@ (8002d58 <HAL_TIM_Base_MspInit+0x3c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_TIM_Base_MspInit+0x40>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <HAL_TIM_Base_MspInit+0x40>)
 8002d38:	f043 0310 	orr.w	r3, r3, #16
 8002d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <HAL_TIM_Base_MspInit+0x40>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40001000 	.word	0x40001000
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	@ (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d11d      	bne.n	8002dbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	4619      	mov	r1, r3
 8002db8:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <HAL_TIM_MspPostInit+0x70>)
 8002dba:	f000 fee9 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020400 	.word	0x40020400

08002dd4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	@ (8002e24 <MX_USART6_UART_Init+0x50>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002de0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002de4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <MX_USART6_UART_Init+0x4c>)
 8002e0c:	f003 fab0 	bl	8006370 <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e16:	f7ff fd8f 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000344 	.word	0x20000344
 8002e24:	40011400 	.word	0x40011400

08002e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	@ (8002ebc <HAL_UART_MspInit+0x94>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d133      	bne.n	8002eb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <HAL_UART_MspInit+0x98>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <HAL_UART_MspInit+0x98>)
 8002e54:	f043 0320 	orr.w	r3, r3, #32
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_UART_MspInit+0x98>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <HAL_UART_MspInit+0x98>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <HAL_UART_MspInit+0x98>)
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_UART_MspInit+0x98>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e82:	23c0      	movs	r3, #192	@ 0xc0
 8002e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e92:	2308      	movs	r3, #8
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4809      	ldr	r0, [pc, #36]	@ (8002ec4 <HAL_UART_MspInit+0x9c>)
 8002e9e:	f000 fe77 	bl	8003b90 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2047      	movs	r0, #71	@ 0x47
 8002ea8:	f000 fda9 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002eac:	2047      	movs	r0, #71	@ 0x47
 8002eae:	f000 fdc2 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	@ 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020800 	.word	0x40020800

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ecc:	f7ff fe62 	bl	8002b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed0:	480c      	ldr	r0, [pc, #48]	@ (8002f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ed2:	490d      	ldr	r1, [pc, #52]	@ (8002f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed8:	e002      	b.n	8002ee0 <LoopCopyDataInit>

08002eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ede:	3304      	adds	r3, #4

08002ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee4:	d3f9      	bcc.n	8002eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eec:	e001      	b.n	8002ef2 <LoopFillZerobss>

08002eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef0:	3204      	adds	r2, #4

08002ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef4:	d3fb      	bcc.n	8002eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f005 f953 	bl	80081a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7ff fb8b 	bl	8002614 <main>
  bx  lr    
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002f0c:	0800a8a0 	.word	0x0800a8a0
  ldr r2, =_sbss
 8002f10:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002f14:	200004dc 	.word	0x200004dc

08002f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC_IRQHandler>
	...

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f20:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <HAL_Init+0x40>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <HAL_Init+0x40>)
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f38:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a07      	ldr	r2, [pc, #28]	@ (8002f5c <HAL_Init+0x40>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f44:	2003      	movs	r0, #3
 8002f46:	f000 fd4f 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4a:	200f      	movs	r0, #15
 8002f4c:	f000 f808 	bl	8002f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f50:	f7ff fcf8 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023c00 	.word	0x40023c00

08002f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f68:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_InitTick+0x54>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <HAL_InitTick+0x58>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fd67 	bl	8003a52 <HAL_SYSTICK_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00e      	b.n	8002fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d80a      	bhi.n	8002faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f94:	2200      	movs	r2, #0
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	f000 fd2f 	bl	80039fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa0:	4a06      	ldr	r2, [pc, #24]	@ (8002fbc <HAL_InitTick+0x5c>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_IncTick+0x20>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_IncTick+0x24>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_IncTick+0x24>)
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	2000038c 	.word	0x2000038c

08002fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <HAL_GetTick+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000038c 	.word	0x2000038c

08003000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff ffee 	bl	8002fe8 <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d005      	beq.n	8003026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_Delay+0x44>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003026:	bf00      	nop
 8003028:	f7ff ffde 	bl	8002fe8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d8f7      	bhi.n	8003028 <HAL_Delay+0x28>
  {
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000008 	.word	0x20000008

08003048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e033      	b.n	80030c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe f9ae 	bl	80013c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800308e:	f023 0302 	bic.w	r3, r3, #2
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fad8 	bl	8003650 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80030b6:	e001      	b.n	80030bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Start+0x1a>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e0b2      	b.n	8003250 <HAL_ADC_Start+0x180>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d018      	beq.n	8003132 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003110:	4b52      	ldr	r3, [pc, #328]	@ (800325c <HAL_ADC_Start+0x18c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a52      	ldr	r2, [pc, #328]	@ (8003260 <HAL_ADC_Start+0x190>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9a      	lsrs	r2, r3, #18
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003124:	e002      	b.n	800312c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d17a      	bne.n	8003236 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800316a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	d106      	bne.n	800318e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	f023 0206 	bic.w	r2, r3, #6
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	645a      	str	r2, [r3, #68]	@ 0x44
 800318c:	e002      	b.n	8003194 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800319c:	4b31      	ldr	r3, [pc, #196]	@ (8003264 <HAL_ADC_Start+0x194>)
 800319e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031a8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d12a      	bne.n	800320c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <HAL_ADC_Start+0x198>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d015      	beq.n	80031ec <HAL_ADC_Start+0x11c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a29      	ldr	r2, [pc, #164]	@ (800326c <HAL_ADC_Start+0x19c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d105      	bne.n	80031d6 <HAL_ADC_Start+0x106>
 80031ca:	4b26      	ldr	r3, [pc, #152]	@ (8003264 <HAL_ADC_Start+0x194>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a25      	ldr	r2, [pc, #148]	@ (8003270 <HAL_ADC_Start+0x1a0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d136      	bne.n	800324e <HAL_ADC_Start+0x17e>
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_ADC_Start+0x194>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d130      	bne.n	800324e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d129      	bne.n	800324e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	e020      	b.n	800324e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a15      	ldr	r2, [pc, #84]	@ (8003268 <HAL_ADC_Start+0x198>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d11b      	bne.n	800324e <HAL_ADC_Start+0x17e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d114      	bne.n	800324e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	e00b      	b.n	800324e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	20000000 	.word	0x20000000
 8003260:	431bde83 	.word	0x431bde83
 8003264:	40012300 	.word	0x40012300
 8003268:	40012000 	.word	0x40012000
 800326c:	40012100 	.word	0x40012100
 8003270:	40012200 	.word	0x40012200

08003274 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_ADC_Stop+0x16>
 8003286:	2302      	movs	r3, #2
 8003288:	e021      	b.n	80032ce <HAL_ADC_Stop+0x5a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f6:	d113      	bne.n	8003320 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003306:	d10b      	bne.n	8003320 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e063      	b.n	80033e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003320:	f7ff fe62 	bl	8002fe8 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003326:	e021      	b.n	800336c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d01d      	beq.n	800336c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_ADC_PollForConversion+0x6c>
 8003336:	f7ff fe57 	bl	8002fe8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d212      	bcs.n	800336c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d00b      	beq.n	800336c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e03d      	b.n	80033e8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d1d6      	bne.n	8003328 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0212 	mvn.w	r2, #18
 8003382:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d123      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11f      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d111      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x1c>
 8003424:	2302      	movs	r3, #2
 8003426:	e105      	b.n	8003634 <HAL_ADC_ConfigChannel+0x228>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b09      	cmp	r3, #9
 8003436:	d925      	bls.n	8003484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	3b1e      	subs	r3, #30
 800344e:	2207      	movs	r2, #7
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43da      	mvns	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	400a      	ands	r2, r1
 800345c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	4618      	mov	r0, r3
 8003470:	4603      	mov	r3, r0
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4403      	add	r3, r0
 8003476:	3b1e      	subs	r3, #30
 8003478:	409a      	lsls	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	e022      	b.n	80034ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	2207      	movs	r2, #7
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6919      	ldr	r1, [r3, #16]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4618      	mov	r0, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4403      	add	r3, r0
 80034c0:	409a      	lsls	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d824      	bhi.n	800351c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	3b05      	subs	r3, #5
 80034e4:	221f      	movs	r2, #31
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	400a      	ands	r2, r1
 80034f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4618      	mov	r0, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b05      	subs	r3, #5
 800350e:	fa00 f203 	lsl.w	r2, r0, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	635a      	str	r2, [r3, #52]	@ 0x34
 800351a:	e04c      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d824      	bhi.n	800356e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b23      	subs	r3, #35	@ 0x23
 8003536:	221f      	movs	r2, #31
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43da      	mvns	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	400a      	ands	r2, r1
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b23      	subs	r3, #35	@ 0x23
 8003560:	fa00 f203 	lsl.w	r2, r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
 800356c:	e023      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	3b41      	subs	r3, #65	@ 0x41
 8003580:	221f      	movs	r2, #31
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	400a      	ands	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	3b41      	subs	r3, #65	@ 0x41
 80035aa:	fa00 f203 	lsl.w	r2, r0, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b6:	4b22      	ldr	r3, [pc, #136]	@ (8003640 <HAL_ADC_ConfigChannel+0x234>)
 80035b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <HAL_ADC_ConfigChannel+0x238>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d109      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1cc>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a19      	ldr	r2, [pc, #100]	@ (8003644 <HAL_ADC_ConfigChannel+0x238>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d123      	bne.n	800362a <HAL_ADC_ConfigChannel+0x21e>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d003      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x1e6>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d11b      	bne.n	800362a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d111      	bne.n	800362a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_ADC_ConfigChannel+0x23c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a10      	ldr	r2, [pc, #64]	@ (800364c <HAL_ADC_ConfigChannel+0x240>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0c9a      	lsrs	r2, r3, #18
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800361c:	e002      	b.n	8003624 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40012300 	.word	0x40012300
 8003644:	40012000 	.word	0x40012000
 8003648:	20000000 	.word	0x20000000
 800364c:	431bde83 	.word	0x431bde83

08003650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003658:	4b79      	ldr	r3, [pc, #484]	@ (8003840 <ADC_Init+0x1f0>)
 800365a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	4a58      	ldr	r2, [pc, #352]	@ (8003844 <ADC_Init+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e00f      	b.n	800374e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800373c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800374c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0202 	bic.w	r2, r2, #2
 800375c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7e1b      	ldrb	r3, [r3, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800379a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	3b01      	subs	r3, #1
 80037a8:	035a      	lsls	r2, r3, #13
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	e007      	b.n	80037c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	3b01      	subs	r3, #1
 80037e0:	051a      	lsls	r2, r3, #20
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003806:	025a      	lsls	r2, r3, #9
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	029a      	lsls	r2, r3, #10
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40012300 	.word	0x40012300
 8003844:	0f000001 	.word	0x0f000001

08003848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0307 	and.w	r3, r3, #7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4907      	ldr	r1, [pc, #28]	@ (80038e4 <__NVIC_EnableIRQ+0x38>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	@ (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	@ (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b4:	d301      	bcc.n	80039ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ba:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <SysTick_Config+0x40>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c2:	210f      	movs	r1, #15
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	f7ff ff8e 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <SysTick_Config+0x40>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d2:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <SysTick_Config+0x40>)
 80039d4:	2207      	movs	r2, #7
 80039d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff29 	bl	8003848 <__NVIC_SetPriorityGrouping>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a10:	f7ff ff3e 	bl	8003890 <__NVIC_GetPriorityGrouping>
 8003a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff ff8e 	bl	800393c <NVIC_EncodePriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff5d 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff31 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffa2 	bl	80039a4 <SysTick_Config>
 8003a60:	4603      	mov	r3, r0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff fab6 	bl	8002fe8 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e052      	b.n	8003b42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0216 	bic.w	r2, r2, #22
 8003aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_DMA_Abort+0x62>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0208 	bic.w	r2, r2, #8
 8003ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aec:	e013      	b.n	8003b16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aee:	f7ff fa7b 	bl	8002fe8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d90c      	bls.n	8003b16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e015      	b.n	8003b42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e4      	bne.n	8003aee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b28:	223f      	movs	r2, #63	@ 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2280      	movs	r2, #128	@ 0x80
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e00c      	b.n	8003b82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e16b      	b.n	8003e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	f040 815a 	bne.w	8003e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d005      	beq.n	8003be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d130      	bne.n	8003c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c18:	2201      	movs	r2, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 0201 	and.w	r2, r3, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d017      	beq.n	8003c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d123      	bne.n	8003cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	08da      	lsrs	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3208      	adds	r2, #8
 8003cce:	69b9      	ldr	r1, [r7, #24]
 8003cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80b4 	beq.w	8003e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d26:	4b5d      	ldr	r3, [pc, #372]	@ (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d32:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea0 <HAL_GPIO_Init+0x310>)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a52      	ldr	r2, [pc, #328]	@ (8003ea4 <HAL_GPIO_Init+0x314>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02b      	beq.n	8003db6 <HAL_GPIO_Init+0x226>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a51      	ldr	r2, [pc, #324]	@ (8003ea8 <HAL_GPIO_Init+0x318>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d025      	beq.n	8003db2 <HAL_GPIO_Init+0x222>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a50      	ldr	r2, [pc, #320]	@ (8003eac <HAL_GPIO_Init+0x31c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <HAL_GPIO_Init+0x21e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb0 <HAL_GPIO_Init+0x320>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0x21a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4e      	ldr	r2, [pc, #312]	@ (8003eb4 <HAL_GPIO_Init+0x324>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x216>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4d      	ldr	r2, [pc, #308]	@ (8003eb8 <HAL_GPIO_Init+0x328>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x212>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	@ (8003ebc <HAL_GPIO_Init+0x32c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x20e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec0 <HAL_GPIO_Init+0x330>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x20a>
 8003d96:	2307      	movs	r3, #7
 8003d98:	e00e      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	e00c      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003d9e:	2306      	movs	r3, #6
 8003da0:	e00a      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003da2:	2305      	movs	r3, #5
 8003da4:	e008      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003da6:	2304      	movs	r3, #4
 8003da8:	e006      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003daa:	2303      	movs	r3, #3
 8003dac:	e004      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e002      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003db6:	2300      	movs	r3, #0
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f002 0203 	and.w	r2, r2, #3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4093      	lsls	r3, r2
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc8:	4935      	ldr	r1, [pc, #212]	@ (8003ea0 <HAL_GPIO_Init+0x310>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfa:	4a32      	ldr	r2, [pc, #200]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e00:	4b30      	ldr	r3, [pc, #192]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e24:	4a27      	ldr	r2, [pc, #156]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e78:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	f67f ae90 	bls.w	8003bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	3724      	adds	r7, #36	@ 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40021400 	.word	0x40021400
 8003ebc:	40021800 	.word	0x40021800
 8003ec0:	40021c00 	.word	0x40021c00
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
 8003f04:	4613      	mov	r3, r2
 8003f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f08:	787b      	ldrb	r3, [r7, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f14:	e003      	b.n	8003f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	619a      	str	r2, [r3, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e12b      	b.n	8004196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fb42 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f90:	f001 fc36 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 8003f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a81      	ldr	r2, [pc, #516]	@ (80041a0 <HAL_I2C_Init+0x274>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d807      	bhi.n	8003fb0 <HAL_I2C_Init+0x84>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a80      	ldr	r2, [pc, #512]	@ (80041a4 <HAL_I2C_Init+0x278>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bf94      	ite	ls
 8003fa8:	2301      	movls	r3, #1
 8003faa:	2300      	movhi	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e006      	b.n	8003fbe <HAL_I2C_Init+0x92>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80041a8 <HAL_I2C_Init+0x27c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	bf94      	ite	ls
 8003fb8:	2301      	movls	r3, #1
 8003fba:	2300      	movhi	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0e7      	b.n	8004196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a78      	ldr	r2, [pc, #480]	@ (80041ac <HAL_I2C_Init+0x280>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0c9b      	lsrs	r3, r3, #18
 8003fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80041a0 <HAL_I2C_Init+0x274>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d802      	bhi.n	8004000 <HAL_I2C_Init+0xd4>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	e009      	b.n	8004014 <HAL_I2C_Init+0xe8>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	4a69      	ldr	r2, [pc, #420]	@ (80041b0 <HAL_I2C_Init+0x284>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	3301      	adds	r3, #1
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	430b      	orrs	r3, r1
 800401a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004026:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	495c      	ldr	r1, [pc, #368]	@ (80041a0 <HAL_I2C_Init+0x274>)
 8004030:	428b      	cmp	r3, r1
 8004032:	d819      	bhi.n	8004068 <HAL_I2C_Init+0x13c>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e59      	subs	r1, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004048:	400b      	ands	r3, r1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_I2C_Init+0x138>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1e59      	subs	r1, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fbb1 f3f3 	udiv	r3, r1, r3
 800405c:	3301      	adds	r3, #1
 800405e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004062:	e051      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 8004064:	2304      	movs	r3, #4
 8004066:	e04f      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <HAL_I2C_Init+0x168>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e012      	b.n	80040ba <HAL_I2C_Init+0x18e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Init+0x196>
 80040be:	2301      	movs	r3, #1
 80040c0:	e022      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10e      	bne.n	80040e8 <HAL_I2C_Init+0x1bc>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e58      	subs	r0, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	440b      	add	r3, r1
 80040d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040e6:	e00f      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e58      	subs	r0, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	0099      	lsls	r1, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fe:	3301      	adds	r3, #1
 8004100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	6809      	ldr	r1, [r1, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6911      	ldr	r1, [r2, #16]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68d2      	ldr	r2, [r2, #12]
 8004142:	4311      	orrs	r1, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	000186a0 	.word	0x000186a0
 80041a4:	001e847f 	.word	0x001e847f
 80041a8:	003d08ff 	.word	0x003d08ff
 80041ac:	431bde83 	.word	0x431bde83
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	460b      	mov	r3, r1
 80041c2:	817b      	strh	r3, [r7, #10]
 80041c4:	4613      	mov	r3, r2
 80041c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c8:	f7fe ff0e 	bl	8002fe8 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	f040 80e0 	bne.w	800439c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2319      	movs	r3, #25
 80041e2:	2201      	movs	r2, #1
 80041e4:	4970      	ldr	r1, [pc, #448]	@ (80043a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fc64 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	e0d3      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_I2C_Master_Transmit+0x50>
 8004200:	2302      	movs	r3, #2
 8004202:	e0cc      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d007      	beq.n	800422a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004238:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	@ 0x21
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2210      	movs	r2, #16
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	893a      	ldrh	r2, [r7, #8]
 800425a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a50      	ldr	r2, [pc, #320]	@ (80043ac <HAL_I2C_Master_Transmit+0x1f8>)
 800426a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800426c:	8979      	ldrh	r1, [r7, #10]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 face 	bl	8004814 <I2C_MasterRequestWrite>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e08d      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004298:	e066      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fd22 	bl	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d107      	bne.n	80042c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06b      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d11b      	bne.n	800433c <HAL_I2C_Master_Transmit+0x188>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fd19 	bl	8004d78 <I2C_WaitOnBTFFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	2b04      	cmp	r3, #4
 8004352:	d107      	bne.n	8004364 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e01a      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d194      	bne.n	800429a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	00100002 	.word	0x00100002
 80043ac:	ffff0000 	.word	0xffff0000

080043b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08c      	sub	sp, #48	@ 0x30
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	461a      	mov	r2, r3
 80043bc:	460b      	mov	r3, r1
 80043be:	817b      	strh	r3, [r7, #10]
 80043c0:	4613      	mov	r3, r2
 80043c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c4:	f7fe fe10 	bl	8002fe8 <HAL_GetTick>
 80043c8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	f040 8217 	bne.w	8004806 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2319      	movs	r3, #25
 80043de:	2201      	movs	r2, #1
 80043e0:	497c      	ldr	r1, [pc, #496]	@ (80045d4 <HAL_I2C_Master_Receive+0x224>)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fb66 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	e20a      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_I2C_Master_Receive+0x50>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e203      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d007      	beq.n	8004426 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2222      	movs	r2, #34	@ 0x22
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2210      	movs	r2, #16
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	893a      	ldrh	r2, [r7, #8]
 8004456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a5c      	ldr	r2, [pc, #368]	@ (80045d8 <HAL_I2C_Master_Receive+0x228>)
 8004466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004468:	8979      	ldrh	r1, [r7, #10]
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa52 	bl	8004918 <I2C_MasterRequestRead>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c4      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d113      	bne.n	80044ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e198      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d11b      	bne.n	80044ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e178      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d11b      	bne.n	800452e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004504:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	e158      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800453c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004554:	e144      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	2b03      	cmp	r3, #3
 800455c:	f200 80f1 	bhi.w	8004742 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	2b01      	cmp	r3, #1
 8004566:	d123      	bne.n	80045b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fc4b 	bl	8004e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e145      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045ae:	e117      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d14e      	bne.n	8004656 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	2200      	movs	r2, #0
 80045c0:	4906      	ldr	r1, [pc, #24]	@ (80045dc <HAL_I2C_Master_Receive+0x22c>)
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa76 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e11a      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
 80045d2:	bf00      	nop
 80045d4:	00100002 	.word	0x00100002
 80045d8:	ffff0000 	.word	0xffff0000
 80045dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004654:	e0c4      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	2200      	movs	r2, #0
 800465e:	496c      	ldr	r1, [pc, #432]	@ (8004810 <HAL_I2C_Master_Receive+0x460>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa27 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0cb      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	2200      	movs	r2, #0
 80046ba:	4955      	ldr	r1, [pc, #340]	@ (8004810 <HAL_I2C_Master_Receive+0x460>)
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f9f9 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e09d      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004740:	e04e      	b.n	80047e0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004744:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb5e 	bl	8004e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e058      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b04      	cmp	r3, #4
 8004794:	d124      	bne.n	80047e0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f47f aeb6 	bne.w	8004556 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	e000      	b.n	8004808 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004806:	2302      	movs	r3, #2
  }
}
 8004808:	4618      	mov	r0, r3
 800480a:	3728      	adds	r7, #40	@ 0x28
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	00010004 	.word	0x00010004

08004814 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d006      	beq.n	800483e <I2C_MasterRequestWrite+0x2a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestWrite+0x2a>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e00b      	b.n	8004868 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	2b12      	cmp	r3, #18
 8004856:	d107      	bne.n	8004868 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f91d 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488e:	d103      	bne.n	8004898 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e035      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048a4:	d108      	bne.n	80048b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e01b      	b.n	80048f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030f 	orn	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	490e      	ldr	r1, [pc, #56]	@ (8004910 <I2C_MasterRequestWrite+0xfc>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f966 	bl	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e010      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4907      	ldr	r1, [pc, #28]	@ (8004914 <I2C_MasterRequestWrite+0x100>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f956 	bl	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	00010008 	.word	0x00010008
 8004914:	00010002 	.word	0x00010002

08004918 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	460b      	mov	r3, r1
 8004926:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800493c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d006      	beq.n	8004952 <I2C_MasterRequestRead+0x3a>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d003      	beq.n	8004952 <I2C_MasterRequestRead+0x3a>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004950:	d108      	bne.n	8004964 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e00b      	b.n	800497c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	2b11      	cmp	r3, #17
 800496a:	d107      	bne.n	800497c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800497a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f893 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00d      	beq.n	80049b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a2:	d103      	bne.n	80049ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e079      	b.n	8004aa4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049b8:	d108      	bne.n	80049cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]
 80049ca:	e05f      	b.n	8004a8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049cc:	897b      	ldrh	r3, [r7, #10]
 80049ce:	11db      	asrs	r3, r3, #7
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 0306 	and.w	r3, r3, #6
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f063 030f 	orn	r3, r3, #15
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4930      	ldr	r1, [pc, #192]	@ (8004aac <I2C_MasterRequestRead+0x194>)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f8dc 	bl	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e054      	b.n	8004aa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4929      	ldr	r1, [pc, #164]	@ (8004ab0 <I2C_MasterRequestRead+0x198>)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8cc 	bl	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e044      	b.n	8004aa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f831 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00d      	beq.n	8004a74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a66:	d103      	bne.n	8004a70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a6e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e017      	b.n	8004aa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a74:	897b      	ldrh	r3, [r7, #10]
 8004a76:	11db      	asrs	r3, r3, #7
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 0306 	and.w	r3, r3, #6
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f063 030e 	orn	r3, r3, #14
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4907      	ldr	r1, [pc, #28]	@ (8004ab0 <I2C_MasterRequestRead+0x198>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f888 	bl	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	00010008 	.word	0x00010008
 8004ab0:	00010002 	.word	0x00010002

08004ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac4:	e048      	b.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d044      	beq.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe fa8b 	bl	8002fe8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d139      	bne.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10d      	bne.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	43da      	mvns	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4013      	ands	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	e00c      	b.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d116      	bne.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e023      	b.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10d      	bne.n	8004b7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	e00c      	b.n	8004b98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	43da      	mvns	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d093      	beq.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb6:	e071      	b.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	d123      	bne.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	f043 0204 	orr.w	r2, r3, #4
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e067      	b.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d041      	beq.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe f9e6 	bl	8002fe8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d136      	bne.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10c      	bne.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e00b      	b.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	43da      	mvns	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e021      	b.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10c      	bne.n	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e00b      	b.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf14      	ite	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	2300      	moveq	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f47f af6d 	bne.w	8004bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf4:	e034      	b.n	8004d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8e3 	bl	8004ec2 <I2C_IsAcknowledgeFailed>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e034      	b.n	8004d70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d028      	beq.n	8004d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fe f96b 	bl	8002fe8 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11d      	bne.n	8004d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2e:	2b80      	cmp	r3, #128	@ 0x80
 8004d30:	d016      	beq.n	8004d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e007      	b.n	8004d70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b80      	cmp	r3, #128	@ 0x80
 8004d6c:	d1c3      	bne.n	8004cf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d84:	e034      	b.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f89b 	bl	8004ec2 <I2C_IsAcknowledgeFailed>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e034      	b.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d028      	beq.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fe f923 	bl	8002fe8 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11d      	bne.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d016      	beq.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e007      	b.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d1c3      	bne.n	8004d86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e14:	e049      	b.n	8004eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d119      	bne.n	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0210 	mvn.w	r2, #16
 8004e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e030      	b.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e58:	f7fe f8c6 	bl	8002fe8 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11d      	bne.n	8004eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b40      	cmp	r3, #64	@ 0x40
 8004e7a:	d016      	beq.n	8004eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e007      	b.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b40      	cmp	r3, #64	@ 0x40
 8004eb6:	d1ae      	bne.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed8:	d11b      	bne.n	8004f12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ee2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f043 0204 	orr.w	r2, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e267      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d075      	beq.n	800502a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f3e:	4b88      	ldr	r3, [pc, #544]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d00c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f4a:	4b85      	ldr	r3, [pc, #532]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d112      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f56:	4b82      	ldr	r3, [pc, #520]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	4b7e      	ldr	r3, [pc, #504]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d05b      	beq.n	8005028 <HAL_RCC_OscConfig+0x108>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d157      	bne.n	8005028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e242      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f84:	d106      	bne.n	8004f94 <HAL_RCC_OscConfig+0x74>
 8004f86:	4b76      	ldr	r3, [pc, #472]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a75      	ldr	r2, [pc, #468]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e01d      	b.n	8004fd0 <HAL_RCC_OscConfig+0xb0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x98>
 8004f9e:	4b70      	ldr	r3, [pc, #448]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6f      	ldr	r2, [pc, #444]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4b6d      	ldr	r3, [pc, #436]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6c      	ldr	r2, [pc, #432]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e00b      	b.n	8004fd0 <HAL_RCC_OscConfig+0xb0>
 8004fb8:	4b69      	ldr	r3, [pc, #420]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a68      	ldr	r2, [pc, #416]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b66      	ldr	r3, [pc, #408]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a65      	ldr	r2, [pc, #404]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d013      	beq.n	8005000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fe f806 	bl	8002fe8 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fe f802 	bl	8002fe8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	@ 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e207      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0xc0>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fd fff2 	bl	8002fe8 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7fd ffee 	bl	8002fe8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	@ 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1f3      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	4b51      	ldr	r3, [pc, #324]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0xe8>
 8005026:	e000      	b.n	800502a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d063      	beq.n	80050fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005036:	4b4a      	ldr	r3, [pc, #296]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005042:	4b47      	ldr	r3, [pc, #284]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800504a:	2b08      	cmp	r3, #8
 800504c:	d11c      	bne.n	8005088 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504e:	4b44      	ldr	r3, [pc, #272]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d116      	bne.n	8005088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505a:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_RCC_OscConfig+0x152>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d001      	beq.n	8005072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e1c7      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005072:	4b3b      	ldr	r3, [pc, #236]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4937      	ldr	r1, [pc, #220]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005086:	e03a      	b.n	80050fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005090:	4b34      	ldr	r3, [pc, #208]	@ (8005164 <HAL_RCC_OscConfig+0x244>)
 8005092:	2201      	movs	r2, #1
 8005094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7fd ffa7 	bl	8002fe8 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509e:	f7fd ffa3 	bl	8002fe8 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e1a8      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050bc:	4b28      	ldr	r3, [pc, #160]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4925      	ldr	r1, [pc, #148]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]
 80050d0:	e015      	b.n	80050fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d2:	4b24      	ldr	r3, [pc, #144]	@ (8005164 <HAL_RCC_OscConfig+0x244>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd ff86 	bl	8002fe8 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e0:	f7fd ff82 	bl	8002fe8 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e187      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d036      	beq.n	8005178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005112:	4b15      	ldr	r3, [pc, #84]	@ (8005168 <HAL_RCC_OscConfig+0x248>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fd ff66 	bl	8002fe8 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005120:	f7fd ff62 	bl	8002fe8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e167      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <HAL_RCC_OscConfig+0x240>)
 8005134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0x200>
 800513e:	e01b      	b.n	8005178 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <HAL_RCC_OscConfig+0x248>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fd ff4f 	bl	8002fe8 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514c:	e00e      	b.n	800516c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514e:	f7fd ff4b 	bl	8002fe8 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d907      	bls.n	800516c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e150      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
 8005160:	40023800 	.word	0x40023800
 8005164:	42470000 	.word	0x42470000
 8005168:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	4b88      	ldr	r3, [pc, #544]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ea      	bne.n	800514e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8097 	beq.w	80052b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800518a:	4b81      	ldr	r3, [pc, #516]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b7d      	ldr	r3, [pc, #500]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	4a7c      	ldr	r2, [pc, #496]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b6:	4b77      	ldr	r3, [pc, #476]	@ (8005394 <HAL_RCC_OscConfig+0x474>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d118      	bne.n	80051f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c2:	4b74      	ldr	r3, [pc, #464]	@ (8005394 <HAL_RCC_OscConfig+0x474>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a73      	ldr	r2, [pc, #460]	@ (8005394 <HAL_RCC_OscConfig+0x474>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ce:	f7fd ff0b 	bl	8002fe8 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d6:	f7fd ff07 	bl	8002fe8 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e10c      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005394 <HAL_RCC_OscConfig+0x474>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d106      	bne.n	800520a <HAL_RCC_OscConfig+0x2ea>
 80051fc:	4b64      	ldr	r3, [pc, #400]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005200:	4a63      	ldr	r2, [pc, #396]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	@ 0x70
 8005208:	e01c      	b.n	8005244 <HAL_RCC_OscConfig+0x324>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b05      	cmp	r3, #5
 8005210:	d10c      	bne.n	800522c <HAL_RCC_OscConfig+0x30c>
 8005212:	4b5f      	ldr	r3, [pc, #380]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	4a5e      	ldr	r2, [pc, #376]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6713      	str	r3, [r2, #112]	@ 0x70
 800521e:	4b5c      	ldr	r3, [pc, #368]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	4a5b      	ldr	r2, [pc, #364]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6713      	str	r3, [r2, #112]	@ 0x70
 800522a:	e00b      	b.n	8005244 <HAL_RCC_OscConfig+0x324>
 800522c:	4b58      	ldr	r3, [pc, #352]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005230:	4a57      	ldr	r2, [pc, #348]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	@ 0x70
 8005238:	4b55      	ldr	r3, [pc, #340]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a54      	ldr	r2, [pc, #336]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800523e:	f023 0304 	bic.w	r3, r3, #4
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d015      	beq.n	8005278 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd fecc 	bl	8002fe8 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	e00a      	b.n	800526a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fd fec8 	bl	8002fe8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e0cb      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	4b49      	ldr	r3, [pc, #292]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ee      	beq.n	8005254 <HAL_RCC_OscConfig+0x334>
 8005276:	e014      	b.n	80052a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005278:	f7fd feb6 	bl	8002fe8 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527e:	e00a      	b.n	8005296 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005280:	f7fd feb2 	bl	8002fe8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0b5      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005296:	4b3e      	ldr	r3, [pc, #248]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1ee      	bne.n	8005280 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a8:	4b39      	ldr	r3, [pc, #228]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	4a38      	ldr	r2, [pc, #224]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80052ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a1 	beq.w	8005400 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052be:	4b34      	ldr	r3, [pc, #208]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d05c      	beq.n	8005384 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d141      	bne.n	8005356 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b31      	ldr	r3, [pc, #196]	@ (8005398 <HAL_RCC_OscConfig+0x478>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fd fe86 	bl	8002fe8 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fd fe82 	bl	8002fe8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e087      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	4b27      	ldr	r3, [pc, #156]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	3b01      	subs	r3, #1
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	491b      	ldr	r1, [pc, #108]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005328:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <HAL_RCC_OscConfig+0x478>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532e:	f7fd fe5b 	bl	8002fe8 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005336:	f7fd fe57 	bl	8002fe8 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e05c      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x416>
 8005354:	e054      	b.n	8005400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005356:	4b10      	ldr	r3, [pc, #64]	@ (8005398 <HAL_RCC_OscConfig+0x478>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fd fe44 	bl	8002fe8 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005364:	f7fd fe40 	bl	8002fe8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e045      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <HAL_RCC_OscConfig+0x470>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x444>
 8005382:	e03d      	b.n	8005400 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e038      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
 8005390:	40023800 	.word	0x40023800
 8005394:	40007000 	.word	0x40007000
 8005398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x4ec>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d028      	beq.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d121      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d11a      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053cc:	4013      	ands	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d111      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	3b01      	subs	r3, #1
 80053e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800

08005410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0cc      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005424:	4b68      	ldr	r3, [pc, #416]	@ (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d90c      	bls.n	800544c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b65      	ldr	r3, [pc, #404]	@ (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b63      	ldr	r3, [pc, #396]	@ (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0b8      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	4b59      	ldr	r3, [pc, #356]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a58      	ldr	r2, [pc, #352]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800546e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800547c:	4b53      	ldr	r3, [pc, #332]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a52      	ldr	r2, [pc, #328]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b50      	ldr	r3, [pc, #320]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	494d      	ldr	r1, [pc, #308]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d044      	beq.n	8005530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b47      	ldr	r3, [pc, #284]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d119      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d003      	beq.n	80054ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ce:	4b3f      	ldr	r3, [pc, #252]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e06f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054de:	4b3b      	ldr	r3, [pc, #236]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e067      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ee:	4b37      	ldr	r3, [pc, #220]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f023 0203 	bic.w	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4934      	ldr	r1, [pc, #208]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005500:	f7fd fd72 	bl	8002fe8 <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005506:	e00a      	b.n	800551e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005508:	f7fd fd6e 	bl	8002fe8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e04f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	4b2b      	ldr	r3, [pc, #172]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 020c 	and.w	r2, r3, #12
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	429a      	cmp	r2, r3
 800552e:	d1eb      	bne.n	8005508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005530:	4b25      	ldr	r3, [pc, #148]	@ (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d20c      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b22      	ldr	r3, [pc, #136]	@ (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b20      	ldr	r3, [pc, #128]	@ (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e032      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005564:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4916      	ldr	r1, [pc, #88]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005582:	4b12      	ldr	r3, [pc, #72]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	490e      	ldr	r1, [pc, #56]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005596:	f000 f821 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 800559a:	4602      	mov	r2, r0
 800559c:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	490a      	ldr	r1, [pc, #40]	@ (80055d0 <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	5ccb      	ldrb	r3, [r1, r3]
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80055b2:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fcd2 	bl	8002f60 <HAL_InitTick>

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023c00 	.word	0x40023c00
 80055cc:	40023800 	.word	0x40023800
 80055d0:	0800a508 	.word	0x0800a508
 80055d4:	20000000 	.word	0x20000000
 80055d8:	20000004 	.word	0x20000004

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b094      	sub	sp, #80	@ 0x50
 80055e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f4:	4b79      	ldr	r3, [pc, #484]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d00d      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x40>
 8005600:	2b08      	cmp	r3, #8
 8005602:	f200 80e1 	bhi.w	80057c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x34>
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x3a>
 800560e:	e0db      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b73      	ldr	r3, [pc, #460]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005614:	e0db      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005616:	4b73      	ldr	r3, [pc, #460]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005618:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800561a:	e0d8      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800561c:	4b6f      	ldr	r3, [pc, #444]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005624:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005626:	4b6d      	ldr	r3, [pc, #436]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d063      	beq.n	80056fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005632:	4b6a      	ldr	r3, [pc, #424]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	2200      	movs	r2, #0
 800563a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800563c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30
 8005646:	2300      	movs	r3, #0
 8005648:	637b      	str	r3, [r7, #52]	@ 0x34
 800564a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005660:	0150      	lsls	r0, r2, #5
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4621      	mov	r1, r4
 8005668:	1a51      	subs	r1, r2, r1
 800566a:	6139      	str	r1, [r7, #16]
 800566c:	4629      	mov	r1, r5
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005680:	4659      	mov	r1, fp
 8005682:	018b      	lsls	r3, r1, #6
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800568a:	4651      	mov	r1, sl
 800568c:	018a      	lsls	r2, r1, #6
 800568e:	4651      	mov	r1, sl
 8005690:	ebb2 0801 	subs.w	r8, r2, r1
 8005694:	4659      	mov	r1, fp
 8005696:	eb63 0901 	sbc.w	r9, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ae:	4690      	mov	r8, r2
 80056b0:	4699      	mov	r9, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb18 0303 	adds.w	r3, r8, r3
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	462b      	mov	r3, r5
 80056bc:	eb49 0303 	adc.w	r3, r9, r3
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ce:	4629      	mov	r1, r5
 80056d0:	024b      	lsls	r3, r1, #9
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056d8:	4621      	mov	r1, r4
 80056da:	024a      	lsls	r2, r1, #9
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e2:	2200      	movs	r2, #0
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056ec:	f7fb fa7c 	bl	8000be8 <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4613      	mov	r3, r2
 80056f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f8:	e058      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fa:	4b38      	ldr	r3, [pc, #224]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	099b      	lsrs	r3, r3, #6
 8005700:	2200      	movs	r2, #0
 8005702:	4618      	mov	r0, r3
 8005704:	4611      	mov	r1, r2
 8005706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	f04f 0000 	mov.w	r0, #0
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	0159      	lsls	r1, r3, #5
 8005722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005726:	0150      	lsls	r0, r2, #5
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4641      	mov	r1, r8
 800572e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb63 0b01 	sbc.w	fp, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800574c:	ebb2 040a 	subs.w	r4, r2, sl
 8005750:	eb63 050b 	sbc.w	r5, r3, fp
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	00eb      	lsls	r3, r5, #3
 800575e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005762:	00e2      	lsls	r2, r4, #3
 8005764:	4614      	mov	r4, r2
 8005766:	461d      	mov	r5, r3
 8005768:	4643      	mov	r3, r8
 800576a:	18e3      	adds	r3, r4, r3
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	464b      	mov	r3, r9
 8005770:	eb45 0303 	adc.w	r3, r5, r3
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005782:	4629      	mov	r1, r5
 8005784:	028b      	lsls	r3, r1, #10
 8005786:	4621      	mov	r1, r4
 8005788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800578c:	4621      	mov	r1, r4
 800578e:	028a      	lsls	r2, r1, #10
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005796:	2200      	movs	r2, #0
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	61fa      	str	r2, [r7, #28]
 800579c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a0:	f7fb fa22 	bl	8000be8 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057ac:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80057bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057c6:	e002      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3750      	adds	r7, #80	@ 0x50
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	00f42400 	.word	0x00f42400
 80057e4:	007a1200 	.word	0x007a1200

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b03      	ldr	r3, [pc, #12]	@ (80057fc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000000 	.word	0x20000000

08005800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005804:	f7ff fff0 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4903      	ldr	r1, [pc, #12]	@ (8005824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	0800a518 	.word	0x0800a518

08005828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800582c:	f7ff ffdc 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0b5b      	lsrs	r3, r3, #13
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4903      	ldr	r1, [pc, #12]	@ (800584c <HAL_RCC_GetPCLK2Freq+0x24>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800
 800584c:	0800a518 	.word	0x0800a518

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e041      	b.n	80058e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd fa50 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fa70 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d001      	beq.n	8005908 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e046      	b.n	8005996 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a23      	ldr	r2, [pc, #140]	@ (80059a4 <HAL_TIM_Base_Start+0xb4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005922:	d01d      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <HAL_TIM_Base_Start+0xb8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1e      	ldr	r2, [pc, #120]	@ (80059ac <HAL_TIM_Base_Start+0xbc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1c      	ldr	r2, [pc, #112]	@ (80059b0 <HAL_TIM_Base_Start+0xc0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1b      	ldr	r2, [pc, #108]	@ (80059b4 <HAL_TIM_Base_Start+0xc4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	@ (80059b8 <HAL_TIM_Base_Start+0xc8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_Base_Start+0x70>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a18      	ldr	r2, [pc, #96]	@ (80059bc <HAL_TIM_Base_Start+0xcc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d111      	bne.n	8005984 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d010      	beq.n	8005994 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	e007      	b.n	8005994 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40001800 	.word	0x40001800

080059c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e041      	b.n	8005a56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd f976 	bl	8002cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 f9b8 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <HAL_TIM_PWM_Start+0x24>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e022      	b.n	8005aca <HAL_TIM_PWM_Start+0x6a>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d109      	bne.n	8005a9e <HAL_TIM_PWM_Start+0x3e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	bf14      	ite	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	2300      	moveq	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	e015      	b.n	8005aca <HAL_TIM_PWM_Start+0x6a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d109      	bne.n	8005ab8 <HAL_TIM_PWM_Start+0x58>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e008      	b.n	8005aca <HAL_TIM_PWM_Start+0x6a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e07c      	b.n	8005bcc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0x82>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ae0:	e013      	b.n	8005b0a <HAL_TIM_PWM_Start+0xaa>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x92>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af0:	e00b      	b.n	8005b0a <HAL_TIM_PWM_Start+0xaa>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xa2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b00:	e003      	b.n	8005b0a <HAL_TIM_PWM_Start+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fb8a 	bl	800622c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd4 <HAL_TIM_PWM_Start+0x174>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIM_PWM_Start+0xcc>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd8 <HAL_TIM_PWM_Start+0x178>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIM_PWM_Start+0xd0>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_TIM_PWM_Start+0xd2>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <HAL_TIM_PWM_Start+0x174>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d01d      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bdc <HAL_TIM_PWM_Start+0x17c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <HAL_TIM_PWM_Start+0x180>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <HAL_TIM_PWM_Start+0x184>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a16      	ldr	r2, [pc, #88]	@ (8005bd8 <HAL_TIM_PWM_Start+0x178>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <HAL_TIM_PWM_Start+0x188>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a16      	ldr	r2, [pc, #88]	@ (8005bec <HAL_TIM_PWM_Start+0x18c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d111      	bne.n	8005bba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d010      	beq.n	8005bca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	e007      	b.n	8005bca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40001800 	.word	0x40001800

08005bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e0ae      	b.n	8005d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	f200 809f 	bhi.w	8005d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c59 	.word	0x08005c59
 8005c28:	08005d5d 	.word	0x08005d5d
 8005c2c:	08005d5d 	.word	0x08005d5d
 8005c30:	08005d5d 	.word	0x08005d5d
 8005c34:	08005c99 	.word	0x08005c99
 8005c38:	08005d5d 	.word	0x08005d5d
 8005c3c:	08005d5d 	.word	0x08005d5d
 8005c40:	08005d5d 	.word	0x08005d5d
 8005c44:	08005cdb 	.word	0x08005cdb
 8005c48:	08005d5d 	.word	0x08005d5d
 8005c4c:	08005d5d 	.word	0x08005d5d
 8005c50:	08005d5d 	.word	0x08005d5d
 8005c54:	08005d1b 	.word	0x08005d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f934 	bl	8005ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6999      	ldr	r1, [r3, #24]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	619a      	str	r2, [r3, #24]
      break;
 8005c96:	e064      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f984 	bl	8005fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6999      	ldr	r1, [r3, #24]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	619a      	str	r2, [r3, #24]
      break;
 8005cd8:	e043      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f9d9 	bl	8006098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0208 	orr.w	r2, r2, #8
 8005cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0204 	bic.w	r2, r2, #4
 8005d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69d9      	ldr	r1, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
      break;
 8005d18:	e023      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fa2d 	bl	8006180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	021a      	lsls	r2, r3, #8
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	61da      	str	r2, [r3, #28]
      break;
 8005d5a:	e002      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a46      	ldr	r2, [pc, #280]	@ (8005ea0 <TIM_Base_SetConfig+0x12c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d92:	d00f      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a43      	ldr	r2, [pc, #268]	@ (8005ea4 <TIM_Base_SetConfig+0x130>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a42      	ldr	r2, [pc, #264]	@ (8005ea8 <TIM_Base_SetConfig+0x134>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a41      	ldr	r2, [pc, #260]	@ (8005eac <TIM_Base_SetConfig+0x138>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a40      	ldr	r2, [pc, #256]	@ (8005eb0 <TIM_Base_SetConfig+0x13c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d108      	bne.n	8005dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a35      	ldr	r2, [pc, #212]	@ (8005ea0 <TIM_Base_SetConfig+0x12c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd4:	d027      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a32      	ldr	r2, [pc, #200]	@ (8005ea4 <TIM_Base_SetConfig+0x130>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d023      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a31      	ldr	r2, [pc, #196]	@ (8005ea8 <TIM_Base_SetConfig+0x134>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a30      	ldr	r2, [pc, #192]	@ (8005eac <TIM_Base_SetConfig+0x138>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2f      	ldr	r2, [pc, #188]	@ (8005eb0 <TIM_Base_SetConfig+0x13c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d017      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb4 <TIM_Base_SetConfig+0x140>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb8 <TIM_Base_SetConfig+0x144>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2c      	ldr	r2, [pc, #176]	@ (8005ebc <TIM_Base_SetConfig+0x148>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec0 <TIM_Base_SetConfig+0x14c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec4 <TIM_Base_SetConfig+0x150>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a29      	ldr	r2, [pc, #164]	@ (8005ec8 <TIM_Base_SetConfig+0x154>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ea0 <TIM_Base_SetConfig+0x12c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0xf8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a12      	ldr	r2, [pc, #72]	@ (8005eb0 <TIM_Base_SetConfig+0x13c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d103      	bne.n	8005e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d105      	bne.n	8005e92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	611a      	str	r2, [r3, #16]
  }
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800
 8005ec0:	40001800 	.word	0x40001800
 8005ec4:	40001c00 	.word	0x40001c00
 8005ec8:	40002000 	.word	0x40002000

08005ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 0201 	bic.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0302 	bic.w	r3, r3, #2
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a20      	ldr	r2, [pc, #128]	@ (8005fa4 <TIM_OC1_SetConfig+0xd8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_OC1_SetConfig+0x64>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <TIM_OC1_SetConfig+0xdc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10c      	bne.n	8005f4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0308 	bic.w	r3, r3, #8
 8005f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a15      	ldr	r2, [pc, #84]	@ (8005fa4 <TIM_OC1_SetConfig+0xd8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_OC1_SetConfig+0x8e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a14      	ldr	r2, [pc, #80]	@ (8005fa8 <TIM_OC1_SetConfig+0xdc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d111      	bne.n	8005f7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	621a      	str	r2, [r3, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40010400 	.word	0x40010400

08005fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0210 	bic.w	r2, r3, #16
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a22      	ldr	r2, [pc, #136]	@ (8006090 <TIM_OC2_SetConfig+0xe4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_OC2_SetConfig+0x68>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a21      	ldr	r2, [pc, #132]	@ (8006094 <TIM_OC2_SetConfig+0xe8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d10d      	bne.n	8006030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a17      	ldr	r2, [pc, #92]	@ (8006090 <TIM_OC2_SetConfig+0xe4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC2_SetConfig+0x94>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a16      	ldr	r2, [pc, #88]	@ (8006094 <TIM_OC2_SetConfig+0xe8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d113      	bne.n	8006068 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000
 8006094:	40010400 	.word	0x40010400

08006098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a21      	ldr	r2, [pc, #132]	@ (8006178 <TIM_OC3_SetConfig+0xe0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_OC3_SetConfig+0x66>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a20      	ldr	r2, [pc, #128]	@ (800617c <TIM_OC3_SetConfig+0xe4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d10d      	bne.n	800611a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a16      	ldr	r2, [pc, #88]	@ (8006178 <TIM_OC3_SetConfig+0xe0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC3_SetConfig+0x92>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	@ (800617c <TIM_OC3_SetConfig+0xe4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d113      	bne.n	8006152 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40010000 	.word	0x40010000
 800617c:	40010400 	.word	0x40010400

08006180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	031b      	lsls	r3, r3, #12
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a12      	ldr	r2, [pc, #72]	@ (8006224 <TIM_OC4_SetConfig+0xa4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_OC4_SetConfig+0x68>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a11      	ldr	r2, [pc, #68]	@ (8006228 <TIM_OC4_SetConfig+0xa8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d109      	bne.n	80061fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	019b      	lsls	r3, r3, #6
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40010400 	.word	0x40010400

0800622c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2201      	movs	r2, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e05a      	b.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a21      	ldr	r2, [pc, #132]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062dc:	d01d      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1b      	ldr	r2, [pc, #108]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a18      	ldr	r2, [pc, #96]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40010400 	.word	0x40010400
 8006368:	40014000 	.word	0x40014000
 800636c:	40001800 	.word	0x40001800

08006370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e042      	b.n	8006408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fc fd46 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2224      	movs	r2, #36	@ 0x24
 80063a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fdbd 	bl	8006f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	@ 0x28
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b20      	cmp	r3, #32
 800642e:	d175      	bne.n	800651c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_UART_Transmit+0x2c>
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e06e      	b.n	800651e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2221      	movs	r2, #33	@ 0x21
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800644e:	f7fc fdcb 	bl	8002fe8 <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	88fa      	ldrh	r2, [r7, #6]
 8006458:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006468:	d108      	bne.n	800647c <HAL_UART_Transmit+0x6c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	e003      	b.n	8006484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006484:	e02e      	b.n	80064e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2200      	movs	r2, #0
 800648e:	2180      	movs	r1, #128	@ 0x80
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fb1f 	bl	8006ad4 <UART_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e03a      	b.n	800651e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	3302      	adds	r3, #2
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e007      	b.n	80064d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	3301      	adds	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1cb      	bne.n	8006486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2140      	movs	r1, #64	@ 0x40
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 faeb 	bl	8006ad4 <UART_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e006      	b.n	800651e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e000      	b.n	800651e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800651c:	2302      	movs	r3, #2
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b20      	cmp	r3, #32
 800653e:	d112      	bne.n	8006566 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_UART_Receive_IT+0x26>
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e00b      	b.n	8006568 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	461a      	mov	r2, r3
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fb12 	bl	8006b86 <UART_Start_Receive_IT>
 8006562:	4603      	mov	r3, r0
 8006564:	e000      	b.n	8006568 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b0ba      	sub	sp, #232	@ 0xe8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006596:	2300      	movs	r3, #0
 8006598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10f      	bne.n	80065d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_UART_IRQHandler+0x66>
 80065c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fbf2 	bl	8006db8 <UART_Receive_IT>
      return;
 80065d4:	e25b      	b.n	8006a8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80de 	beq.w	800679c <HAL_UART_IRQHandler+0x22c>
 80065e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d106      	bne.n	80065fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80d1 	beq.w	800679c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <HAL_UART_IRQHandler+0xae>
 8006606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	f043 0201 	orr.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_UART_IRQHandler+0xd2>
 800662a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663a:	f043 0202 	orr.w	r2, r3, #2
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_UART_IRQHandler+0xf6>
 800664e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <HAL_UART_IRQHandler+0x126>
 8006672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d105      	bne.n	800668a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800667e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	f043 0208 	orr.w	r2, r3, #8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 81f2 	beq.w	8006a84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_UART_IRQHandler+0x14e>
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fb7d 	bl	8006db8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <HAL_UART_IRQHandler+0x17a>
 80066e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04f      	beq.n	800678a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa85 	bl	8006bfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fa:	2b40      	cmp	r3, #64	@ 0x40
 80066fc:	d141      	bne.n	8006782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3314      	adds	r3, #20
 8006704:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800671c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800672a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800672e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1d9      	bne.n	80066fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d013      	beq.n	800677a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006756:	4a7e      	ldr	r2, [pc, #504]	@ (8006950 <HAL_UART_IRQHandler+0x3e0>)
 8006758:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675e:	4618      	mov	r0, r3
 8006760:	f7fd f9f3 	bl	8003b4a <HAL_DMA_Abort_IT>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	e00e      	b.n	8006798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f994 	bl	8006aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	e00a      	b.n	8006798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f990 	bl	8006aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	e006      	b.n	8006798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f98c 	bl	8006aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006796:	e175      	b.n	8006a84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	bf00      	nop
    return;
 800679a:	e173      	b.n	8006a84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	f040 814f 	bne.w	8006a44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8148 	beq.w	8006a44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8141 	beq.w	8006a44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e2:	2b40      	cmp	r3, #64	@ 0x40
 80067e4:	f040 80b6 	bne.w	8006954 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8145 	beq.w	8006a88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006806:	429a      	cmp	r2, r3
 8006808:	f080 813e 	bcs.w	8006a88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006812:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800681e:	f000 8088 	beq.w	8006932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800683c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800684e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800685a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1d9      	bne.n	8006822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3314      	adds	r3, #20
 8006874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800687e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800689a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e1      	bne.n	800686e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e3      	bne.n	80068aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006914:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006916:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800691a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e3      	bne.n	80068f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692c:	4618      	mov	r0, r3
 800692e:	f7fd f89c 	bl	8003a6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006940:	b29b      	uxth	r3, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	b29b      	uxth	r3, r3
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8b7 	bl	8006abc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800694e:	e09b      	b.n	8006a88 <HAL_UART_IRQHandler+0x518>
 8006950:	08006cc1 	.word	0x08006cc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800695c:	b29b      	uxth	r3, r3
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 808e 	beq.w	8006a8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8089 	beq.w	8006a8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800699e:	647a      	str	r2, [r7, #68]	@ 0x44
 80069a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e3      	bne.n	800697a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	623b      	str	r3, [r7, #32]
   return(result);
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3314      	adds	r3, #20
 80069d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80069d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e3      	bne.n	80069b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0310 	bic.w	r3, r3, #16
 8006a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a1c:	61fa      	str	r2, [r7, #28]
 8006a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69b9      	ldr	r1, [r7, #24]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	617b      	str	r3, [r7, #20]
   return(result);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e3      	bne.n	80069f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f83d 	bl	8006abc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a42:	e023      	b.n	8006a8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_UART_IRQHandler+0x4f4>
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f943 	bl	8006ce8 <UART_Transmit_IT>
    return;
 8006a62:	e014      	b.n	8006a8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00e      	beq.n	8006a8e <HAL_UART_IRQHandler+0x51e>
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f983 	bl	8006d88 <UART_EndTransmit_IT>
    return;
 8006a82:	e004      	b.n	8006a8e <HAL_UART_IRQHandler+0x51e>
    return;
 8006a84:	bf00      	nop
 8006a86:	e002      	b.n	8006a8e <HAL_UART_IRQHandler+0x51e>
      return;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <HAL_UART_IRQHandler+0x51e>
      return;
 8006a8c:	bf00      	nop
  }
}
 8006a8e:	37e8      	adds	r7, #232	@ 0xe8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae4:	e03b      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d037      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fc fa7b 	bl	8002fe8 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	6a3a      	ldr	r2, [r7, #32]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e03a      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d023      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b80      	cmp	r3, #128	@ 0x80
 8006b1a:	d020      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	d01d      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d116      	bne.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f857 	bl	8006bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2208      	movs	r2, #8
 8006b50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e00f      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	bf0c      	ite	eq
 8006b6e:	2301      	moveq	r3, #1
 8006b70:	2300      	movne	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d0b4      	beq.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	4613      	mov	r3, r2
 8006b92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2222      	movs	r2, #34	@ 0x22
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0220 	orr.w	r2, r2, #32
 8006bea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b095      	sub	sp, #84	@ 0x54
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c22:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3314      	adds	r3, #20
 8006c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d119      	bne.n	8006ca6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f023 0310 	bic.w	r3, r3, #16
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c92:	61ba      	str	r2, [r7, #24]
 8006c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e5      	bne.n	8006c72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cb4:	bf00      	nop
 8006cb6:	3754      	adds	r7, #84	@ 0x54
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff fee4 	bl	8006aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b21      	cmp	r3, #33	@ 0x21
 8006cfa:	d13e      	bne.n	8006d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d04:	d114      	bne.n	8006d30 <UART_Transmit_IT+0x48>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d110      	bne.n	8006d30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	1c9a      	adds	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]
 8006d2e:	e008      	b.n	8006d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6211      	str	r1, [r2, #32]
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10f      	bne.n	8006d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e000      	b.n	8006d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
  }
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fe73 	bl	8006a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	@ 0x30
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b22      	cmp	r3, #34	@ 0x22
 8006dca:	f040 80ae 	bne.w	8006f2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd6:	d117      	bne.n	8006e08 <UART_Receive_IT+0x50>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d113      	bne.n	8006e08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e06:	e026      	b.n	8006e56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1a:	d007      	beq.n	8006e2c <UART_Receive_IT+0x74>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <UART_Receive_IT+0x82>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e008      	b.n	8006e4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4619      	mov	r1, r3
 8006e64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15d      	bne.n	8006f26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0220 	bic.w	r2, r2, #32
 8006e78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d135      	bne.n	8006f1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f023 0310 	bic.w	r3, r3, #16
 8006ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed6:	623a      	str	r2, [r7, #32]
 8006ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	69f9      	ldr	r1, [r7, #28]
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e5      	bne.n	8006eb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d10a      	bne.n	8006f0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff fdd1 	bl	8006abc <HAL_UARTEx_RxEventCallback>
 8006f1a:	e002      	b.n	8006f22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7fa fe75 	bl	8001c0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e002      	b.n	8006f2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e000      	b.n	8006f2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3730      	adds	r7, #48	@ 0x30
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f38:	b0c0      	sub	sp, #256	@ 0x100
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f50:	68d9      	ldr	r1, [r3, #12]
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	ea40 0301 	orr.w	r3, r0, r1
 8006f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f8c:	f021 010c 	bic.w	r1, r1, #12
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fae:	6999      	ldr	r1, [r3, #24]
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	ea40 0301 	orr.w	r3, r0, r1
 8006fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b8f      	ldr	r3, [pc, #572]	@ (8007200 <UART_SetConfig+0x2cc>)
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d005      	beq.n	8006fd4 <UART_SetConfig+0xa0>
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b8d      	ldr	r3, [pc, #564]	@ (8007204 <UART_SetConfig+0x2d0>)
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d104      	bne.n	8006fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fd4:	f7fe fc28 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 8006fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fdc:	e003      	b.n	8006fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fde:	f7fe fc0f 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 8006fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff0:	f040 810c 	bne.w	800720c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	1891      	adds	r1, r2, r2
 800700c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800700e:	415b      	adcs	r3, r3
 8007010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007016:	4621      	mov	r1, r4
 8007018:	eb12 0801 	adds.w	r8, r2, r1
 800701c:	4629      	mov	r1, r5
 800701e:	eb43 0901 	adc.w	r9, r3, r1
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800702e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007036:	4690      	mov	r8, r2
 8007038:	4699      	mov	r9, r3
 800703a:	4623      	mov	r3, r4
 800703c:	eb18 0303 	adds.w	r3, r8, r3
 8007040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007044:	462b      	mov	r3, r5
 8007046:	eb49 0303 	adc.w	r3, r9, r3
 800704a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800704e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800705a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800705e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007062:	460b      	mov	r3, r1
 8007064:	18db      	adds	r3, r3, r3
 8007066:	653b      	str	r3, [r7, #80]	@ 0x50
 8007068:	4613      	mov	r3, r2
 800706a:	eb42 0303 	adc.w	r3, r2, r3
 800706e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007078:	f7f9 fdb6 	bl	8000be8 <__aeabi_uldivmod>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4b61      	ldr	r3, [pc, #388]	@ (8007208 <UART_SetConfig+0x2d4>)
 8007082:	fba3 2302 	umull	r2, r3, r3, r2
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	011c      	lsls	r4, r3, #4
 800708a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800708e:	2200      	movs	r2, #0
 8007090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007094:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800709c:	4642      	mov	r2, r8
 800709e:	464b      	mov	r3, r9
 80070a0:	1891      	adds	r1, r2, r2
 80070a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070a4:	415b      	adcs	r3, r3
 80070a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070ac:	4641      	mov	r1, r8
 80070ae:	eb12 0a01 	adds.w	sl, r2, r1
 80070b2:	4649      	mov	r1, r9
 80070b4:	eb43 0b01 	adc.w	fp, r3, r1
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070cc:	4692      	mov	sl, r2
 80070ce:	469b      	mov	fp, r3
 80070d0:	4643      	mov	r3, r8
 80070d2:	eb1a 0303 	adds.w	r3, sl, r3
 80070d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070da:	464b      	mov	r3, r9
 80070dc:	eb4b 0303 	adc.w	r3, fp, r3
 80070e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070f8:	460b      	mov	r3, r1
 80070fa:	18db      	adds	r3, r3, r3
 80070fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070fe:	4613      	mov	r3, r2
 8007100:	eb42 0303 	adc.w	r3, r2, r3
 8007104:	647b      	str	r3, [r7, #68]	@ 0x44
 8007106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800710a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800710e:	f7f9 fd6b 	bl	8000be8 <__aeabi_uldivmod>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4611      	mov	r1, r2
 8007118:	4b3b      	ldr	r3, [pc, #236]	@ (8007208 <UART_SetConfig+0x2d4>)
 800711a:	fba3 2301 	umull	r2, r3, r3, r1
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	2264      	movs	r2, #100	@ 0x64
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	1acb      	subs	r3, r1, r3
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800712e:	4b36      	ldr	r3, [pc, #216]	@ (8007208 <UART_SetConfig+0x2d4>)
 8007130:	fba3 2302 	umull	r2, r3, r3, r2
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800713c:	441c      	add	r4, r3
 800713e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007142:	2200      	movs	r2, #0
 8007144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007148:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800714c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007150:	4642      	mov	r2, r8
 8007152:	464b      	mov	r3, r9
 8007154:	1891      	adds	r1, r2, r2
 8007156:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007158:	415b      	adcs	r3, r3
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800715c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007160:	4641      	mov	r1, r8
 8007162:	1851      	adds	r1, r2, r1
 8007164:	6339      	str	r1, [r7, #48]	@ 0x30
 8007166:	4649      	mov	r1, r9
 8007168:	414b      	adcs	r3, r1
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007178:	4659      	mov	r1, fp
 800717a:	00cb      	lsls	r3, r1, #3
 800717c:	4651      	mov	r1, sl
 800717e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007182:	4651      	mov	r1, sl
 8007184:	00ca      	lsls	r2, r1, #3
 8007186:	4610      	mov	r0, r2
 8007188:	4619      	mov	r1, r3
 800718a:	4603      	mov	r3, r0
 800718c:	4642      	mov	r2, r8
 800718e:	189b      	adds	r3, r3, r2
 8007190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007194:	464b      	mov	r3, r9
 8007196:	460a      	mov	r2, r1
 8007198:	eb42 0303 	adc.w	r3, r2, r3
 800719c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071b4:	460b      	mov	r3, r1
 80071b6:	18db      	adds	r3, r3, r3
 80071b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071ba:	4613      	mov	r3, r2
 80071bc:	eb42 0303 	adc.w	r3, r2, r3
 80071c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071ca:	f7f9 fd0d 	bl	8000be8 <__aeabi_uldivmod>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007208 <UART_SetConfig+0x2d4>)
 80071d4:	fba3 1302 	umull	r1, r3, r3, r2
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	2164      	movs	r1, #100	@ 0x64
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	3332      	adds	r3, #50	@ 0x32
 80071e6:	4a08      	ldr	r2, [pc, #32]	@ (8007208 <UART_SetConfig+0x2d4>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	f003 0207 	and.w	r2, r3, #7
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4422      	add	r2, r4
 80071fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071fc:	e106      	b.n	800740c <UART_SetConfig+0x4d8>
 80071fe:	bf00      	nop
 8007200:	40011000 	.word	0x40011000
 8007204:	40011400 	.word	0x40011400
 8007208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800720c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007210:	2200      	movs	r2, #0
 8007212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007216:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800721a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800721e:	4642      	mov	r2, r8
 8007220:	464b      	mov	r3, r9
 8007222:	1891      	adds	r1, r2, r2
 8007224:	6239      	str	r1, [r7, #32]
 8007226:	415b      	adcs	r3, r3
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
 800722a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800722e:	4641      	mov	r1, r8
 8007230:	1854      	adds	r4, r2, r1
 8007232:	4649      	mov	r1, r9
 8007234:	eb43 0501 	adc.w	r5, r3, r1
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	00eb      	lsls	r3, r5, #3
 8007242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007246:	00e2      	lsls	r2, r4, #3
 8007248:	4614      	mov	r4, r2
 800724a:	461d      	mov	r5, r3
 800724c:	4643      	mov	r3, r8
 800724e:	18e3      	adds	r3, r4, r3
 8007250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007254:	464b      	mov	r3, r9
 8007256:	eb45 0303 	adc.w	r3, r5, r3
 800725a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800725e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800726a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800727a:	4629      	mov	r1, r5
 800727c:	008b      	lsls	r3, r1, #2
 800727e:	4621      	mov	r1, r4
 8007280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007284:	4621      	mov	r1, r4
 8007286:	008a      	lsls	r2, r1, #2
 8007288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800728c:	f7f9 fcac 	bl	8000be8 <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4b60      	ldr	r3, [pc, #384]	@ (8007418 <UART_SetConfig+0x4e4>)
 8007296:	fba3 2302 	umull	r2, r3, r3, r2
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	011c      	lsls	r4, r3, #4
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	61b9      	str	r1, [r7, #24]
 80072b8:	415b      	adcs	r3, r3
 80072ba:	61fb      	str	r3, [r7, #28]
 80072bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c0:	4641      	mov	r1, r8
 80072c2:	1851      	adds	r1, r2, r1
 80072c4:	6139      	str	r1, [r7, #16]
 80072c6:	4649      	mov	r1, r9
 80072c8:	414b      	adcs	r3, r1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072d8:	4659      	mov	r1, fp
 80072da:	00cb      	lsls	r3, r1, #3
 80072dc:	4651      	mov	r1, sl
 80072de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e2:	4651      	mov	r1, sl
 80072e4:	00ca      	lsls	r2, r1, #3
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	4642      	mov	r2, r8
 80072ee:	189b      	adds	r3, r3, r2
 80072f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072f4:	464b      	mov	r3, r9
 80072f6:	460a      	mov	r2, r1
 80072f8:	eb42 0303 	adc.w	r3, r2, r3
 80072fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	67bb      	str	r3, [r7, #120]	@ 0x78
 800730a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007318:	4649      	mov	r1, r9
 800731a:	008b      	lsls	r3, r1, #2
 800731c:	4641      	mov	r1, r8
 800731e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007322:	4641      	mov	r1, r8
 8007324:	008a      	lsls	r2, r1, #2
 8007326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800732a:	f7f9 fc5d 	bl	8000be8 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4611      	mov	r1, r2
 8007334:	4b38      	ldr	r3, [pc, #224]	@ (8007418 <UART_SetConfig+0x4e4>)
 8007336:	fba3 2301 	umull	r2, r3, r3, r1
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	2264      	movs	r2, #100	@ 0x64
 800733e:	fb02 f303 	mul.w	r3, r2, r3
 8007342:	1acb      	subs	r3, r1, r3
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	3332      	adds	r3, #50	@ 0x32
 8007348:	4a33      	ldr	r2, [pc, #204]	@ (8007418 <UART_SetConfig+0x4e4>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007354:	441c      	add	r4, r3
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	673b      	str	r3, [r7, #112]	@ 0x70
 800735e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007360:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	415b      	adcs	r3, r3
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007374:	4641      	mov	r1, r8
 8007376:	1851      	adds	r1, r2, r1
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	4649      	mov	r1, r9
 800737c:	414b      	adcs	r3, r1
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800738c:	4659      	mov	r1, fp
 800738e:	00cb      	lsls	r3, r1, #3
 8007390:	4651      	mov	r1, sl
 8007392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007396:	4651      	mov	r1, sl
 8007398:	00ca      	lsls	r2, r1, #3
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	4642      	mov	r2, r8
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073a6:	464b      	mov	r3, r9
 80073a8:	460a      	mov	r2, r1
 80073aa:	eb42 0303 	adc.w	r3, r2, r3
 80073ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80073ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073c8:	4649      	mov	r1, r9
 80073ca:	008b      	lsls	r3, r1, #2
 80073cc:	4641      	mov	r1, r8
 80073ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073d2:	4641      	mov	r1, r8
 80073d4:	008a      	lsls	r2, r1, #2
 80073d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073da:	f7f9 fc05 	bl	8000be8 <__aeabi_uldivmod>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <UART_SetConfig+0x4e4>)
 80073e4:	fba3 1302 	umull	r1, r3, r3, r2
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	2164      	movs	r1, #100	@ 0x64
 80073ec:	fb01 f303 	mul.w	r3, r1, r3
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	3332      	adds	r3, #50	@ 0x32
 80073f6:	4a08      	ldr	r2, [pc, #32]	@ (8007418 <UART_SetConfig+0x4e4>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f003 020f 	and.w	r2, r3, #15
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4422      	add	r2, r4
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007412:	46bd      	mov	sp, r7
 8007414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007418:	51eb851f 	.word	0x51eb851f

0800741c <malloc>:
 800741c:	4b02      	ldr	r3, [pc, #8]	@ (8007428 <malloc+0xc>)
 800741e:	4601      	mov	r1, r0
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f000 b825 	b.w	8007470 <_malloc_r>
 8007426:	bf00      	nop
 8007428:	20000018 	.word	0x20000018

0800742c <sbrk_aligned>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4e0f      	ldr	r6, [pc, #60]	@ (800746c <sbrk_aligned+0x40>)
 8007430:	460c      	mov	r4, r1
 8007432:	6831      	ldr	r1, [r6, #0]
 8007434:	4605      	mov	r5, r0
 8007436:	b911      	cbnz	r1, 800743e <sbrk_aligned+0x12>
 8007438:	f000 fe8a 	bl	8008150 <_sbrk_r>
 800743c:	6030      	str	r0, [r6, #0]
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 fe85 	bl	8008150 <_sbrk_r>
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	d103      	bne.n	8007452 <sbrk_aligned+0x26>
 800744a:	f04f 34ff 	mov.w	r4, #4294967295
 800744e:	4620      	mov	r0, r4
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	1cc4      	adds	r4, r0, #3
 8007454:	f024 0403 	bic.w	r4, r4, #3
 8007458:	42a0      	cmp	r0, r4
 800745a:	d0f8      	beq.n	800744e <sbrk_aligned+0x22>
 800745c:	1a21      	subs	r1, r4, r0
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fe76 	bl	8008150 <_sbrk_r>
 8007464:	3001      	adds	r0, #1
 8007466:	d1f2      	bne.n	800744e <sbrk_aligned+0x22>
 8007468:	e7ef      	b.n	800744a <sbrk_aligned+0x1e>
 800746a:	bf00      	nop
 800746c:	20000390 	.word	0x20000390

08007470 <_malloc_r>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	1ccd      	adds	r5, r1, #3
 8007476:	f025 0503 	bic.w	r5, r5, #3
 800747a:	3508      	adds	r5, #8
 800747c:	2d0c      	cmp	r5, #12
 800747e:	bf38      	it	cc
 8007480:	250c      	movcc	r5, #12
 8007482:	2d00      	cmp	r5, #0
 8007484:	4606      	mov	r6, r0
 8007486:	db01      	blt.n	800748c <_malloc_r+0x1c>
 8007488:	42a9      	cmp	r1, r5
 800748a:	d904      	bls.n	8007496 <_malloc_r+0x26>
 800748c:	230c      	movs	r3, #12
 800748e:	6033      	str	r3, [r6, #0]
 8007490:	2000      	movs	r0, #0
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800756c <_malloc_r+0xfc>
 800749a:	f000 f869 	bl	8007570 <__malloc_lock>
 800749e:	f8d8 3000 	ldr.w	r3, [r8]
 80074a2:	461c      	mov	r4, r3
 80074a4:	bb44      	cbnz	r4, 80074f8 <_malloc_r+0x88>
 80074a6:	4629      	mov	r1, r5
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ffbf 	bl	800742c <sbrk_aligned>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	4604      	mov	r4, r0
 80074b2:	d158      	bne.n	8007566 <_malloc_r+0xf6>
 80074b4:	f8d8 4000 	ldr.w	r4, [r8]
 80074b8:	4627      	mov	r7, r4
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	d143      	bne.n	8007546 <_malloc_r+0xd6>
 80074be:	2c00      	cmp	r4, #0
 80074c0:	d04b      	beq.n	800755a <_malloc_r+0xea>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	4639      	mov	r1, r7
 80074c6:	4630      	mov	r0, r6
 80074c8:	eb04 0903 	add.w	r9, r4, r3
 80074cc:	f000 fe40 	bl	8008150 <_sbrk_r>
 80074d0:	4581      	cmp	r9, r0
 80074d2:	d142      	bne.n	800755a <_malloc_r+0xea>
 80074d4:	6821      	ldr	r1, [r4, #0]
 80074d6:	1a6d      	subs	r5, r5, r1
 80074d8:	4629      	mov	r1, r5
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ffa6 	bl	800742c <sbrk_aligned>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d03a      	beq.n	800755a <_malloc_r+0xea>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	442b      	add	r3, r5
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	f8d8 3000 	ldr.w	r3, [r8]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	bb62      	cbnz	r2, 800754c <_malloc_r+0xdc>
 80074f2:	f8c8 7000 	str.w	r7, [r8]
 80074f6:	e00f      	b.n	8007518 <_malloc_r+0xa8>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	1b52      	subs	r2, r2, r5
 80074fc:	d420      	bmi.n	8007540 <_malloc_r+0xd0>
 80074fe:	2a0b      	cmp	r2, #11
 8007500:	d917      	bls.n	8007532 <_malloc_r+0xc2>
 8007502:	1961      	adds	r1, r4, r5
 8007504:	42a3      	cmp	r3, r4
 8007506:	6025      	str	r5, [r4, #0]
 8007508:	bf18      	it	ne
 800750a:	6059      	strne	r1, [r3, #4]
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	bf08      	it	eq
 8007510:	f8c8 1000 	streq.w	r1, [r8]
 8007514:	5162      	str	r2, [r4, r5]
 8007516:	604b      	str	r3, [r1, #4]
 8007518:	4630      	mov	r0, r6
 800751a:	f000 f82f 	bl	800757c <__malloc_unlock>
 800751e:	f104 000b 	add.w	r0, r4, #11
 8007522:	1d23      	adds	r3, r4, #4
 8007524:	f020 0007 	bic.w	r0, r0, #7
 8007528:	1ac2      	subs	r2, r0, r3
 800752a:	bf1c      	itt	ne
 800752c:	1a1b      	subne	r3, r3, r0
 800752e:	50a3      	strne	r3, [r4, r2]
 8007530:	e7af      	b.n	8007492 <_malloc_r+0x22>
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	42a3      	cmp	r3, r4
 8007536:	bf0c      	ite	eq
 8007538:	f8c8 2000 	streq.w	r2, [r8]
 800753c:	605a      	strne	r2, [r3, #4]
 800753e:	e7eb      	b.n	8007518 <_malloc_r+0xa8>
 8007540:	4623      	mov	r3, r4
 8007542:	6864      	ldr	r4, [r4, #4]
 8007544:	e7ae      	b.n	80074a4 <_malloc_r+0x34>
 8007546:	463c      	mov	r4, r7
 8007548:	687f      	ldr	r7, [r7, #4]
 800754a:	e7b6      	b.n	80074ba <_malloc_r+0x4a>
 800754c:	461a      	mov	r2, r3
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	42a3      	cmp	r3, r4
 8007552:	d1fb      	bne.n	800754c <_malloc_r+0xdc>
 8007554:	2300      	movs	r3, #0
 8007556:	6053      	str	r3, [r2, #4]
 8007558:	e7de      	b.n	8007518 <_malloc_r+0xa8>
 800755a:	230c      	movs	r3, #12
 800755c:	6033      	str	r3, [r6, #0]
 800755e:	4630      	mov	r0, r6
 8007560:	f000 f80c 	bl	800757c <__malloc_unlock>
 8007564:	e794      	b.n	8007490 <_malloc_r+0x20>
 8007566:	6005      	str	r5, [r0, #0]
 8007568:	e7d6      	b.n	8007518 <_malloc_r+0xa8>
 800756a:	bf00      	nop
 800756c:	20000394 	.word	0x20000394

08007570 <__malloc_lock>:
 8007570:	4801      	ldr	r0, [pc, #4]	@ (8007578 <__malloc_lock+0x8>)
 8007572:	f000 be3a 	b.w	80081ea <__retarget_lock_acquire_recursive>
 8007576:	bf00      	nop
 8007578:	200004d8 	.word	0x200004d8

0800757c <__malloc_unlock>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__malloc_unlock+0x8>)
 800757e:	f000 be35 	b.w	80081ec <__retarget_lock_release_recursive>
 8007582:	bf00      	nop
 8007584:	200004d8 	.word	0x200004d8

08007588 <__cvt>:
 8007588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	ec57 6b10 	vmov	r6, r7, d0
 8007590:	2f00      	cmp	r7, #0
 8007592:	460c      	mov	r4, r1
 8007594:	4619      	mov	r1, r3
 8007596:	463b      	mov	r3, r7
 8007598:	bfbb      	ittet	lt
 800759a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800759e:	461f      	movlt	r7, r3
 80075a0:	2300      	movge	r3, #0
 80075a2:	232d      	movlt	r3, #45	@ 0x2d
 80075a4:	700b      	strb	r3, [r1, #0]
 80075a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80075ac:	4691      	mov	r9, r2
 80075ae:	f023 0820 	bic.w	r8, r3, #32
 80075b2:	bfbc      	itt	lt
 80075b4:	4632      	movlt	r2, r6
 80075b6:	4616      	movlt	r6, r2
 80075b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075bc:	d005      	beq.n	80075ca <__cvt+0x42>
 80075be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075c2:	d100      	bne.n	80075c6 <__cvt+0x3e>
 80075c4:	3401      	adds	r4, #1
 80075c6:	2102      	movs	r1, #2
 80075c8:	e000      	b.n	80075cc <__cvt+0x44>
 80075ca:	2103      	movs	r1, #3
 80075cc:	ab03      	add	r3, sp, #12
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	ab02      	add	r3, sp, #8
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	ec47 6b10 	vmov	d0, r6, r7
 80075d8:	4653      	mov	r3, sl
 80075da:	4622      	mov	r2, r4
 80075dc:	f000 fe90 	bl	8008300 <_dtoa_r>
 80075e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075e4:	4605      	mov	r5, r0
 80075e6:	d119      	bne.n	800761c <__cvt+0x94>
 80075e8:	f019 0f01 	tst.w	r9, #1
 80075ec:	d00e      	beq.n	800760c <__cvt+0x84>
 80075ee:	eb00 0904 	add.w	r9, r0, r4
 80075f2:	2200      	movs	r2, #0
 80075f4:	2300      	movs	r3, #0
 80075f6:	4630      	mov	r0, r6
 80075f8:	4639      	mov	r1, r7
 80075fa:	f7f9 fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 80075fe:	b108      	cbz	r0, 8007604 <__cvt+0x7c>
 8007600:	f8cd 900c 	str.w	r9, [sp, #12]
 8007604:	2230      	movs	r2, #48	@ 0x30
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	454b      	cmp	r3, r9
 800760a:	d31e      	bcc.n	800764a <__cvt+0xc2>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007610:	1b5b      	subs	r3, r3, r5
 8007612:	4628      	mov	r0, r5
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	b004      	add	sp, #16
 8007618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007620:	eb00 0904 	add.w	r9, r0, r4
 8007624:	d1e5      	bne.n	80075f2 <__cvt+0x6a>
 8007626:	7803      	ldrb	r3, [r0, #0]
 8007628:	2b30      	cmp	r3, #48	@ 0x30
 800762a:	d10a      	bne.n	8007642 <__cvt+0xba>
 800762c:	2200      	movs	r2, #0
 800762e:	2300      	movs	r3, #0
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f9 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007638:	b918      	cbnz	r0, 8007642 <__cvt+0xba>
 800763a:	f1c4 0401 	rsb	r4, r4, #1
 800763e:	f8ca 4000 	str.w	r4, [sl]
 8007642:	f8da 3000 	ldr.w	r3, [sl]
 8007646:	4499      	add	r9, r3
 8007648:	e7d3      	b.n	80075f2 <__cvt+0x6a>
 800764a:	1c59      	adds	r1, r3, #1
 800764c:	9103      	str	r1, [sp, #12]
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	e7d9      	b.n	8007606 <__cvt+0x7e>

08007652 <__exponent>:
 8007652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007654:	2900      	cmp	r1, #0
 8007656:	bfba      	itte	lt
 8007658:	4249      	neglt	r1, r1
 800765a:	232d      	movlt	r3, #45	@ 0x2d
 800765c:	232b      	movge	r3, #43	@ 0x2b
 800765e:	2909      	cmp	r1, #9
 8007660:	7002      	strb	r2, [r0, #0]
 8007662:	7043      	strb	r3, [r0, #1]
 8007664:	dd29      	ble.n	80076ba <__exponent+0x68>
 8007666:	f10d 0307 	add.w	r3, sp, #7
 800766a:	461d      	mov	r5, r3
 800766c:	270a      	movs	r7, #10
 800766e:	461a      	mov	r2, r3
 8007670:	fbb1 f6f7 	udiv	r6, r1, r7
 8007674:	fb07 1416 	mls	r4, r7, r6, r1
 8007678:	3430      	adds	r4, #48	@ 0x30
 800767a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800767e:	460c      	mov	r4, r1
 8007680:	2c63      	cmp	r4, #99	@ 0x63
 8007682:	f103 33ff 	add.w	r3, r3, #4294967295
 8007686:	4631      	mov	r1, r6
 8007688:	dcf1      	bgt.n	800766e <__exponent+0x1c>
 800768a:	3130      	adds	r1, #48	@ 0x30
 800768c:	1e94      	subs	r4, r2, #2
 800768e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007692:	1c41      	adds	r1, r0, #1
 8007694:	4623      	mov	r3, r4
 8007696:	42ab      	cmp	r3, r5
 8007698:	d30a      	bcc.n	80076b0 <__exponent+0x5e>
 800769a:	f10d 0309 	add.w	r3, sp, #9
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	42ac      	cmp	r4, r5
 80076a2:	bf88      	it	hi
 80076a4:	2300      	movhi	r3, #0
 80076a6:	3302      	adds	r3, #2
 80076a8:	4403      	add	r3, r0
 80076aa:	1a18      	subs	r0, r3, r0
 80076ac:	b003      	add	sp, #12
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076b8:	e7ed      	b.n	8007696 <__exponent+0x44>
 80076ba:	2330      	movs	r3, #48	@ 0x30
 80076bc:	3130      	adds	r1, #48	@ 0x30
 80076be:	7083      	strb	r3, [r0, #2]
 80076c0:	70c1      	strb	r1, [r0, #3]
 80076c2:	1d03      	adds	r3, r0, #4
 80076c4:	e7f1      	b.n	80076aa <__exponent+0x58>
	...

080076c8 <_printf_float>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	b08d      	sub	sp, #52	@ 0x34
 80076ce:	460c      	mov	r4, r1
 80076d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076d4:	4616      	mov	r6, r2
 80076d6:	461f      	mov	r7, r3
 80076d8:	4605      	mov	r5, r0
 80076da:	f000 fd01 	bl	80080e0 <_localeconv_r>
 80076de:	6803      	ldr	r3, [r0, #0]
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7f8 fdc4 	bl	8000270 <strlen>
 80076e8:	2300      	movs	r3, #0
 80076ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ec:	f8d8 3000 	ldr.w	r3, [r8]
 80076f0:	9005      	str	r0, [sp, #20]
 80076f2:	3307      	adds	r3, #7
 80076f4:	f023 0307 	bic.w	r3, r3, #7
 80076f8:	f103 0208 	add.w	r2, r3, #8
 80076fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007700:	f8d4 b000 	ldr.w	fp, [r4]
 8007704:	f8c8 2000 	str.w	r2, [r8]
 8007708:	e9d3 8900 	ldrd	r8, r9, [r3]
 800770c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007710:	9307      	str	r3, [sp, #28]
 8007712:	f8cd 8018 	str.w	r8, [sp, #24]
 8007716:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800771a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800771e:	4b9c      	ldr	r3, [pc, #624]	@ (8007990 <_printf_float+0x2c8>)
 8007720:	f04f 32ff 	mov.w	r2, #4294967295
 8007724:	f7f9 fa02 	bl	8000b2c <__aeabi_dcmpun>
 8007728:	bb70      	cbnz	r0, 8007788 <_printf_float+0xc0>
 800772a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800772e:	4b98      	ldr	r3, [pc, #608]	@ (8007990 <_printf_float+0x2c8>)
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	f7f9 f9dc 	bl	8000af0 <__aeabi_dcmple>
 8007738:	bb30      	cbnz	r0, 8007788 <_printf_float+0xc0>
 800773a:	2200      	movs	r2, #0
 800773c:	2300      	movs	r3, #0
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f9 f9cb 	bl	8000adc <__aeabi_dcmplt>
 8007746:	b110      	cbz	r0, 800774e <_printf_float+0x86>
 8007748:	232d      	movs	r3, #45	@ 0x2d
 800774a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800774e:	4a91      	ldr	r2, [pc, #580]	@ (8007994 <_printf_float+0x2cc>)
 8007750:	4b91      	ldr	r3, [pc, #580]	@ (8007998 <_printf_float+0x2d0>)
 8007752:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007756:	bf94      	ite	ls
 8007758:	4690      	movls	r8, r2
 800775a:	4698      	movhi	r8, r3
 800775c:	2303      	movs	r3, #3
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	f02b 0304 	bic.w	r3, fp, #4
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	f04f 0900 	mov.w	r9, #0
 800776a:	9700      	str	r7, [sp, #0]
 800776c:	4633      	mov	r3, r6
 800776e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f9d2 	bl	8007b1c <_printf_common>
 8007778:	3001      	adds	r0, #1
 800777a:	f040 808d 	bne.w	8007898 <_printf_float+0x1d0>
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	b00d      	add	sp, #52	@ 0x34
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007788:	4642      	mov	r2, r8
 800778a:	464b      	mov	r3, r9
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f9 f9cc 	bl	8000b2c <__aeabi_dcmpun>
 8007794:	b140      	cbz	r0, 80077a8 <_printf_float+0xe0>
 8007796:	464b      	mov	r3, r9
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfbc      	itt	lt
 800779c:	232d      	movlt	r3, #45	@ 0x2d
 800779e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077a2:	4a7e      	ldr	r2, [pc, #504]	@ (800799c <_printf_float+0x2d4>)
 80077a4:	4b7e      	ldr	r3, [pc, #504]	@ (80079a0 <_printf_float+0x2d8>)
 80077a6:	e7d4      	b.n	8007752 <_printf_float+0x8a>
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80077ae:	9206      	str	r2, [sp, #24]
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	d13b      	bne.n	800782c <_printf_float+0x164>
 80077b4:	2306      	movs	r3, #6
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80077bc:	2300      	movs	r3, #0
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80077c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077c8:	ab09      	add	r3, sp, #36	@ 0x24
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	6861      	ldr	r1, [r4, #4]
 80077ce:	ec49 8b10 	vmov	d0, r8, r9
 80077d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077d6:	4628      	mov	r0, r5
 80077d8:	f7ff fed6 	bl	8007588 <__cvt>
 80077dc:	9b06      	ldr	r3, [sp, #24]
 80077de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077e0:	2b47      	cmp	r3, #71	@ 0x47
 80077e2:	4680      	mov	r8, r0
 80077e4:	d129      	bne.n	800783a <_printf_float+0x172>
 80077e6:	1cc8      	adds	r0, r1, #3
 80077e8:	db02      	blt.n	80077f0 <_printf_float+0x128>
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	4299      	cmp	r1, r3
 80077ee:	dd41      	ble.n	8007874 <_printf_float+0x1ac>
 80077f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80077f4:	fa5f fa8a 	uxtb.w	sl, sl
 80077f8:	3901      	subs	r1, #1
 80077fa:	4652      	mov	r2, sl
 80077fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007800:	9109      	str	r1, [sp, #36]	@ 0x24
 8007802:	f7ff ff26 	bl	8007652 <__exponent>
 8007806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007808:	1813      	adds	r3, r2, r0
 800780a:	2a01      	cmp	r2, #1
 800780c:	4681      	mov	r9, r0
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	dc02      	bgt.n	8007818 <_printf_float+0x150>
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	07d2      	lsls	r2, r2, #31
 8007816:	d501      	bpl.n	800781c <_printf_float+0x154>
 8007818:	3301      	adds	r3, #1
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0a2      	beq.n	800776a <_printf_float+0xa2>
 8007824:	232d      	movs	r3, #45	@ 0x2d
 8007826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800782a:	e79e      	b.n	800776a <_printf_float+0xa2>
 800782c:	9a06      	ldr	r2, [sp, #24]
 800782e:	2a47      	cmp	r2, #71	@ 0x47
 8007830:	d1c2      	bne.n	80077b8 <_printf_float+0xf0>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1c0      	bne.n	80077b8 <_printf_float+0xf0>
 8007836:	2301      	movs	r3, #1
 8007838:	e7bd      	b.n	80077b6 <_printf_float+0xee>
 800783a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800783e:	d9db      	bls.n	80077f8 <_printf_float+0x130>
 8007840:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007844:	d118      	bne.n	8007878 <_printf_float+0x1b0>
 8007846:	2900      	cmp	r1, #0
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	dd0b      	ble.n	8007864 <_printf_float+0x19c>
 800784c:	6121      	str	r1, [r4, #16]
 800784e:	b913      	cbnz	r3, 8007856 <_printf_float+0x18e>
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	07d0      	lsls	r0, r2, #31
 8007854:	d502      	bpl.n	800785c <_printf_float+0x194>
 8007856:	3301      	adds	r3, #1
 8007858:	440b      	add	r3, r1
 800785a:	6123      	str	r3, [r4, #16]
 800785c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	e7db      	b.n	800781c <_printf_float+0x154>
 8007864:	b913      	cbnz	r3, 800786c <_printf_float+0x1a4>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	07d2      	lsls	r2, r2, #31
 800786a:	d501      	bpl.n	8007870 <_printf_float+0x1a8>
 800786c:	3302      	adds	r3, #2
 800786e:	e7f4      	b.n	800785a <_printf_float+0x192>
 8007870:	2301      	movs	r3, #1
 8007872:	e7f2      	b.n	800785a <_printf_float+0x192>
 8007874:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787a:	4299      	cmp	r1, r3
 800787c:	db05      	blt.n	800788a <_printf_float+0x1c2>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	6121      	str	r1, [r4, #16]
 8007882:	07d8      	lsls	r0, r3, #31
 8007884:	d5ea      	bpl.n	800785c <_printf_float+0x194>
 8007886:	1c4b      	adds	r3, r1, #1
 8007888:	e7e7      	b.n	800785a <_printf_float+0x192>
 800788a:	2900      	cmp	r1, #0
 800788c:	bfd4      	ite	le
 800788e:	f1c1 0202 	rsble	r2, r1, #2
 8007892:	2201      	movgt	r2, #1
 8007894:	4413      	add	r3, r2
 8007896:	e7e0      	b.n	800785a <_printf_float+0x192>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	055a      	lsls	r2, r3, #21
 800789c:	d407      	bmi.n	80078ae <_printf_float+0x1e6>
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	4642      	mov	r2, r8
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	d12b      	bne.n	8007904 <_printf_float+0x23c>
 80078ac:	e767      	b.n	800777e <_printf_float+0xb6>
 80078ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078b2:	f240 80dd 	bls.w	8007a70 <_printf_float+0x3a8>
 80078b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ba:	2200      	movs	r2, #0
 80078bc:	2300      	movs	r3, #0
 80078be:	f7f9 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d033      	beq.n	800792e <_printf_float+0x266>
 80078c6:	4a37      	ldr	r2, [pc, #220]	@ (80079a4 <_printf_float+0x2dc>)
 80078c8:	2301      	movs	r3, #1
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	f43f af54 	beq.w	800777e <_printf_float+0xb6>
 80078d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078da:	4543      	cmp	r3, r8
 80078dc:	db02      	blt.n	80078e4 <_printf_float+0x21c>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	07d8      	lsls	r0, r3, #31
 80078e2:	d50f      	bpl.n	8007904 <_printf_float+0x23c>
 80078e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f af45 	beq.w	800777e <_printf_float+0xb6>
 80078f4:	f04f 0900 	mov.w	r9, #0
 80078f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80078fc:	f104 0a1a 	add.w	sl, r4, #26
 8007900:	45c8      	cmp	r8, r9
 8007902:	dc09      	bgt.n	8007918 <_printf_float+0x250>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	079b      	lsls	r3, r3, #30
 8007908:	f100 8103 	bmi.w	8007b12 <_printf_float+0x44a>
 800790c:	68e0      	ldr	r0, [r4, #12]
 800790e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007910:	4298      	cmp	r0, r3
 8007912:	bfb8      	it	lt
 8007914:	4618      	movlt	r0, r3
 8007916:	e734      	b.n	8007782 <_printf_float+0xba>
 8007918:	2301      	movs	r3, #1
 800791a:	4652      	mov	r2, sl
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af2b 	beq.w	800777e <_printf_float+0xb6>
 8007928:	f109 0901 	add.w	r9, r9, #1
 800792c:	e7e8      	b.n	8007900 <_printf_float+0x238>
 800792e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc39      	bgt.n	80079a8 <_printf_float+0x2e0>
 8007934:	4a1b      	ldr	r2, [pc, #108]	@ (80079a4 <_printf_float+0x2dc>)
 8007936:	2301      	movs	r3, #1
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f af1d 	beq.w	800777e <_printf_float+0xb6>
 8007944:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007948:	ea59 0303 	orrs.w	r3, r9, r3
 800794c:	d102      	bne.n	8007954 <_printf_float+0x28c>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	07d9      	lsls	r1, r3, #31
 8007952:	d5d7      	bpl.n	8007904 <_printf_float+0x23c>
 8007954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f af0d 	beq.w	800777e <_printf_float+0xb6>
 8007964:	f04f 0a00 	mov.w	sl, #0
 8007968:	f104 0b1a 	add.w	fp, r4, #26
 800796c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800796e:	425b      	negs	r3, r3
 8007970:	4553      	cmp	r3, sl
 8007972:	dc01      	bgt.n	8007978 <_printf_float+0x2b0>
 8007974:	464b      	mov	r3, r9
 8007976:	e793      	b.n	80078a0 <_printf_float+0x1d8>
 8007978:	2301      	movs	r3, #1
 800797a:	465a      	mov	r2, fp
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f aefb 	beq.w	800777e <_printf_float+0xb6>
 8007988:	f10a 0a01 	add.w	sl, sl, #1
 800798c:	e7ee      	b.n	800796c <_printf_float+0x2a4>
 800798e:	bf00      	nop
 8007990:	7fefffff 	.word	0x7fefffff
 8007994:	0800a520 	.word	0x0800a520
 8007998:	0800a524 	.word	0x0800a524
 800799c:	0800a528 	.word	0x0800a528
 80079a0:	0800a52c 	.word	0x0800a52c
 80079a4:	0800a530 	.word	0x0800a530
 80079a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079ae:	4553      	cmp	r3, sl
 80079b0:	bfa8      	it	ge
 80079b2:	4653      	movge	r3, sl
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	4699      	mov	r9, r3
 80079b8:	dc36      	bgt.n	8007a28 <_printf_float+0x360>
 80079ba:	f04f 0b00 	mov.w	fp, #0
 80079be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c2:	f104 021a 	add.w	r2, r4, #26
 80079c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079c8:	9306      	str	r3, [sp, #24]
 80079ca:	eba3 0309 	sub.w	r3, r3, r9
 80079ce:	455b      	cmp	r3, fp
 80079d0:	dc31      	bgt.n	8007a36 <_printf_float+0x36e>
 80079d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d4:	459a      	cmp	sl, r3
 80079d6:	dc3a      	bgt.n	8007a4e <_printf_float+0x386>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	07da      	lsls	r2, r3, #31
 80079dc:	d437      	bmi.n	8007a4e <_printf_float+0x386>
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	ebaa 0903 	sub.w	r9, sl, r3
 80079e4:	9b06      	ldr	r3, [sp, #24]
 80079e6:	ebaa 0303 	sub.w	r3, sl, r3
 80079ea:	4599      	cmp	r9, r3
 80079ec:	bfa8      	it	ge
 80079ee:	4699      	movge	r9, r3
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	dc33      	bgt.n	8007a5e <_printf_float+0x396>
 80079f6:	f04f 0800 	mov.w	r8, #0
 80079fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079fe:	f104 0b1a 	add.w	fp, r4, #26
 8007a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a04:	ebaa 0303 	sub.w	r3, sl, r3
 8007a08:	eba3 0309 	sub.w	r3, r3, r9
 8007a0c:	4543      	cmp	r3, r8
 8007a0e:	f77f af79 	ble.w	8007904 <_printf_float+0x23c>
 8007a12:	2301      	movs	r3, #1
 8007a14:	465a      	mov	r2, fp
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f43f aeae 	beq.w	800777e <_printf_float+0xb6>
 8007a22:	f108 0801 	add.w	r8, r8, #1
 8007a26:	e7ec      	b.n	8007a02 <_printf_float+0x33a>
 8007a28:	4642      	mov	r2, r8
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	d1c2      	bne.n	80079ba <_printf_float+0x2f2>
 8007a34:	e6a3      	b.n	800777e <_printf_float+0xb6>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	9206      	str	r2, [sp, #24]
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f ae9c 	beq.w	800777e <_printf_float+0xb6>
 8007a46:	9a06      	ldr	r2, [sp, #24]
 8007a48:	f10b 0b01 	add.w	fp, fp, #1
 8007a4c:	e7bb      	b.n	80079c6 <_printf_float+0x2fe>
 8007a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d1c0      	bne.n	80079de <_printf_float+0x316>
 8007a5c:	e68f      	b.n	800777e <_printf_float+0xb6>
 8007a5e:	9a06      	ldr	r2, [sp, #24]
 8007a60:	464b      	mov	r3, r9
 8007a62:	4442      	add	r2, r8
 8007a64:	4631      	mov	r1, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b8      	blx	r7
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d1c3      	bne.n	80079f6 <_printf_float+0x32e>
 8007a6e:	e686      	b.n	800777e <_printf_float+0xb6>
 8007a70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a74:	f1ba 0f01 	cmp.w	sl, #1
 8007a78:	dc01      	bgt.n	8007a7e <_printf_float+0x3b6>
 8007a7a:	07db      	lsls	r3, r3, #31
 8007a7c:	d536      	bpl.n	8007aec <_printf_float+0x424>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4642      	mov	r2, r8
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae78 	beq.w	800777e <_printf_float+0xb6>
 8007a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f ae70 	beq.w	800777e <_printf_float+0xb6>
 8007a9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aaa:	f7f9 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aae:	b9c0      	cbnz	r0, 8007ae2 <_printf_float+0x41a>
 8007ab0:	4653      	mov	r3, sl
 8007ab2:	f108 0201 	add.w	r2, r8, #1
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	d10c      	bne.n	8007ada <_printf_float+0x412>
 8007ac0:	e65d      	b.n	800777e <_printf_float+0xb6>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	465a      	mov	r2, fp
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	f43f ae56 	beq.w	800777e <_printf_float+0xb6>
 8007ad2:	f108 0801 	add.w	r8, r8, #1
 8007ad6:	45d0      	cmp	r8, sl
 8007ad8:	dbf3      	blt.n	8007ac2 <_printf_float+0x3fa>
 8007ada:	464b      	mov	r3, r9
 8007adc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ae0:	e6df      	b.n	80078a2 <_printf_float+0x1da>
 8007ae2:	f04f 0800 	mov.w	r8, #0
 8007ae6:	f104 0b1a 	add.w	fp, r4, #26
 8007aea:	e7f4      	b.n	8007ad6 <_printf_float+0x40e>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4642      	mov	r2, r8
 8007af0:	e7e1      	b.n	8007ab6 <_printf_float+0x3ee>
 8007af2:	2301      	movs	r3, #1
 8007af4:	464a      	mov	r2, r9
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	f43f ae3e 	beq.w	800777e <_printf_float+0xb6>
 8007b02:	f108 0801 	add.w	r8, r8, #1
 8007b06:	68e3      	ldr	r3, [r4, #12]
 8007b08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b0a:	1a5b      	subs	r3, r3, r1
 8007b0c:	4543      	cmp	r3, r8
 8007b0e:	dcf0      	bgt.n	8007af2 <_printf_float+0x42a>
 8007b10:	e6fc      	b.n	800790c <_printf_float+0x244>
 8007b12:	f04f 0800 	mov.w	r8, #0
 8007b16:	f104 0919 	add.w	r9, r4, #25
 8007b1a:	e7f4      	b.n	8007b06 <_printf_float+0x43e>

08007b1c <_printf_common>:
 8007b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	4616      	mov	r6, r2
 8007b22:	4698      	mov	r8, r3
 8007b24:	688a      	ldr	r2, [r1, #8]
 8007b26:	690b      	ldr	r3, [r1, #16]
 8007b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	bfb8      	it	lt
 8007b30:	4613      	movlt	r3, r2
 8007b32:	6033      	str	r3, [r6, #0]
 8007b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b38:	4607      	mov	r7, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	b10a      	cbz	r2, 8007b42 <_printf_common+0x26>
 8007b3e:	3301      	adds	r3, #1
 8007b40:	6033      	str	r3, [r6, #0]
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	0699      	lsls	r1, r3, #26
 8007b46:	bf42      	ittt	mi
 8007b48:	6833      	ldrmi	r3, [r6, #0]
 8007b4a:	3302      	addmi	r3, #2
 8007b4c:	6033      	strmi	r3, [r6, #0]
 8007b4e:	6825      	ldr	r5, [r4, #0]
 8007b50:	f015 0506 	ands.w	r5, r5, #6
 8007b54:	d106      	bne.n	8007b64 <_printf_common+0x48>
 8007b56:	f104 0a19 	add.w	sl, r4, #25
 8007b5a:	68e3      	ldr	r3, [r4, #12]
 8007b5c:	6832      	ldr	r2, [r6, #0]
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	42ab      	cmp	r3, r5
 8007b62:	dc26      	bgt.n	8007bb2 <_printf_common+0x96>
 8007b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	3b00      	subs	r3, #0
 8007b6c:	bf18      	it	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	0692      	lsls	r2, r2, #26
 8007b72:	d42b      	bmi.n	8007bcc <_printf_common+0xb0>
 8007b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b78:	4641      	mov	r1, r8
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	47c8      	blx	r9
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d01e      	beq.n	8007bc0 <_printf_common+0xa4>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	6922      	ldr	r2, [r4, #16]
 8007b86:	f003 0306 	and.w	r3, r3, #6
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	bf02      	ittt	eq
 8007b8e:	68e5      	ldreq	r5, [r4, #12]
 8007b90:	6833      	ldreq	r3, [r6, #0]
 8007b92:	1aed      	subeq	r5, r5, r3
 8007b94:	68a3      	ldr	r3, [r4, #8]
 8007b96:	bf0c      	ite	eq
 8007b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b9c:	2500      	movne	r5, #0
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	bfc4      	itt	gt
 8007ba2:	1a9b      	subgt	r3, r3, r2
 8007ba4:	18ed      	addgt	r5, r5, r3
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	341a      	adds	r4, #26
 8007baa:	42b5      	cmp	r5, r6
 8007bac:	d11a      	bne.n	8007be4 <_printf_common+0xc8>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	e008      	b.n	8007bc4 <_printf_common+0xa8>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4652      	mov	r2, sl
 8007bb6:	4641      	mov	r1, r8
 8007bb8:	4638      	mov	r0, r7
 8007bba:	47c8      	blx	r9
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d103      	bne.n	8007bc8 <_printf_common+0xac>
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc8:	3501      	adds	r5, #1
 8007bca:	e7c6      	b.n	8007b5a <_printf_common+0x3e>
 8007bcc:	18e1      	adds	r1, r4, r3
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	2030      	movs	r0, #48	@ 0x30
 8007bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bd6:	4422      	add	r2, r4
 8007bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007be0:	3302      	adds	r3, #2
 8007be2:	e7c7      	b.n	8007b74 <_printf_common+0x58>
 8007be4:	2301      	movs	r3, #1
 8007be6:	4622      	mov	r2, r4
 8007be8:	4641      	mov	r1, r8
 8007bea:	4638      	mov	r0, r7
 8007bec:	47c8      	blx	r9
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d0e6      	beq.n	8007bc0 <_printf_common+0xa4>
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	e7d9      	b.n	8007baa <_printf_common+0x8e>
	...

08007bf8 <_printf_i>:
 8007bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfc:	7e0f      	ldrb	r7, [r1, #24]
 8007bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c00:	2f78      	cmp	r7, #120	@ 0x78
 8007c02:	4691      	mov	r9, r2
 8007c04:	4680      	mov	r8, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	469a      	mov	sl, r3
 8007c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c0e:	d807      	bhi.n	8007c20 <_printf_i+0x28>
 8007c10:	2f62      	cmp	r7, #98	@ 0x62
 8007c12:	d80a      	bhi.n	8007c2a <_printf_i+0x32>
 8007c14:	2f00      	cmp	r7, #0
 8007c16:	f000 80d2 	beq.w	8007dbe <_printf_i+0x1c6>
 8007c1a:	2f58      	cmp	r7, #88	@ 0x58
 8007c1c:	f000 80b9 	beq.w	8007d92 <_printf_i+0x19a>
 8007c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c28:	e03a      	b.n	8007ca0 <_printf_i+0xa8>
 8007c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c2e:	2b15      	cmp	r3, #21
 8007c30:	d8f6      	bhi.n	8007c20 <_printf_i+0x28>
 8007c32:	a101      	add	r1, pc, #4	@ (adr r1, 8007c38 <_printf_i+0x40>)
 8007c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c38:	08007c91 	.word	0x08007c91
 8007c3c:	08007ca5 	.word	0x08007ca5
 8007c40:	08007c21 	.word	0x08007c21
 8007c44:	08007c21 	.word	0x08007c21
 8007c48:	08007c21 	.word	0x08007c21
 8007c4c:	08007c21 	.word	0x08007c21
 8007c50:	08007ca5 	.word	0x08007ca5
 8007c54:	08007c21 	.word	0x08007c21
 8007c58:	08007c21 	.word	0x08007c21
 8007c5c:	08007c21 	.word	0x08007c21
 8007c60:	08007c21 	.word	0x08007c21
 8007c64:	08007da5 	.word	0x08007da5
 8007c68:	08007ccf 	.word	0x08007ccf
 8007c6c:	08007d5f 	.word	0x08007d5f
 8007c70:	08007c21 	.word	0x08007c21
 8007c74:	08007c21 	.word	0x08007c21
 8007c78:	08007dc7 	.word	0x08007dc7
 8007c7c:	08007c21 	.word	0x08007c21
 8007c80:	08007ccf 	.word	0x08007ccf
 8007c84:	08007c21 	.word	0x08007c21
 8007c88:	08007c21 	.word	0x08007c21
 8007c8c:	08007d67 	.word	0x08007d67
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	1d1a      	adds	r2, r3, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6032      	str	r2, [r6, #0]
 8007c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e09d      	b.n	8007de0 <_printf_i+0x1e8>
 8007ca4:	6833      	ldr	r3, [r6, #0]
 8007ca6:	6820      	ldr	r0, [r4, #0]
 8007ca8:	1d19      	adds	r1, r3, #4
 8007caa:	6031      	str	r1, [r6, #0]
 8007cac:	0606      	lsls	r6, r0, #24
 8007cae:	d501      	bpl.n	8007cb4 <_printf_i+0xbc>
 8007cb0:	681d      	ldr	r5, [r3, #0]
 8007cb2:	e003      	b.n	8007cbc <_printf_i+0xc4>
 8007cb4:	0645      	lsls	r5, r0, #25
 8007cb6:	d5fb      	bpl.n	8007cb0 <_printf_i+0xb8>
 8007cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cbc:	2d00      	cmp	r5, #0
 8007cbe:	da03      	bge.n	8007cc8 <_printf_i+0xd0>
 8007cc0:	232d      	movs	r3, #45	@ 0x2d
 8007cc2:	426d      	negs	r5, r5
 8007cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cc8:	4859      	ldr	r0, [pc, #356]	@ (8007e30 <_printf_i+0x238>)
 8007cca:	230a      	movs	r3, #10
 8007ccc:	e011      	b.n	8007cf2 <_printf_i+0xfa>
 8007cce:	6821      	ldr	r1, [r4, #0]
 8007cd0:	6833      	ldr	r3, [r6, #0]
 8007cd2:	0608      	lsls	r0, r1, #24
 8007cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cd8:	d402      	bmi.n	8007ce0 <_printf_i+0xe8>
 8007cda:	0649      	lsls	r1, r1, #25
 8007cdc:	bf48      	it	mi
 8007cde:	b2ad      	uxthmi	r5, r5
 8007ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ce2:	4853      	ldr	r0, [pc, #332]	@ (8007e30 <_printf_i+0x238>)
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	bf14      	ite	ne
 8007ce8:	230a      	movne	r3, #10
 8007cea:	2308      	moveq	r3, #8
 8007cec:	2100      	movs	r1, #0
 8007cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cf2:	6866      	ldr	r6, [r4, #4]
 8007cf4:	60a6      	str	r6, [r4, #8]
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	bfa2      	ittt	ge
 8007cfa:	6821      	ldrge	r1, [r4, #0]
 8007cfc:	f021 0104 	bicge.w	r1, r1, #4
 8007d00:	6021      	strge	r1, [r4, #0]
 8007d02:	b90d      	cbnz	r5, 8007d08 <_printf_i+0x110>
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	d04b      	beq.n	8007da0 <_printf_i+0x1a8>
 8007d08:	4616      	mov	r6, r2
 8007d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d12:	5dc7      	ldrb	r7, [r0, r7]
 8007d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d18:	462f      	mov	r7, r5
 8007d1a:	42bb      	cmp	r3, r7
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	d9f4      	bls.n	8007d0a <_printf_i+0x112>
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d10b      	bne.n	8007d3c <_printf_i+0x144>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	07df      	lsls	r7, r3, #31
 8007d28:	d508      	bpl.n	8007d3c <_printf_i+0x144>
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	6861      	ldr	r1, [r4, #4]
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	bfde      	ittt	le
 8007d32:	2330      	movle	r3, #48	@ 0x30
 8007d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d3c:	1b92      	subs	r2, r2, r6
 8007d3e:	6122      	str	r2, [r4, #16]
 8007d40:	f8cd a000 	str.w	sl, [sp]
 8007d44:	464b      	mov	r3, r9
 8007d46:	aa03      	add	r2, sp, #12
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f7ff fee6 	bl	8007b1c <_printf_common>
 8007d50:	3001      	adds	r0, #1
 8007d52:	d14a      	bne.n	8007dea <_printf_i+0x1f2>
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	b004      	add	sp, #16
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	f043 0320 	orr.w	r3, r3, #32
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	4833      	ldr	r0, [pc, #204]	@ (8007e34 <_printf_i+0x23c>)
 8007d68:	2778      	movs	r7, #120	@ 0x78
 8007d6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	6831      	ldr	r1, [r6, #0]
 8007d72:	061f      	lsls	r7, r3, #24
 8007d74:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d78:	d402      	bmi.n	8007d80 <_printf_i+0x188>
 8007d7a:	065f      	lsls	r7, r3, #25
 8007d7c:	bf48      	it	mi
 8007d7e:	b2ad      	uxthmi	r5, r5
 8007d80:	6031      	str	r1, [r6, #0]
 8007d82:	07d9      	lsls	r1, r3, #31
 8007d84:	bf44      	itt	mi
 8007d86:	f043 0320 	orrmi.w	r3, r3, #32
 8007d8a:	6023      	strmi	r3, [r4, #0]
 8007d8c:	b11d      	cbz	r5, 8007d96 <_printf_i+0x19e>
 8007d8e:	2310      	movs	r3, #16
 8007d90:	e7ac      	b.n	8007cec <_printf_i+0xf4>
 8007d92:	4827      	ldr	r0, [pc, #156]	@ (8007e30 <_printf_i+0x238>)
 8007d94:	e7e9      	b.n	8007d6a <_printf_i+0x172>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f023 0320 	bic.w	r3, r3, #32
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	e7f6      	b.n	8007d8e <_printf_i+0x196>
 8007da0:	4616      	mov	r6, r2
 8007da2:	e7bd      	b.n	8007d20 <_printf_i+0x128>
 8007da4:	6833      	ldr	r3, [r6, #0]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	6961      	ldr	r1, [r4, #20]
 8007daa:	1d18      	adds	r0, r3, #4
 8007dac:	6030      	str	r0, [r6, #0]
 8007dae:	062e      	lsls	r6, r5, #24
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	d501      	bpl.n	8007db8 <_printf_i+0x1c0>
 8007db4:	6019      	str	r1, [r3, #0]
 8007db6:	e002      	b.n	8007dbe <_printf_i+0x1c6>
 8007db8:	0668      	lsls	r0, r5, #25
 8007dba:	d5fb      	bpl.n	8007db4 <_printf_i+0x1bc>
 8007dbc:	8019      	strh	r1, [r3, #0]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	4616      	mov	r6, r2
 8007dc4:	e7bc      	b.n	8007d40 <_printf_i+0x148>
 8007dc6:	6833      	ldr	r3, [r6, #0]
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	6032      	str	r2, [r6, #0]
 8007dcc:	681e      	ldr	r6, [r3, #0]
 8007dce:	6862      	ldr	r2, [r4, #4]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7f8 f9fc 	bl	80001d0 <memchr>
 8007dd8:	b108      	cbz	r0, 8007dde <_printf_i+0x1e6>
 8007dda:	1b80      	subs	r0, r0, r6
 8007ddc:	6060      	str	r0, [r4, #4]
 8007dde:	6863      	ldr	r3, [r4, #4]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	2300      	movs	r3, #0
 8007de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de8:	e7aa      	b.n	8007d40 <_printf_i+0x148>
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	4632      	mov	r2, r6
 8007dee:	4649      	mov	r1, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	47d0      	blx	sl
 8007df4:	3001      	adds	r0, #1
 8007df6:	d0ad      	beq.n	8007d54 <_printf_i+0x15c>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	079b      	lsls	r3, r3, #30
 8007dfc:	d413      	bmi.n	8007e26 <_printf_i+0x22e>
 8007dfe:	68e0      	ldr	r0, [r4, #12]
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	4298      	cmp	r0, r3
 8007e04:	bfb8      	it	lt
 8007e06:	4618      	movlt	r0, r3
 8007e08:	e7a6      	b.n	8007d58 <_printf_i+0x160>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4640      	mov	r0, r8
 8007e12:	47d0      	blx	sl
 8007e14:	3001      	adds	r0, #1
 8007e16:	d09d      	beq.n	8007d54 <_printf_i+0x15c>
 8007e18:	3501      	adds	r5, #1
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	9903      	ldr	r1, [sp, #12]
 8007e1e:	1a5b      	subs	r3, r3, r1
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	dcf2      	bgt.n	8007e0a <_printf_i+0x212>
 8007e24:	e7eb      	b.n	8007dfe <_printf_i+0x206>
 8007e26:	2500      	movs	r5, #0
 8007e28:	f104 0619 	add.w	r6, r4, #25
 8007e2c:	e7f5      	b.n	8007e1a <_printf_i+0x222>
 8007e2e:	bf00      	nop
 8007e30:	0800a532 	.word	0x0800a532
 8007e34:	0800a543 	.word	0x0800a543

08007e38 <std>:
 8007e38:	2300      	movs	r3, #0
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e46:	6083      	str	r3, [r0, #8]
 8007e48:	8181      	strh	r1, [r0, #12]
 8007e4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e4c:	81c2      	strh	r2, [r0, #14]
 8007e4e:	6183      	str	r3, [r0, #24]
 8007e50:	4619      	mov	r1, r3
 8007e52:	2208      	movs	r2, #8
 8007e54:	305c      	adds	r0, #92	@ 0x5c
 8007e56:	f000 f928 	bl	80080aa <memset>
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <std+0x58>)
 8007e5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <std+0x5c>)
 8007e60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e62:	4b0d      	ldr	r3, [pc, #52]	@ (8007e98 <std+0x60>)
 8007e64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <std+0x64>)
 8007e68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea0 <std+0x68>)
 8007e6c:	6224      	str	r4, [r4, #32]
 8007e6e:	429c      	cmp	r4, r3
 8007e70:	d006      	beq.n	8007e80 <std+0x48>
 8007e72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e76:	4294      	cmp	r4, r2
 8007e78:	d002      	beq.n	8007e80 <std+0x48>
 8007e7a:	33d0      	adds	r3, #208	@ 0xd0
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	d105      	bne.n	8007e8c <std+0x54>
 8007e80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e88:	f000 b9ae 	b.w	80081e8 <__retarget_lock_init_recursive>
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	08008025 	.word	0x08008025
 8007e94:	08008047 	.word	0x08008047
 8007e98:	0800807f 	.word	0x0800807f
 8007e9c:	080080a3 	.word	0x080080a3
 8007ea0:	20000398 	.word	0x20000398

08007ea4 <stdio_exit_handler>:
 8007ea4:	4a02      	ldr	r2, [pc, #8]	@ (8007eb0 <stdio_exit_handler+0xc>)
 8007ea6:	4903      	ldr	r1, [pc, #12]	@ (8007eb4 <stdio_exit_handler+0x10>)
 8007ea8:	4803      	ldr	r0, [pc, #12]	@ (8007eb8 <stdio_exit_handler+0x14>)
 8007eaa:	f000 b869 	b.w	8007f80 <_fwalk_sglue>
 8007eae:	bf00      	nop
 8007eb0:	2000000c 	.word	0x2000000c
 8007eb4:	080099d9 	.word	0x080099d9
 8007eb8:	2000001c 	.word	0x2000001c

08007ebc <cleanup_stdio>:
 8007ebc:	6841      	ldr	r1, [r0, #4]
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <cleanup_stdio+0x34>)
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	b510      	push	{r4, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	d001      	beq.n	8007ecc <cleanup_stdio+0x10>
 8007ec8:	f001 fd86 	bl	80099d8 <_fflush_r>
 8007ecc:	68a1      	ldr	r1, [r4, #8]
 8007ece:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <cleanup_stdio+0x38>)
 8007ed0:	4299      	cmp	r1, r3
 8007ed2:	d002      	beq.n	8007eda <cleanup_stdio+0x1e>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f001 fd7f 	bl	80099d8 <_fflush_r>
 8007eda:	68e1      	ldr	r1, [r4, #12]
 8007edc:	4b06      	ldr	r3, [pc, #24]	@ (8007ef8 <cleanup_stdio+0x3c>)
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	d004      	beq.n	8007eec <cleanup_stdio+0x30>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee8:	f001 bd76 	b.w	80099d8 <_fflush_r>
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000398 	.word	0x20000398
 8007ef4:	20000400 	.word	0x20000400
 8007ef8:	20000468 	.word	0x20000468

08007efc <global_stdio_init.part.0>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	4b0b      	ldr	r3, [pc, #44]	@ (8007f2c <global_stdio_init.part.0+0x30>)
 8007f00:	4c0b      	ldr	r4, [pc, #44]	@ (8007f30 <global_stdio_init.part.0+0x34>)
 8007f02:	4a0c      	ldr	r2, [pc, #48]	@ (8007f34 <global_stdio_init.part.0+0x38>)
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	4620      	mov	r0, r4
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2104      	movs	r1, #4
 8007f0c:	f7ff ff94 	bl	8007e38 <std>
 8007f10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f14:	2201      	movs	r2, #1
 8007f16:	2109      	movs	r1, #9
 8007f18:	f7ff ff8e 	bl	8007e38 <std>
 8007f1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f20:	2202      	movs	r2, #2
 8007f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f26:	2112      	movs	r1, #18
 8007f28:	f7ff bf86 	b.w	8007e38 <std>
 8007f2c:	200004d0 	.word	0x200004d0
 8007f30:	20000398 	.word	0x20000398
 8007f34:	08007ea5 	.word	0x08007ea5

08007f38 <__sfp_lock_acquire>:
 8007f38:	4801      	ldr	r0, [pc, #4]	@ (8007f40 <__sfp_lock_acquire+0x8>)
 8007f3a:	f000 b956 	b.w	80081ea <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	200004d9 	.word	0x200004d9

08007f44 <__sfp_lock_release>:
 8007f44:	4801      	ldr	r0, [pc, #4]	@ (8007f4c <__sfp_lock_release+0x8>)
 8007f46:	f000 b951 	b.w	80081ec <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	200004d9 	.word	0x200004d9

08007f50 <__sinit>:
 8007f50:	b510      	push	{r4, lr}
 8007f52:	4604      	mov	r4, r0
 8007f54:	f7ff fff0 	bl	8007f38 <__sfp_lock_acquire>
 8007f58:	6a23      	ldr	r3, [r4, #32]
 8007f5a:	b11b      	cbz	r3, 8007f64 <__sinit+0x14>
 8007f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f60:	f7ff bff0 	b.w	8007f44 <__sfp_lock_release>
 8007f64:	4b04      	ldr	r3, [pc, #16]	@ (8007f78 <__sinit+0x28>)
 8007f66:	6223      	str	r3, [r4, #32]
 8007f68:	4b04      	ldr	r3, [pc, #16]	@ (8007f7c <__sinit+0x2c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1f5      	bne.n	8007f5c <__sinit+0xc>
 8007f70:	f7ff ffc4 	bl	8007efc <global_stdio_init.part.0>
 8007f74:	e7f2      	b.n	8007f5c <__sinit+0xc>
 8007f76:	bf00      	nop
 8007f78:	08007ebd 	.word	0x08007ebd
 8007f7c:	200004d0 	.word	0x200004d0

08007f80 <_fwalk_sglue>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4607      	mov	r7, r0
 8007f86:	4688      	mov	r8, r1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f90:	f1b9 0901 	subs.w	r9, r9, #1
 8007f94:	d505      	bpl.n	8007fa2 <_fwalk_sglue+0x22>
 8007f96:	6824      	ldr	r4, [r4, #0]
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	d1f7      	bne.n	8007f8c <_fwalk_sglue+0xc>
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d907      	bls.n	8007fb8 <_fwalk_sglue+0x38>
 8007fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fac:	3301      	adds	r3, #1
 8007fae:	d003      	beq.n	8007fb8 <_fwalk_sglue+0x38>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	47c0      	blx	r8
 8007fb6:	4306      	orrs	r6, r0
 8007fb8:	3568      	adds	r5, #104	@ 0x68
 8007fba:	e7e9      	b.n	8007f90 <_fwalk_sglue+0x10>

08007fbc <sniprintf>:
 8007fbc:	b40c      	push	{r2, r3}
 8007fbe:	b530      	push	{r4, r5, lr}
 8007fc0:	4b17      	ldr	r3, [pc, #92]	@ (8008020 <sniprintf+0x64>)
 8007fc2:	1e0c      	subs	r4, r1, #0
 8007fc4:	681d      	ldr	r5, [r3, #0]
 8007fc6:	b09d      	sub	sp, #116	@ 0x74
 8007fc8:	da08      	bge.n	8007fdc <sniprintf+0x20>
 8007fca:	238b      	movs	r3, #139	@ 0x8b
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd2:	b01d      	add	sp, #116	@ 0x74
 8007fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fd8:	b002      	add	sp, #8
 8007fda:	4770      	bx	lr
 8007fdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fe0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fe4:	bf14      	ite	ne
 8007fe6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fea:	4623      	moveq	r3, r4
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ff4:	9002      	str	r0, [sp, #8]
 8007ff6:	9006      	str	r0, [sp, #24]
 8007ff8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ffc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ffe:	ab21      	add	r3, sp, #132	@ 0x84
 8008000:	a902      	add	r1, sp, #8
 8008002:	4628      	mov	r0, r5
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	f001 fb67 	bl	80096d8 <_svfiprintf_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	bfbc      	itt	lt
 800800e:	238b      	movlt	r3, #139	@ 0x8b
 8008010:	602b      	strlt	r3, [r5, #0]
 8008012:	2c00      	cmp	r4, #0
 8008014:	d0dd      	beq.n	8007fd2 <sniprintf+0x16>
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	e7d9      	b.n	8007fd2 <sniprintf+0x16>
 800801e:	bf00      	nop
 8008020:	20000018 	.word	0x20000018

08008024 <__sread>:
 8008024:	b510      	push	{r4, lr}
 8008026:	460c      	mov	r4, r1
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	f000 f87e 	bl	800812c <_read_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	bfab      	itete	ge
 8008034:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008036:	89a3      	ldrhlt	r3, [r4, #12]
 8008038:	181b      	addge	r3, r3, r0
 800803a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800803e:	bfac      	ite	ge
 8008040:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008042:	81a3      	strhlt	r3, [r4, #12]
 8008044:	bd10      	pop	{r4, pc}

08008046 <__swrite>:
 8008046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804a:	461f      	mov	r7, r3
 800804c:	898b      	ldrh	r3, [r1, #12]
 800804e:	05db      	lsls	r3, r3, #23
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4616      	mov	r6, r2
 8008056:	d505      	bpl.n	8008064 <__swrite+0x1e>
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	2302      	movs	r3, #2
 800805e:	2200      	movs	r2, #0
 8008060:	f000 f852 	bl	8008108 <_lseek_r>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800806a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	4632      	mov	r2, r6
 8008072:	463b      	mov	r3, r7
 8008074:	4628      	mov	r0, r5
 8008076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	f000 b879 	b.w	8008170 <_write_r>

0800807e <__sseek>:
 800807e:	b510      	push	{r4, lr}
 8008080:	460c      	mov	r4, r1
 8008082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008086:	f000 f83f 	bl	8008108 <_lseek_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	bf15      	itete	ne
 8008090:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008092:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008096:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800809a:	81a3      	strheq	r3, [r4, #12]
 800809c:	bf18      	it	ne
 800809e:	81a3      	strhne	r3, [r4, #12]
 80080a0:	bd10      	pop	{r4, pc}

080080a2 <__sclose>:
 80080a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a6:	f000 b81f 	b.w	80080e8 <_close_r>

080080aa <memset>:
 80080aa:	4402      	add	r2, r0
 80080ac:	4603      	mov	r3, r0
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d100      	bne.n	80080b4 <memset+0xa>
 80080b2:	4770      	bx	lr
 80080b4:	f803 1b01 	strb.w	r1, [r3], #1
 80080b8:	e7f9      	b.n	80080ae <memset+0x4>

080080ba <strncpy>:
 80080ba:	b510      	push	{r4, lr}
 80080bc:	3901      	subs	r1, #1
 80080be:	4603      	mov	r3, r0
 80080c0:	b132      	cbz	r2, 80080d0 <strncpy+0x16>
 80080c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080c6:	f803 4b01 	strb.w	r4, [r3], #1
 80080ca:	3a01      	subs	r2, #1
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	d1f7      	bne.n	80080c0 <strncpy+0x6>
 80080d0:	441a      	add	r2, r3
 80080d2:	2100      	movs	r1, #0
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d100      	bne.n	80080da <strncpy+0x20>
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	f803 1b01 	strb.w	r1, [r3], #1
 80080de:	e7f9      	b.n	80080d4 <strncpy+0x1a>

080080e0 <_localeconv_r>:
 80080e0:	4800      	ldr	r0, [pc, #0]	@ (80080e4 <_localeconv_r+0x4>)
 80080e2:	4770      	bx	lr
 80080e4:	20000158 	.word	0x20000158

080080e8 <_close_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	@ (8008104 <_close_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7fa fce4 	bl	8002ac0 <_close>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_close_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_close_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	200004d4 	.word	0x200004d4

08008108 <_lseek_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	@ (8008128 <_lseek_r+0x20>)
 800810c:	4604      	mov	r4, r0
 800810e:	4608      	mov	r0, r1
 8008110:	4611      	mov	r1, r2
 8008112:	2200      	movs	r2, #0
 8008114:	602a      	str	r2, [r5, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	f7fa fcf9 	bl	8002b0e <_lseek>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_lseek_r+0x1e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_lseek_r+0x1e>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	200004d4 	.word	0x200004d4

0800812c <_read_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	@ (800814c <_read_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7fa fc87 	bl	8002a4e <_read>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_read_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_read_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	200004d4 	.word	0x200004d4

08008150 <_sbrk_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	@ (800816c <_sbrk_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7fa fce4 	bl	8002b28 <_sbrk>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_sbrk_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_sbrk_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	200004d4 	.word	0x200004d4

08008170 <_write_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	@ (8008190 <_write_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7fa fc82 	bl	8002a88 <_write>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_write_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_write_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	200004d4 	.word	0x200004d4

08008194 <__errno>:
 8008194:	4b01      	ldr	r3, [pc, #4]	@ (800819c <__errno+0x8>)
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000018 	.word	0x20000018

080081a0 <__libc_init_array>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4d0d      	ldr	r5, [pc, #52]	@ (80081d8 <__libc_init_array+0x38>)
 80081a4:	4c0d      	ldr	r4, [pc, #52]	@ (80081dc <__libc_init_array+0x3c>)
 80081a6:	1b64      	subs	r4, r4, r5
 80081a8:	10a4      	asrs	r4, r4, #2
 80081aa:	2600      	movs	r6, #0
 80081ac:	42a6      	cmp	r6, r4
 80081ae:	d109      	bne.n	80081c4 <__libc_init_array+0x24>
 80081b0:	4d0b      	ldr	r5, [pc, #44]	@ (80081e0 <__libc_init_array+0x40>)
 80081b2:	4c0c      	ldr	r4, [pc, #48]	@ (80081e4 <__libc_init_array+0x44>)
 80081b4:	f001 ff9e 	bl	800a0f4 <_init>
 80081b8:	1b64      	subs	r4, r4, r5
 80081ba:	10a4      	asrs	r4, r4, #2
 80081bc:	2600      	movs	r6, #0
 80081be:	42a6      	cmp	r6, r4
 80081c0:	d105      	bne.n	80081ce <__libc_init_array+0x2e>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c8:	4798      	blx	r3
 80081ca:	3601      	adds	r6, #1
 80081cc:	e7ee      	b.n	80081ac <__libc_init_array+0xc>
 80081ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d2:	4798      	blx	r3
 80081d4:	3601      	adds	r6, #1
 80081d6:	e7f2      	b.n	80081be <__libc_init_array+0x1e>
 80081d8:	0800a898 	.word	0x0800a898
 80081dc:	0800a898 	.word	0x0800a898
 80081e0:	0800a898 	.word	0x0800a898
 80081e4:	0800a89c 	.word	0x0800a89c

080081e8 <__retarget_lock_init_recursive>:
 80081e8:	4770      	bx	lr

080081ea <__retarget_lock_acquire_recursive>:
 80081ea:	4770      	bx	lr

080081ec <__retarget_lock_release_recursive>:
 80081ec:	4770      	bx	lr

080081ee <quorem>:
 80081ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f2:	6903      	ldr	r3, [r0, #16]
 80081f4:	690c      	ldr	r4, [r1, #16]
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	4607      	mov	r7, r0
 80081fa:	db7e      	blt.n	80082fa <quorem+0x10c>
 80081fc:	3c01      	subs	r4, #1
 80081fe:	f101 0814 	add.w	r8, r1, #20
 8008202:	00a3      	lsls	r3, r4, #2
 8008204:	f100 0514 	add.w	r5, r0, #20
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008218:	3301      	adds	r3, #1
 800821a:	429a      	cmp	r2, r3
 800821c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008220:	fbb2 f6f3 	udiv	r6, r2, r3
 8008224:	d32e      	bcc.n	8008284 <quorem+0x96>
 8008226:	f04f 0a00 	mov.w	sl, #0
 800822a:	46c4      	mov	ip, r8
 800822c:	46ae      	mov	lr, r5
 800822e:	46d3      	mov	fp, sl
 8008230:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008234:	b298      	uxth	r0, r3
 8008236:	fb06 a000 	mla	r0, r6, r0, sl
 800823a:	0c02      	lsrs	r2, r0, #16
 800823c:	0c1b      	lsrs	r3, r3, #16
 800823e:	fb06 2303 	mla	r3, r6, r3, r2
 8008242:	f8de 2000 	ldr.w	r2, [lr]
 8008246:	b280      	uxth	r0, r0
 8008248:	b292      	uxth	r2, r2
 800824a:	1a12      	subs	r2, r2, r0
 800824c:	445a      	add	r2, fp
 800824e:	f8de 0000 	ldr.w	r0, [lr]
 8008252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008256:	b29b      	uxth	r3, r3
 8008258:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800825c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008260:	b292      	uxth	r2, r2
 8008262:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008266:	45e1      	cmp	r9, ip
 8008268:	f84e 2b04 	str.w	r2, [lr], #4
 800826c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008270:	d2de      	bcs.n	8008230 <quorem+0x42>
 8008272:	9b00      	ldr	r3, [sp, #0]
 8008274:	58eb      	ldr	r3, [r5, r3]
 8008276:	b92b      	cbnz	r3, 8008284 <quorem+0x96>
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	3b04      	subs	r3, #4
 800827c:	429d      	cmp	r5, r3
 800827e:	461a      	mov	r2, r3
 8008280:	d32f      	bcc.n	80082e2 <quorem+0xf4>
 8008282:	613c      	str	r4, [r7, #16]
 8008284:	4638      	mov	r0, r7
 8008286:	f001 f8c3 	bl	8009410 <__mcmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	db25      	blt.n	80082da <quorem+0xec>
 800828e:	4629      	mov	r1, r5
 8008290:	2000      	movs	r0, #0
 8008292:	f858 2b04 	ldr.w	r2, [r8], #4
 8008296:	f8d1 c000 	ldr.w	ip, [r1]
 800829a:	fa1f fe82 	uxth.w	lr, r2
 800829e:	fa1f f38c 	uxth.w	r3, ip
 80082a2:	eba3 030e 	sub.w	r3, r3, lr
 80082a6:	4403      	add	r3, r0
 80082a8:	0c12      	lsrs	r2, r2, #16
 80082aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b8:	45c1      	cmp	r9, r8
 80082ba:	f841 3b04 	str.w	r3, [r1], #4
 80082be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082c2:	d2e6      	bcs.n	8008292 <quorem+0xa4>
 80082c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082cc:	b922      	cbnz	r2, 80082d8 <quorem+0xea>
 80082ce:	3b04      	subs	r3, #4
 80082d0:	429d      	cmp	r5, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	d30b      	bcc.n	80082ee <quorem+0x100>
 80082d6:	613c      	str	r4, [r7, #16]
 80082d8:	3601      	adds	r6, #1
 80082da:	4630      	mov	r0, r6
 80082dc:	b003      	add	sp, #12
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d1cb      	bne.n	8008282 <quorem+0x94>
 80082ea:	3c01      	subs	r4, #1
 80082ec:	e7c6      	b.n	800827c <quorem+0x8e>
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	d1ef      	bne.n	80082d6 <quorem+0xe8>
 80082f6:	3c01      	subs	r4, #1
 80082f8:	e7ea      	b.n	80082d0 <quorem+0xe2>
 80082fa:	2000      	movs	r0, #0
 80082fc:	e7ee      	b.n	80082dc <quorem+0xee>
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	69c7      	ldr	r7, [r0, #28]
 8008306:	b099      	sub	sp, #100	@ 0x64
 8008308:	ed8d 0b02 	vstr	d0, [sp, #8]
 800830c:	ec55 4b10 	vmov	r4, r5, d0
 8008310:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008312:	9109      	str	r1, [sp, #36]	@ 0x24
 8008314:	4683      	mov	fp, r0
 8008316:	920e      	str	r2, [sp, #56]	@ 0x38
 8008318:	9313      	str	r3, [sp, #76]	@ 0x4c
 800831a:	b97f      	cbnz	r7, 800833c <_dtoa_r+0x3c>
 800831c:	2010      	movs	r0, #16
 800831e:	f7ff f87d 	bl	800741c <malloc>
 8008322:	4602      	mov	r2, r0
 8008324:	f8cb 001c 	str.w	r0, [fp, #28]
 8008328:	b920      	cbnz	r0, 8008334 <_dtoa_r+0x34>
 800832a:	4ba7      	ldr	r3, [pc, #668]	@ (80085c8 <_dtoa_r+0x2c8>)
 800832c:	21ef      	movs	r1, #239	@ 0xef
 800832e:	48a7      	ldr	r0, [pc, #668]	@ (80085cc <_dtoa_r+0x2cc>)
 8008330:	f001 fba2 	bl	8009a78 <__assert_func>
 8008334:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008338:	6007      	str	r7, [r0, #0]
 800833a:	60c7      	str	r7, [r0, #12]
 800833c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008340:	6819      	ldr	r1, [r3, #0]
 8008342:	b159      	cbz	r1, 800835c <_dtoa_r+0x5c>
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	604a      	str	r2, [r1, #4]
 8008348:	2301      	movs	r3, #1
 800834a:	4093      	lsls	r3, r2
 800834c:	608b      	str	r3, [r1, #8]
 800834e:	4658      	mov	r0, fp
 8008350:	f000 fe24 	bl	8008f9c <_Bfree>
 8008354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	1e2b      	subs	r3, r5, #0
 800835e:	bfb9      	ittee	lt
 8008360:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008364:	9303      	strlt	r3, [sp, #12]
 8008366:	2300      	movge	r3, #0
 8008368:	6033      	strge	r3, [r6, #0]
 800836a:	9f03      	ldr	r7, [sp, #12]
 800836c:	4b98      	ldr	r3, [pc, #608]	@ (80085d0 <_dtoa_r+0x2d0>)
 800836e:	bfbc      	itt	lt
 8008370:	2201      	movlt	r2, #1
 8008372:	6032      	strlt	r2, [r6, #0]
 8008374:	43bb      	bics	r3, r7
 8008376:	d112      	bne.n	800839e <_dtoa_r+0x9e>
 8008378:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800837a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008384:	4323      	orrs	r3, r4
 8008386:	f000 854d 	beq.w	8008e24 <_dtoa_r+0xb24>
 800838a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800838c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80085e4 <_dtoa_r+0x2e4>
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 854f 	beq.w	8008e34 <_dtoa_r+0xb34>
 8008396:	f10a 0303 	add.w	r3, sl, #3
 800839a:	f000 bd49 	b.w	8008e30 <_dtoa_r+0xb30>
 800839e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	ec51 0b17 	vmov	r0, r1, d7
 80083a8:	2300      	movs	r3, #0
 80083aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083ae:	f7f8 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80083b2:	4680      	mov	r8, r0
 80083b4:	b158      	cbz	r0, 80083ce <_dtoa_r+0xce>
 80083b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083b8:	2301      	movs	r3, #1
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083be:	b113      	cbz	r3, 80083c6 <_dtoa_r+0xc6>
 80083c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083c2:	4b84      	ldr	r3, [pc, #528]	@ (80085d4 <_dtoa_r+0x2d4>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80085e8 <_dtoa_r+0x2e8>
 80083ca:	f000 bd33 	b.w	8008e34 <_dtoa_r+0xb34>
 80083ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80083d2:	aa16      	add	r2, sp, #88	@ 0x58
 80083d4:	a917      	add	r1, sp, #92	@ 0x5c
 80083d6:	4658      	mov	r0, fp
 80083d8:	f001 f8ca 	bl	8009570 <__d2b>
 80083dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80083e0:	4681      	mov	r9, r0
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	d077      	beq.n	80084d6 <_dtoa_r+0x1d6>
 80083e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80083ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80083f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80083fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008400:	4619      	mov	r1, r3
 8008402:	2200      	movs	r2, #0
 8008404:	4b74      	ldr	r3, [pc, #464]	@ (80085d8 <_dtoa_r+0x2d8>)
 8008406:	f7f7 ff3f 	bl	8000288 <__aeabi_dsub>
 800840a:	a369      	add	r3, pc, #420	@ (adr r3, 80085b0 <_dtoa_r+0x2b0>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f8 f8f2 	bl	80005f8 <__aeabi_dmul>
 8008414:	a368      	add	r3, pc, #416	@ (adr r3, 80085b8 <_dtoa_r+0x2b8>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff37 	bl	800028c <__adddf3>
 800841e:	4604      	mov	r4, r0
 8008420:	4630      	mov	r0, r6
 8008422:	460d      	mov	r5, r1
 8008424:	f7f8 f87e 	bl	8000524 <__aeabi_i2d>
 8008428:	a365      	add	r3, pc, #404	@ (adr r3, 80085c0 <_dtoa_r+0x2c0>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f8 f8e3 	bl	80005f8 <__aeabi_dmul>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f7 ff27 	bl	800028c <__adddf3>
 800843e:	4604      	mov	r4, r0
 8008440:	460d      	mov	r5, r1
 8008442:	f7f8 fb89 	bl	8000b58 <__aeabi_d2iz>
 8008446:	2200      	movs	r2, #0
 8008448:	4607      	mov	r7, r0
 800844a:	2300      	movs	r3, #0
 800844c:	4620      	mov	r0, r4
 800844e:	4629      	mov	r1, r5
 8008450:	f7f8 fb44 	bl	8000adc <__aeabi_dcmplt>
 8008454:	b140      	cbz	r0, 8008468 <_dtoa_r+0x168>
 8008456:	4638      	mov	r0, r7
 8008458:	f7f8 f864 	bl	8000524 <__aeabi_i2d>
 800845c:	4622      	mov	r2, r4
 800845e:	462b      	mov	r3, r5
 8008460:	f7f8 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008464:	b900      	cbnz	r0, 8008468 <_dtoa_r+0x168>
 8008466:	3f01      	subs	r7, #1
 8008468:	2f16      	cmp	r7, #22
 800846a:	d851      	bhi.n	8008510 <_dtoa_r+0x210>
 800846c:	4b5b      	ldr	r3, [pc, #364]	@ (80085dc <_dtoa_r+0x2dc>)
 800846e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847a:	f7f8 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800847e:	2800      	cmp	r0, #0
 8008480:	d048      	beq.n	8008514 <_dtoa_r+0x214>
 8008482:	3f01      	subs	r7, #1
 8008484:	2300      	movs	r3, #0
 8008486:	9312      	str	r3, [sp, #72]	@ 0x48
 8008488:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800848a:	1b9b      	subs	r3, r3, r6
 800848c:	1e5a      	subs	r2, r3, #1
 800848e:	bf44      	itt	mi
 8008490:	f1c3 0801 	rsbmi	r8, r3, #1
 8008494:	2300      	movmi	r3, #0
 8008496:	9208      	str	r2, [sp, #32]
 8008498:	bf54      	ite	pl
 800849a:	f04f 0800 	movpl.w	r8, #0
 800849e:	9308      	strmi	r3, [sp, #32]
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	db39      	blt.n	8008518 <_dtoa_r+0x218>
 80084a4:	9b08      	ldr	r3, [sp, #32]
 80084a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084a8:	443b      	add	r3, r7
 80084aa:	9308      	str	r3, [sp, #32]
 80084ac:	2300      	movs	r3, #0
 80084ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80084b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b2:	2b09      	cmp	r3, #9
 80084b4:	d864      	bhi.n	8008580 <_dtoa_r+0x280>
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	bfc4      	itt	gt
 80084ba:	3b04      	subgt	r3, #4
 80084bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c0:	f1a3 0302 	sub.w	r3, r3, #2
 80084c4:	bfcc      	ite	gt
 80084c6:	2400      	movgt	r4, #0
 80084c8:	2401      	movle	r4, #1
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d863      	bhi.n	8008596 <_dtoa_r+0x296>
 80084ce:	e8df f003 	tbb	[pc, r3]
 80084d2:	372a      	.short	0x372a
 80084d4:	5535      	.short	0x5535
 80084d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80084da:	441e      	add	r6, r3
 80084dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	bfc1      	itttt	gt
 80084e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80084e8:	409f      	lslgt	r7, r3
 80084ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80084ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80084f2:	bfd6      	itet	le
 80084f4:	f1c3 0320 	rsble	r3, r3, #32
 80084f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80084fc:	fa04 f003 	lslle.w	r0, r4, r3
 8008500:	f7f8 f800 	bl	8000504 <__aeabi_ui2d>
 8008504:	2201      	movs	r2, #1
 8008506:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800850a:	3e01      	subs	r6, #1
 800850c:	9214      	str	r2, [sp, #80]	@ 0x50
 800850e:	e777      	b.n	8008400 <_dtoa_r+0x100>
 8008510:	2301      	movs	r3, #1
 8008512:	e7b8      	b.n	8008486 <_dtoa_r+0x186>
 8008514:	9012      	str	r0, [sp, #72]	@ 0x48
 8008516:	e7b7      	b.n	8008488 <_dtoa_r+0x188>
 8008518:	427b      	negs	r3, r7
 800851a:	930a      	str	r3, [sp, #40]	@ 0x28
 800851c:	2300      	movs	r3, #0
 800851e:	eba8 0807 	sub.w	r8, r8, r7
 8008522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008524:	e7c4      	b.n	80084b0 <_dtoa_r+0x1b0>
 8008526:	2300      	movs	r3, #0
 8008528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800852a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	dc35      	bgt.n	800859c <_dtoa_r+0x29c>
 8008530:	2301      	movs	r3, #1
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	461a      	mov	r2, r3
 8008538:	920e      	str	r2, [sp, #56]	@ 0x38
 800853a:	e00b      	b.n	8008554 <_dtoa_r+0x254>
 800853c:	2301      	movs	r3, #1
 800853e:	e7f3      	b.n	8008528 <_dtoa_r+0x228>
 8008540:	2300      	movs	r3, #0
 8008542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008546:	18fb      	adds	r3, r7, r3
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	2b01      	cmp	r3, #1
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	bfb8      	it	lt
 8008552:	2301      	movlt	r3, #1
 8008554:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008558:	2100      	movs	r1, #0
 800855a:	2204      	movs	r2, #4
 800855c:	f102 0514 	add.w	r5, r2, #20
 8008560:	429d      	cmp	r5, r3
 8008562:	d91f      	bls.n	80085a4 <_dtoa_r+0x2a4>
 8008564:	6041      	str	r1, [r0, #4]
 8008566:	4658      	mov	r0, fp
 8008568:	f000 fcd8 	bl	8008f1c <_Balloc>
 800856c:	4682      	mov	sl, r0
 800856e:	2800      	cmp	r0, #0
 8008570:	d13c      	bne.n	80085ec <_dtoa_r+0x2ec>
 8008572:	4b1b      	ldr	r3, [pc, #108]	@ (80085e0 <_dtoa_r+0x2e0>)
 8008574:	4602      	mov	r2, r0
 8008576:	f240 11af 	movw	r1, #431	@ 0x1af
 800857a:	e6d8      	b.n	800832e <_dtoa_r+0x2e>
 800857c:	2301      	movs	r3, #1
 800857e:	e7e0      	b.n	8008542 <_dtoa_r+0x242>
 8008580:	2401      	movs	r4, #1
 8008582:	2300      	movs	r3, #0
 8008584:	9309      	str	r3, [sp, #36]	@ 0x24
 8008586:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008588:	f04f 33ff 	mov.w	r3, #4294967295
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	9307      	str	r3, [sp, #28]
 8008590:	2200      	movs	r2, #0
 8008592:	2312      	movs	r3, #18
 8008594:	e7d0      	b.n	8008538 <_dtoa_r+0x238>
 8008596:	2301      	movs	r3, #1
 8008598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800859a:	e7f5      	b.n	8008588 <_dtoa_r+0x288>
 800859c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	e7d7      	b.n	8008554 <_dtoa_r+0x254>
 80085a4:	3101      	adds	r1, #1
 80085a6:	0052      	lsls	r2, r2, #1
 80085a8:	e7d8      	b.n	800855c <_dtoa_r+0x25c>
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w
 80085b0:	636f4361 	.word	0x636f4361
 80085b4:	3fd287a7 	.word	0x3fd287a7
 80085b8:	8b60c8b3 	.word	0x8b60c8b3
 80085bc:	3fc68a28 	.word	0x3fc68a28
 80085c0:	509f79fb 	.word	0x509f79fb
 80085c4:	3fd34413 	.word	0x3fd34413
 80085c8:	0800a561 	.word	0x0800a561
 80085cc:	0800a578 	.word	0x0800a578
 80085d0:	7ff00000 	.word	0x7ff00000
 80085d4:	0800a531 	.word	0x0800a531
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	0800a670 	.word	0x0800a670
 80085e0:	0800a5d0 	.word	0x0800a5d0
 80085e4:	0800a55d 	.word	0x0800a55d
 80085e8:	0800a530 	.word	0x0800a530
 80085ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085f0:	6018      	str	r0, [r3, #0]
 80085f2:	9b07      	ldr	r3, [sp, #28]
 80085f4:	2b0e      	cmp	r3, #14
 80085f6:	f200 80a4 	bhi.w	8008742 <_dtoa_r+0x442>
 80085fa:	2c00      	cmp	r4, #0
 80085fc:	f000 80a1 	beq.w	8008742 <_dtoa_r+0x442>
 8008600:	2f00      	cmp	r7, #0
 8008602:	dd33      	ble.n	800866c <_dtoa_r+0x36c>
 8008604:	4bad      	ldr	r3, [pc, #692]	@ (80088bc <_dtoa_r+0x5bc>)
 8008606:	f007 020f 	and.w	r2, r7, #15
 800860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860e:	ed93 7b00 	vldr	d7, [r3]
 8008612:	05f8      	lsls	r0, r7, #23
 8008614:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800861c:	d516      	bpl.n	800864c <_dtoa_r+0x34c>
 800861e:	4ba8      	ldr	r3, [pc, #672]	@ (80088c0 <_dtoa_r+0x5c0>)
 8008620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008628:	f7f8 f910 	bl	800084c <__aeabi_ddiv>
 800862c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008630:	f004 040f 	and.w	r4, r4, #15
 8008634:	2603      	movs	r6, #3
 8008636:	4da2      	ldr	r5, [pc, #648]	@ (80088c0 <_dtoa_r+0x5c0>)
 8008638:	b954      	cbnz	r4, 8008650 <_dtoa_r+0x350>
 800863a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008642:	f7f8 f903 	bl	800084c <__aeabi_ddiv>
 8008646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864a:	e028      	b.n	800869e <_dtoa_r+0x39e>
 800864c:	2602      	movs	r6, #2
 800864e:	e7f2      	b.n	8008636 <_dtoa_r+0x336>
 8008650:	07e1      	lsls	r1, r4, #31
 8008652:	d508      	bpl.n	8008666 <_dtoa_r+0x366>
 8008654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800865c:	f7f7 ffcc 	bl	80005f8 <__aeabi_dmul>
 8008660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008664:	3601      	adds	r6, #1
 8008666:	1064      	asrs	r4, r4, #1
 8008668:	3508      	adds	r5, #8
 800866a:	e7e5      	b.n	8008638 <_dtoa_r+0x338>
 800866c:	f000 80d2 	beq.w	8008814 <_dtoa_r+0x514>
 8008670:	427c      	negs	r4, r7
 8008672:	4b92      	ldr	r3, [pc, #584]	@ (80088bc <_dtoa_r+0x5bc>)
 8008674:	4d92      	ldr	r5, [pc, #584]	@ (80088c0 <_dtoa_r+0x5c0>)
 8008676:	f004 020f 	and.w	r2, r4, #15
 800867a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008686:	f7f7 ffb7 	bl	80005f8 <__aeabi_dmul>
 800868a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868e:	1124      	asrs	r4, r4, #4
 8008690:	2300      	movs	r3, #0
 8008692:	2602      	movs	r6, #2
 8008694:	2c00      	cmp	r4, #0
 8008696:	f040 80b2 	bne.w	80087fe <_dtoa_r+0x4fe>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1d3      	bne.n	8008646 <_dtoa_r+0x346>
 800869e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80b7 	beq.w	8008818 <_dtoa_r+0x518>
 80086aa:	4b86      	ldr	r3, [pc, #536]	@ (80088c4 <_dtoa_r+0x5c4>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f8 fa13 	bl	8000adc <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f000 80ae 	beq.w	8008818 <_dtoa_r+0x518>
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80aa 	beq.w	8008818 <_dtoa_r+0x518>
 80086c4:	9b00      	ldr	r3, [sp, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	dd37      	ble.n	800873a <_dtoa_r+0x43a>
 80086ca:	1e7b      	subs	r3, r7, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	4620      	mov	r0, r4
 80086d0:	4b7d      	ldr	r3, [pc, #500]	@ (80088c8 <_dtoa_r+0x5c8>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 ff8f 	bl	80005f8 <__aeabi_dmul>
 80086da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086de:	9c00      	ldr	r4, [sp, #0]
 80086e0:	3601      	adds	r6, #1
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7f7 ff1e 	bl	8000524 <__aeabi_i2d>
 80086e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ec:	f7f7 ff84 	bl	80005f8 <__aeabi_dmul>
 80086f0:	4b76      	ldr	r3, [pc, #472]	@ (80088cc <_dtoa_r+0x5cc>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	f7f7 fdca 	bl	800028c <__adddf3>
 80086f8:	4605      	mov	r5, r0
 80086fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80086fe:	2c00      	cmp	r4, #0
 8008700:	f040 808d 	bne.w	800881e <_dtoa_r+0x51e>
 8008704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008708:	4b71      	ldr	r3, [pc, #452]	@ (80088d0 <_dtoa_r+0x5d0>)
 800870a:	2200      	movs	r2, #0
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008718:	462a      	mov	r2, r5
 800871a:	4633      	mov	r3, r6
 800871c:	f7f8 f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8008720:	2800      	cmp	r0, #0
 8008722:	f040 828b 	bne.w	8008c3c <_dtoa_r+0x93c>
 8008726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800872a:	462a      	mov	r2, r5
 800872c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008730:	f7f8 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8008734:	2800      	cmp	r0, #0
 8008736:	f040 8128 	bne.w	800898a <_dtoa_r+0x68a>
 800873a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800873e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008742:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008744:	2b00      	cmp	r3, #0
 8008746:	f2c0 815a 	blt.w	80089fe <_dtoa_r+0x6fe>
 800874a:	2f0e      	cmp	r7, #14
 800874c:	f300 8157 	bgt.w	80089fe <_dtoa_r+0x6fe>
 8008750:	4b5a      	ldr	r3, [pc, #360]	@ (80088bc <_dtoa_r+0x5bc>)
 8008752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008756:	ed93 7b00 	vldr	d7, [r3]
 800875a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	ed8d 7b00 	vstr	d7, [sp]
 8008762:	da03      	bge.n	800876c <_dtoa_r+0x46c>
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f340 8101 	ble.w	800896e <_dtoa_r+0x66e>
 800876c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008770:	4656      	mov	r6, sl
 8008772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f8 f867 	bl	800084c <__aeabi_ddiv>
 800877e:	f7f8 f9eb 	bl	8000b58 <__aeabi_d2iz>
 8008782:	4680      	mov	r8, r0
 8008784:	f7f7 fece 	bl	8000524 <__aeabi_i2d>
 8008788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878c:	f7f7 ff34 	bl	80005f8 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800879c:	f7f7 fd74 	bl	8000288 <__aeabi_dsub>
 80087a0:	f806 4b01 	strb.w	r4, [r6], #1
 80087a4:	9d07      	ldr	r5, [sp, #28]
 80087a6:	eba6 040a 	sub.w	r4, r6, sl
 80087aa:	42a5      	cmp	r5, r4
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	f040 8117 	bne.w	80089e2 <_dtoa_r+0x6e2>
 80087b4:	f7f7 fd6a 	bl	800028c <__adddf3>
 80087b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	f7f8 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f040 80f9 	bne.w	80089bc <_dtoa_r+0x6bc>
 80087ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ce:	4620      	mov	r0, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7f8 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d6:	b118      	cbz	r0, 80087e0 <_dtoa_r+0x4e0>
 80087d8:	f018 0f01 	tst.w	r8, #1
 80087dc:	f040 80ee 	bne.w	80089bc <_dtoa_r+0x6bc>
 80087e0:	4649      	mov	r1, r9
 80087e2:	4658      	mov	r0, fp
 80087e4:	f000 fbda 	bl	8008f9c <_Bfree>
 80087e8:	2300      	movs	r3, #0
 80087ea:	7033      	strb	r3, [r6, #0]
 80087ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087ee:	3701      	adds	r7, #1
 80087f0:	601f      	str	r7, [r3, #0]
 80087f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 831d 	beq.w	8008e34 <_dtoa_r+0xb34>
 80087fa:	601e      	str	r6, [r3, #0]
 80087fc:	e31a      	b.n	8008e34 <_dtoa_r+0xb34>
 80087fe:	07e2      	lsls	r2, r4, #31
 8008800:	d505      	bpl.n	800880e <_dtoa_r+0x50e>
 8008802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008806:	f7f7 fef7 	bl	80005f8 <__aeabi_dmul>
 800880a:	3601      	adds	r6, #1
 800880c:	2301      	movs	r3, #1
 800880e:	1064      	asrs	r4, r4, #1
 8008810:	3508      	adds	r5, #8
 8008812:	e73f      	b.n	8008694 <_dtoa_r+0x394>
 8008814:	2602      	movs	r6, #2
 8008816:	e742      	b.n	800869e <_dtoa_r+0x39e>
 8008818:	9c07      	ldr	r4, [sp, #28]
 800881a:	9704      	str	r7, [sp, #16]
 800881c:	e761      	b.n	80086e2 <_dtoa_r+0x3e2>
 800881e:	4b27      	ldr	r3, [pc, #156]	@ (80088bc <_dtoa_r+0x5bc>)
 8008820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008826:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800882a:	4454      	add	r4, sl
 800882c:	2900      	cmp	r1, #0
 800882e:	d053      	beq.n	80088d8 <_dtoa_r+0x5d8>
 8008830:	4928      	ldr	r1, [pc, #160]	@ (80088d4 <_dtoa_r+0x5d4>)
 8008832:	2000      	movs	r0, #0
 8008834:	f7f8 f80a 	bl	800084c <__aeabi_ddiv>
 8008838:	4633      	mov	r3, r6
 800883a:	462a      	mov	r2, r5
 800883c:	f7f7 fd24 	bl	8000288 <__aeabi_dsub>
 8008840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008844:	4656      	mov	r6, sl
 8008846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884a:	f7f8 f985 	bl	8000b58 <__aeabi_d2iz>
 800884e:	4605      	mov	r5, r0
 8008850:	f7f7 fe68 	bl	8000524 <__aeabi_i2d>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800885c:	f7f7 fd14 	bl	8000288 <__aeabi_dsub>
 8008860:	3530      	adds	r5, #48	@ 0x30
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800886a:	f806 5b01 	strb.w	r5, [r6], #1
 800886e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008872:	f7f8 f933 	bl	8000adc <__aeabi_dcmplt>
 8008876:	2800      	cmp	r0, #0
 8008878:	d171      	bne.n	800895e <_dtoa_r+0x65e>
 800887a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800887e:	4911      	ldr	r1, [pc, #68]	@ (80088c4 <_dtoa_r+0x5c4>)
 8008880:	2000      	movs	r0, #0
 8008882:	f7f7 fd01 	bl	8000288 <__aeabi_dsub>
 8008886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800888a:	f7f8 f927 	bl	8000adc <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	f040 8095 	bne.w	80089be <_dtoa_r+0x6be>
 8008894:	42a6      	cmp	r6, r4
 8008896:	f43f af50 	beq.w	800873a <_dtoa_r+0x43a>
 800889a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800889e:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <_dtoa_r+0x5c8>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	4b08      	ldr	r3, [pc, #32]	@ (80088c8 <_dtoa_r+0x5c8>)
 80088a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088ac:	2200      	movs	r2, #0
 80088ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b2:	f7f7 fea1 	bl	80005f8 <__aeabi_dmul>
 80088b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ba:	e7c4      	b.n	8008846 <_dtoa_r+0x546>
 80088bc:	0800a670 	.word	0x0800a670
 80088c0:	0800a648 	.word	0x0800a648
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	40240000 	.word	0x40240000
 80088cc:	401c0000 	.word	0x401c0000
 80088d0:	40140000 	.word	0x40140000
 80088d4:	3fe00000 	.word	0x3fe00000
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	f7f7 fe8c 	bl	80005f8 <__aeabi_dmul>
 80088e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80088e6:	4656      	mov	r6, sl
 80088e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ec:	f7f8 f934 	bl	8000b58 <__aeabi_d2iz>
 80088f0:	4605      	mov	r5, r0
 80088f2:	f7f7 fe17 	bl	8000524 <__aeabi_i2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088fe:	f7f7 fcc3 	bl	8000288 <__aeabi_dsub>
 8008902:	3530      	adds	r5, #48	@ 0x30
 8008904:	f806 5b01 	strb.w	r5, [r6], #1
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	42a6      	cmp	r6, r4
 800890e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	d124      	bne.n	8008962 <_dtoa_r+0x662>
 8008918:	4bac      	ldr	r3, [pc, #688]	@ (8008bcc <_dtoa_r+0x8cc>)
 800891a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800891e:	f7f7 fcb5 	bl	800028c <__adddf3>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	f7f8 f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800892e:	2800      	cmp	r0, #0
 8008930:	d145      	bne.n	80089be <_dtoa_r+0x6be>
 8008932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008936:	49a5      	ldr	r1, [pc, #660]	@ (8008bcc <_dtoa_r+0x8cc>)
 8008938:	2000      	movs	r0, #0
 800893a:	f7f7 fca5 	bl	8000288 <__aeabi_dsub>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008946:	f7f8 f8c9 	bl	8000adc <__aeabi_dcmplt>
 800894a:	2800      	cmp	r0, #0
 800894c:	f43f aef5 	beq.w	800873a <_dtoa_r+0x43a>
 8008950:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008952:	1e73      	subs	r3, r6, #1
 8008954:	9315      	str	r3, [sp, #84]	@ 0x54
 8008956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800895a:	2b30      	cmp	r3, #48	@ 0x30
 800895c:	d0f8      	beq.n	8008950 <_dtoa_r+0x650>
 800895e:	9f04      	ldr	r7, [sp, #16]
 8008960:	e73e      	b.n	80087e0 <_dtoa_r+0x4e0>
 8008962:	4b9b      	ldr	r3, [pc, #620]	@ (8008bd0 <_dtoa_r+0x8d0>)
 8008964:	f7f7 fe48 	bl	80005f8 <__aeabi_dmul>
 8008968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896c:	e7bc      	b.n	80088e8 <_dtoa_r+0x5e8>
 800896e:	d10c      	bne.n	800898a <_dtoa_r+0x68a>
 8008970:	4b98      	ldr	r3, [pc, #608]	@ (8008bd4 <_dtoa_r+0x8d4>)
 8008972:	2200      	movs	r2, #0
 8008974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008978:	f7f7 fe3e 	bl	80005f8 <__aeabi_dmul>
 800897c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008980:	f7f8 f8c0 	bl	8000b04 <__aeabi_dcmpge>
 8008984:	2800      	cmp	r0, #0
 8008986:	f000 8157 	beq.w	8008c38 <_dtoa_r+0x938>
 800898a:	2400      	movs	r4, #0
 800898c:	4625      	mov	r5, r4
 800898e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008990:	43db      	mvns	r3, r3
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	4656      	mov	r6, sl
 8008996:	2700      	movs	r7, #0
 8008998:	4621      	mov	r1, r4
 800899a:	4658      	mov	r0, fp
 800899c:	f000 fafe 	bl	8008f9c <_Bfree>
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	d0dc      	beq.n	800895e <_dtoa_r+0x65e>
 80089a4:	b12f      	cbz	r7, 80089b2 <_dtoa_r+0x6b2>
 80089a6:	42af      	cmp	r7, r5
 80089a8:	d003      	beq.n	80089b2 <_dtoa_r+0x6b2>
 80089aa:	4639      	mov	r1, r7
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 faf5 	bl	8008f9c <_Bfree>
 80089b2:	4629      	mov	r1, r5
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 faf1 	bl	8008f9c <_Bfree>
 80089ba:	e7d0      	b.n	800895e <_dtoa_r+0x65e>
 80089bc:	9704      	str	r7, [sp, #16]
 80089be:	4633      	mov	r3, r6
 80089c0:	461e      	mov	r6, r3
 80089c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089c6:	2a39      	cmp	r2, #57	@ 0x39
 80089c8:	d107      	bne.n	80089da <_dtoa_r+0x6da>
 80089ca:	459a      	cmp	sl, r3
 80089cc:	d1f8      	bne.n	80089c0 <_dtoa_r+0x6c0>
 80089ce:	9a04      	ldr	r2, [sp, #16]
 80089d0:	3201      	adds	r2, #1
 80089d2:	9204      	str	r2, [sp, #16]
 80089d4:	2230      	movs	r2, #48	@ 0x30
 80089d6:	f88a 2000 	strb.w	r2, [sl]
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	3201      	adds	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	e7bd      	b.n	800895e <_dtoa_r+0x65e>
 80089e2:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd0 <_dtoa_r+0x8d0>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	f7f7 fe07 	bl	80005f8 <__aeabi_dmul>
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	4604      	mov	r4, r0
 80089f0:	460d      	mov	r5, r1
 80089f2:	f7f8 f869 	bl	8000ac8 <__aeabi_dcmpeq>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f43f aebb 	beq.w	8008772 <_dtoa_r+0x472>
 80089fc:	e6f0      	b.n	80087e0 <_dtoa_r+0x4e0>
 80089fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	f000 80db 	beq.w	8008bbc <_dtoa_r+0x8bc>
 8008a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a08:	2a01      	cmp	r2, #1
 8008a0a:	f300 80bf 	bgt.w	8008b8c <_dtoa_r+0x88c>
 8008a0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	f000 80b7 	beq.w	8008b84 <_dtoa_r+0x884>
 8008a16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a1c:	4646      	mov	r6, r8
 8008a1e:	9a08      	ldr	r2, [sp, #32]
 8008a20:	2101      	movs	r1, #1
 8008a22:	441a      	add	r2, r3
 8008a24:	4658      	mov	r0, fp
 8008a26:	4498      	add	r8, r3
 8008a28:	9208      	str	r2, [sp, #32]
 8008a2a:	f000 fb6b 	bl	8009104 <__i2b>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b15e      	cbz	r6, 8008a4a <_dtoa_r+0x74a>
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dd08      	ble.n	8008a4a <_dtoa_r+0x74a>
 8008a38:	42b3      	cmp	r3, r6
 8008a3a:	9a08      	ldr	r2, [sp, #32]
 8008a3c:	bfa8      	it	ge
 8008a3e:	4633      	movge	r3, r6
 8008a40:	eba8 0803 	sub.w	r8, r8, r3
 8008a44:	1af6      	subs	r6, r6, r3
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a4c:	b1f3      	cbz	r3, 8008a8c <_dtoa_r+0x78c>
 8008a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 80b7 	beq.w	8008bc4 <_dtoa_r+0x8c4>
 8008a56:	b18c      	cbz	r4, 8008a7c <_dtoa_r+0x77c>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	4658      	mov	r0, fp
 8008a5e:	f000 fc11 	bl	8009284 <__pow5mult>
 8008a62:	464a      	mov	r2, r9
 8008a64:	4601      	mov	r1, r0
 8008a66:	4605      	mov	r5, r0
 8008a68:	4658      	mov	r0, fp
 8008a6a:	f000 fb61 	bl	8009130 <__multiply>
 8008a6e:	4649      	mov	r1, r9
 8008a70:	9004      	str	r0, [sp, #16]
 8008a72:	4658      	mov	r0, fp
 8008a74:	f000 fa92 	bl	8008f9c <_Bfree>
 8008a78:	9b04      	ldr	r3, [sp, #16]
 8008a7a:	4699      	mov	r9, r3
 8008a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a7e:	1b1a      	subs	r2, r3, r4
 8008a80:	d004      	beq.n	8008a8c <_dtoa_r+0x78c>
 8008a82:	4649      	mov	r1, r9
 8008a84:	4658      	mov	r0, fp
 8008a86:	f000 fbfd 	bl	8009284 <__pow5mult>
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4658      	mov	r0, fp
 8008a90:	f000 fb38 	bl	8009104 <__i2b>
 8008a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a96:	4604      	mov	r4, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 81cf 	beq.w	8008e3c <_dtoa_r+0xb3c>
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4658      	mov	r0, fp
 8008aa4:	f000 fbee 	bl	8009284 <__pow5mult>
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	4604      	mov	r4, r0
 8008aae:	f300 8095 	bgt.w	8008bdc <_dtoa_r+0x8dc>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 8087 	bne.w	8008bc8 <_dtoa_r+0x8c8>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 8089 	bne.w	8008bd8 <_dtoa_r+0x8d8>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008acc:	0d1b      	lsrs	r3, r3, #20
 8008ace:	051b      	lsls	r3, r3, #20
 8008ad0:	b12b      	cbz	r3, 8008ade <_dtoa_r+0x7de>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	9308      	str	r3, [sp, #32]
 8008ad8:	f108 0801 	add.w	r8, r8, #1
 8008adc:	2301      	movs	r3, #1
 8008ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 81b0 	beq.w	8008e48 <_dtoa_r+0xb48>
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008aee:	6918      	ldr	r0, [r3, #16]
 8008af0:	f000 fabc 	bl	800906c <__hi0bits>
 8008af4:	f1c0 0020 	rsb	r0, r0, #32
 8008af8:	9b08      	ldr	r3, [sp, #32]
 8008afa:	4418      	add	r0, r3
 8008afc:	f010 001f 	ands.w	r0, r0, #31
 8008b00:	d077      	beq.n	8008bf2 <_dtoa_r+0x8f2>
 8008b02:	f1c0 0320 	rsb	r3, r0, #32
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	dd6b      	ble.n	8008be2 <_dtoa_r+0x8e2>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	f1c0 001c 	rsb	r0, r0, #28
 8008b10:	4403      	add	r3, r0
 8008b12:	4480      	add	r8, r0
 8008b14:	4406      	add	r6, r0
 8008b16:	9308      	str	r3, [sp, #32]
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	dd05      	ble.n	8008b2a <_dtoa_r+0x82a>
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4642      	mov	r2, r8
 8008b22:	4658      	mov	r0, fp
 8008b24:	f000 fc08 	bl	8009338 <__lshift>
 8008b28:	4681      	mov	r9, r0
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dd05      	ble.n	8008b3c <_dtoa_r+0x83c>
 8008b30:	4621      	mov	r1, r4
 8008b32:	461a      	mov	r2, r3
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 fbff 	bl	8009338 <__lshift>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d059      	beq.n	8008bf6 <_dtoa_r+0x8f6>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4648      	mov	r0, r9
 8008b46:	f000 fc63 	bl	8009410 <__mcmp>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	da53      	bge.n	8008bf6 <_dtoa_r+0x8f6>
 8008b4e:	1e7b      	subs	r3, r7, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	4649      	mov	r1, r9
 8008b54:	2300      	movs	r3, #0
 8008b56:	220a      	movs	r2, #10
 8008b58:	4658      	mov	r0, fp
 8008b5a:	f000 fa41 	bl	8008fe0 <__multadd>
 8008b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b60:	4681      	mov	r9, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 8172 	beq.w	8008e4c <_dtoa_r+0xb4c>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	220a      	movs	r2, #10
 8008b6e:	4658      	mov	r0, fp
 8008b70:	f000 fa36 	bl	8008fe0 <__multadd>
 8008b74:	9b00      	ldr	r3, [sp, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	4605      	mov	r5, r0
 8008b7a:	dc67      	bgt.n	8008c4c <_dtoa_r+0x94c>
 8008b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	dc41      	bgt.n	8008c06 <_dtoa_r+0x906>
 8008b82:	e063      	b.n	8008c4c <_dtoa_r+0x94c>
 8008b84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b8a:	e746      	b.n	8008a1a <_dtoa_r+0x71a>
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	1e5c      	subs	r4, r3, #1
 8008b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	bfbf      	itttt	lt
 8008b96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008b98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008b9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b9c:	1ae3      	sublt	r3, r4, r3
 8008b9e:	bfb4      	ite	lt
 8008ba0:	18d2      	addlt	r2, r2, r3
 8008ba2:	1b1c      	subge	r4, r3, r4
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	bfbc      	itt	lt
 8008ba8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008baa:	2400      	movlt	r4, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfb5      	itete	lt
 8008bb0:	eba8 0603 	sublt.w	r6, r8, r3
 8008bb4:	9b07      	ldrge	r3, [sp, #28]
 8008bb6:	2300      	movlt	r3, #0
 8008bb8:	4646      	movge	r6, r8
 8008bba:	e730      	b.n	8008a1e <_dtoa_r+0x71e>
 8008bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008bc0:	4646      	mov	r6, r8
 8008bc2:	e735      	b.n	8008a30 <_dtoa_r+0x730>
 8008bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bc6:	e75c      	b.n	8008a82 <_dtoa_r+0x782>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e788      	b.n	8008ade <_dtoa_r+0x7de>
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	40240000 	.word	0x40240000
 8008bd4:	40140000 	.word	0x40140000
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	e780      	b.n	8008ade <_dtoa_r+0x7de>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be0:	e782      	b.n	8008ae8 <_dtoa_r+0x7e8>
 8008be2:	d099      	beq.n	8008b18 <_dtoa_r+0x818>
 8008be4:	9a08      	ldr	r2, [sp, #32]
 8008be6:	331c      	adds	r3, #28
 8008be8:	441a      	add	r2, r3
 8008bea:	4498      	add	r8, r3
 8008bec:	441e      	add	r6, r3
 8008bee:	9208      	str	r2, [sp, #32]
 8008bf0:	e792      	b.n	8008b18 <_dtoa_r+0x818>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	e7f6      	b.n	8008be4 <_dtoa_r+0x8e4>
 8008bf6:	9b07      	ldr	r3, [sp, #28]
 8008bf8:	9704      	str	r7, [sp, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	dc20      	bgt.n	8008c40 <_dtoa_r+0x940>
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	dd1e      	ble.n	8008c44 <_dtoa_r+0x944>
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f47f aec0 	bne.w	800898e <_dtoa_r+0x68e>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	2205      	movs	r2, #5
 8008c12:	4658      	mov	r0, fp
 8008c14:	f000 f9e4 	bl	8008fe0 <__multadd>
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	f000 fbf7 	bl	8009410 <__mcmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f77f aeb3 	ble.w	800898e <_dtoa_r+0x68e>
 8008c28:	4656      	mov	r6, sl
 8008c2a:	2331      	movs	r3, #49	@ 0x31
 8008c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	3301      	adds	r3, #1
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	e6ae      	b.n	8008996 <_dtoa_r+0x696>
 8008c38:	9c07      	ldr	r4, [sp, #28]
 8008c3a:	9704      	str	r7, [sp, #16]
 8008c3c:	4625      	mov	r5, r4
 8008c3e:	e7f3      	b.n	8008c28 <_dtoa_r+0x928>
 8008c40:	9b07      	ldr	r3, [sp, #28]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8104 	beq.w	8008e54 <_dtoa_r+0xb54>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	dd05      	ble.n	8008c5c <_dtoa_r+0x95c>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4632      	mov	r2, r6
 8008c54:	4658      	mov	r0, fp
 8008c56:	f000 fb6f 	bl	8009338 <__lshift>
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d05a      	beq.n	8008d18 <_dtoa_r+0xa18>
 8008c62:	6869      	ldr	r1, [r5, #4]
 8008c64:	4658      	mov	r0, fp
 8008c66:	f000 f959 	bl	8008f1c <_Balloc>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	b928      	cbnz	r0, 8008c7a <_dtoa_r+0x97a>
 8008c6e:	4b84      	ldr	r3, [pc, #528]	@ (8008e80 <_dtoa_r+0xb80>)
 8008c70:	4602      	mov	r2, r0
 8008c72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c76:	f7ff bb5a 	b.w	800832e <_dtoa_r+0x2e>
 8008c7a:	692a      	ldr	r2, [r5, #16]
 8008c7c:	3202      	adds	r2, #2
 8008c7e:	0092      	lsls	r2, r2, #2
 8008c80:	f105 010c 	add.w	r1, r5, #12
 8008c84:	300c      	adds	r0, #12
 8008c86:	f000 fee9 	bl	8009a5c <memcpy>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f000 fb52 	bl	8009338 <__lshift>
 8008c94:	f10a 0301 	add.w	r3, sl, #1
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	9b00      	ldr	r3, [sp, #0]
 8008c9c:	4453      	add	r3, sl
 8008c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	462f      	mov	r7, r5
 8008ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008caa:	4605      	mov	r5, r0
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	4621      	mov	r1, r4
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	4648      	mov	r0, r9
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f7ff fa9a 	bl	80081ee <quorem>
 8008cba:	4639      	mov	r1, r7
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cc2:	4648      	mov	r0, r9
 8008cc4:	f000 fba4 	bl	8009410 <__mcmp>
 8008cc8:	462a      	mov	r2, r5
 8008cca:	9008      	str	r0, [sp, #32]
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4658      	mov	r0, fp
 8008cd0:	f000 fbba 	bl	8009448 <__mdiff>
 8008cd4:	68c2      	ldr	r2, [r0, #12]
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	bb02      	cbnz	r2, 8008d1c <_dtoa_r+0xa1c>
 8008cda:	4601      	mov	r1, r0
 8008cdc:	4648      	mov	r0, r9
 8008cde:	f000 fb97 	bl	8009410 <__mcmp>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cea:	f000 f957 	bl	8008f9c <_Bfree>
 8008cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cf2:	9e07      	ldr	r6, [sp, #28]
 8008cf4:	ea43 0102 	orr.w	r1, r3, r2
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cfa:	4319      	orrs	r1, r3
 8008cfc:	d110      	bne.n	8008d20 <_dtoa_r+0xa20>
 8008cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d02:	d029      	beq.n	8008d58 <_dtoa_r+0xa58>
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dd02      	ble.n	8008d10 <_dtoa_r+0xa10>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d10:	9b00      	ldr	r3, [sp, #0]
 8008d12:	f883 8000 	strb.w	r8, [r3]
 8008d16:	e63f      	b.n	8008998 <_dtoa_r+0x698>
 8008d18:	4628      	mov	r0, r5
 8008d1a:	e7bb      	b.n	8008c94 <_dtoa_r+0x994>
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	e7e1      	b.n	8008ce4 <_dtoa_r+0x9e4>
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	db04      	blt.n	8008d30 <_dtoa_r+0xa30>
 8008d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	d120      	bne.n	8008d72 <_dtoa_r+0xa72>
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	dded      	ble.n	8008d10 <_dtoa_r+0xa10>
 8008d34:	4649      	mov	r1, r9
 8008d36:	2201      	movs	r2, #1
 8008d38:	4658      	mov	r0, fp
 8008d3a:	f000 fafd 	bl	8009338 <__lshift>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4681      	mov	r9, r0
 8008d42:	f000 fb65 	bl	8009410 <__mcmp>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	dc03      	bgt.n	8008d52 <_dtoa_r+0xa52>
 8008d4a:	d1e1      	bne.n	8008d10 <_dtoa_r+0xa10>
 8008d4c:	f018 0f01 	tst.w	r8, #1
 8008d50:	d0de      	beq.n	8008d10 <_dtoa_r+0xa10>
 8008d52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d56:	d1d8      	bne.n	8008d0a <_dtoa_r+0xa0a>
 8008d58:	9a00      	ldr	r2, [sp, #0]
 8008d5a:	2339      	movs	r3, #57	@ 0x39
 8008d5c:	7013      	strb	r3, [r2, #0]
 8008d5e:	4633      	mov	r3, r6
 8008d60:	461e      	mov	r6, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d68:	2a39      	cmp	r2, #57	@ 0x39
 8008d6a:	d052      	beq.n	8008e12 <_dtoa_r+0xb12>
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e612      	b.n	8008998 <_dtoa_r+0x698>
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	dd07      	ble.n	8008d86 <_dtoa_r+0xa86>
 8008d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d7a:	d0ed      	beq.n	8008d58 <_dtoa_r+0xa58>
 8008d7c:	9a00      	ldr	r2, [sp, #0]
 8008d7e:	f108 0301 	add.w	r3, r8, #1
 8008d82:	7013      	strb	r3, [r2, #0]
 8008d84:	e608      	b.n	8008998 <_dtoa_r+0x698>
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	9a07      	ldr	r2, [sp, #28]
 8008d8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d028      	beq.n	8008de6 <_dtoa_r+0xae6>
 8008d94:	4649      	mov	r1, r9
 8008d96:	2300      	movs	r3, #0
 8008d98:	220a      	movs	r2, #10
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f000 f920 	bl	8008fe0 <__multadd>
 8008da0:	42af      	cmp	r7, r5
 8008da2:	4681      	mov	r9, r0
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	f04f 020a 	mov.w	r2, #10
 8008dac:	4639      	mov	r1, r7
 8008dae:	4658      	mov	r0, fp
 8008db0:	d107      	bne.n	8008dc2 <_dtoa_r+0xac2>
 8008db2:	f000 f915 	bl	8008fe0 <__multadd>
 8008db6:	4607      	mov	r7, r0
 8008db8:	4605      	mov	r5, r0
 8008dba:	9b07      	ldr	r3, [sp, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	e774      	b.n	8008cac <_dtoa_r+0x9ac>
 8008dc2:	f000 f90d 	bl	8008fe0 <__multadd>
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4607      	mov	r7, r0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	220a      	movs	r2, #10
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f000 f906 	bl	8008fe0 <__multadd>
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	e7f0      	b.n	8008dba <_dtoa_r+0xaba>
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfcc      	ite	gt
 8008dde:	461e      	movgt	r6, r3
 8008de0:	2601      	movle	r6, #1
 8008de2:	4456      	add	r6, sl
 8008de4:	2700      	movs	r7, #0
 8008de6:	4649      	mov	r1, r9
 8008de8:	2201      	movs	r2, #1
 8008dea:	4658      	mov	r0, fp
 8008dec:	f000 faa4 	bl	8009338 <__lshift>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4681      	mov	r9, r0
 8008df4:	f000 fb0c 	bl	8009410 <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dcb0      	bgt.n	8008d5e <_dtoa_r+0xa5e>
 8008dfc:	d102      	bne.n	8008e04 <_dtoa_r+0xb04>
 8008dfe:	f018 0f01 	tst.w	r8, #1
 8008e02:	d1ac      	bne.n	8008d5e <_dtoa_r+0xa5e>
 8008e04:	4633      	mov	r3, r6
 8008e06:	461e      	mov	r6, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a30      	cmp	r2, #48	@ 0x30
 8008e0e:	d0fa      	beq.n	8008e06 <_dtoa_r+0xb06>
 8008e10:	e5c2      	b.n	8008998 <_dtoa_r+0x698>
 8008e12:	459a      	cmp	sl, r3
 8008e14:	d1a4      	bne.n	8008d60 <_dtoa_r+0xa60>
 8008e16:	9b04      	ldr	r3, [sp, #16]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	2331      	movs	r3, #49	@ 0x31
 8008e1e:	f88a 3000 	strb.w	r3, [sl]
 8008e22:	e5b9      	b.n	8008998 <_dtoa_r+0x698>
 8008e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008e84 <_dtoa_r+0xb84>
 8008e2a:	b11b      	cbz	r3, 8008e34 <_dtoa_r+0xb34>
 8008e2c:	f10a 0308 	add.w	r3, sl, #8
 8008e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	4650      	mov	r0, sl
 8008e36:	b019      	add	sp, #100	@ 0x64
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	f77f ae37 	ble.w	8008ab2 <_dtoa_r+0x7b2>
 8008e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e48:	2001      	movs	r0, #1
 8008e4a:	e655      	b.n	8008af8 <_dtoa_r+0x7f8>
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f77f aed6 	ble.w	8008c00 <_dtoa_r+0x900>
 8008e54:	4656      	mov	r6, sl
 8008e56:	4621      	mov	r1, r4
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f7ff f9c8 	bl	80081ee <quorem>
 8008e5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e62:	f806 8b01 	strb.w	r8, [r6], #1
 8008e66:	9b00      	ldr	r3, [sp, #0]
 8008e68:	eba6 020a 	sub.w	r2, r6, sl
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	ddb3      	ble.n	8008dd8 <_dtoa_r+0xad8>
 8008e70:	4649      	mov	r1, r9
 8008e72:	2300      	movs	r3, #0
 8008e74:	220a      	movs	r2, #10
 8008e76:	4658      	mov	r0, fp
 8008e78:	f000 f8b2 	bl	8008fe0 <__multadd>
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	e7ea      	b.n	8008e56 <_dtoa_r+0xb56>
 8008e80:	0800a5d0 	.word	0x0800a5d0
 8008e84:	0800a554 	.word	0x0800a554

08008e88 <_free_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d041      	beq.n	8008f14 <_free_r+0x8c>
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f0c      	subs	r4, r1, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfb8      	it	lt
 8008e9a:	18e4      	addlt	r4, r4, r3
 8008e9c:	f7fe fb68 	bl	8007570 <__malloc_lock>
 8008ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f18 <_free_r+0x90>)
 8008ea2:	6813      	ldr	r3, [r2, #0]
 8008ea4:	b933      	cbnz	r3, 8008eb4 <_free_r+0x2c>
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	6014      	str	r4, [r2, #0]
 8008eaa:	4628      	mov	r0, r5
 8008eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb0:	f7fe bb64 	b.w	800757c <__malloc_unlock>
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d908      	bls.n	8008eca <_free_r+0x42>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	1821      	adds	r1, r4, r0
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	bf01      	itttt	eq
 8008ec0:	6819      	ldreq	r1, [r3, #0]
 8008ec2:	685b      	ldreq	r3, [r3, #4]
 8008ec4:	1809      	addeq	r1, r1, r0
 8008ec6:	6021      	streq	r1, [r4, #0]
 8008ec8:	e7ed      	b.n	8008ea6 <_free_r+0x1e>
 8008eca:	461a      	mov	r2, r3
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	b10b      	cbz	r3, 8008ed4 <_free_r+0x4c>
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d9fa      	bls.n	8008eca <_free_r+0x42>
 8008ed4:	6811      	ldr	r1, [r2, #0]
 8008ed6:	1850      	adds	r0, r2, r1
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d10b      	bne.n	8008ef4 <_free_r+0x6c>
 8008edc:	6820      	ldr	r0, [r4, #0]
 8008ede:	4401      	add	r1, r0
 8008ee0:	1850      	adds	r0, r2, r1
 8008ee2:	4283      	cmp	r3, r0
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	d1e0      	bne.n	8008eaa <_free_r+0x22>
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	6053      	str	r3, [r2, #4]
 8008eee:	4408      	add	r0, r1
 8008ef0:	6010      	str	r0, [r2, #0]
 8008ef2:	e7da      	b.n	8008eaa <_free_r+0x22>
 8008ef4:	d902      	bls.n	8008efc <_free_r+0x74>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	e7d6      	b.n	8008eaa <_free_r+0x22>
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	1821      	adds	r1, r4, r0
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf04      	itt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	bf04      	itt	eq
 8008f0c:	1809      	addeq	r1, r1, r0
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	6054      	str	r4, [r2, #4]
 8008f12:	e7ca      	b.n	8008eaa <_free_r+0x22>
 8008f14:	bd38      	pop	{r3, r4, r5, pc}
 8008f16:	bf00      	nop
 8008f18:	20000394 	.word	0x20000394

08008f1c <_Balloc>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	69c6      	ldr	r6, [r0, #28]
 8008f20:	4604      	mov	r4, r0
 8008f22:	460d      	mov	r5, r1
 8008f24:	b976      	cbnz	r6, 8008f44 <_Balloc+0x28>
 8008f26:	2010      	movs	r0, #16
 8008f28:	f7fe fa78 	bl	800741c <malloc>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	61e0      	str	r0, [r4, #28]
 8008f30:	b920      	cbnz	r0, 8008f3c <_Balloc+0x20>
 8008f32:	4b18      	ldr	r3, [pc, #96]	@ (8008f94 <_Balloc+0x78>)
 8008f34:	4818      	ldr	r0, [pc, #96]	@ (8008f98 <_Balloc+0x7c>)
 8008f36:	216b      	movs	r1, #107	@ 0x6b
 8008f38:	f000 fd9e 	bl	8009a78 <__assert_func>
 8008f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f40:	6006      	str	r6, [r0, #0]
 8008f42:	60c6      	str	r6, [r0, #12]
 8008f44:	69e6      	ldr	r6, [r4, #28]
 8008f46:	68f3      	ldr	r3, [r6, #12]
 8008f48:	b183      	cbz	r3, 8008f6c <_Balloc+0x50>
 8008f4a:	69e3      	ldr	r3, [r4, #28]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f52:	b9b8      	cbnz	r0, 8008f84 <_Balloc+0x68>
 8008f54:	2101      	movs	r1, #1
 8008f56:	fa01 f605 	lsl.w	r6, r1, r5
 8008f5a:	1d72      	adds	r2, r6, #5
 8008f5c:	0092      	lsls	r2, r2, #2
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 fda8 	bl	8009ab4 <_calloc_r>
 8008f64:	b160      	cbz	r0, 8008f80 <_Balloc+0x64>
 8008f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f6a:	e00e      	b.n	8008f8a <_Balloc+0x6e>
 8008f6c:	2221      	movs	r2, #33	@ 0x21
 8008f6e:	2104      	movs	r1, #4
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fd9f 	bl	8009ab4 <_calloc_r>
 8008f76:	69e3      	ldr	r3, [r4, #28]
 8008f78:	60f0      	str	r0, [r6, #12]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e4      	bne.n	8008f4a <_Balloc+0x2e>
 8008f80:	2000      	movs	r0, #0
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	6802      	ldr	r2, [r0, #0]
 8008f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f90:	e7f7      	b.n	8008f82 <_Balloc+0x66>
 8008f92:	bf00      	nop
 8008f94:	0800a561 	.word	0x0800a561
 8008f98:	0800a5e1 	.word	0x0800a5e1

08008f9c <_Bfree>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	69c6      	ldr	r6, [r0, #28]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	b976      	cbnz	r6, 8008fc4 <_Bfree+0x28>
 8008fa6:	2010      	movs	r0, #16
 8008fa8:	f7fe fa38 	bl	800741c <malloc>
 8008fac:	4602      	mov	r2, r0
 8008fae:	61e8      	str	r0, [r5, #28]
 8008fb0:	b920      	cbnz	r0, 8008fbc <_Bfree+0x20>
 8008fb2:	4b09      	ldr	r3, [pc, #36]	@ (8008fd8 <_Bfree+0x3c>)
 8008fb4:	4809      	ldr	r0, [pc, #36]	@ (8008fdc <_Bfree+0x40>)
 8008fb6:	218f      	movs	r1, #143	@ 0x8f
 8008fb8:	f000 fd5e 	bl	8009a78 <__assert_func>
 8008fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc0:	6006      	str	r6, [r0, #0]
 8008fc2:	60c6      	str	r6, [r0, #12]
 8008fc4:	b13c      	cbz	r4, 8008fd6 <_Bfree+0x3a>
 8008fc6:	69eb      	ldr	r3, [r5, #28]
 8008fc8:	6862      	ldr	r2, [r4, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fd0:	6021      	str	r1, [r4, #0]
 8008fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	0800a561 	.word	0x0800a561
 8008fdc:	0800a5e1 	.word	0x0800a5e1

08008fe0 <__multadd>:
 8008fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe4:	690d      	ldr	r5, [r1, #16]
 8008fe6:	4607      	mov	r7, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	461e      	mov	r6, r3
 8008fec:	f101 0c14 	add.w	ip, r1, #20
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ff6:	b299      	uxth	r1, r3
 8008ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8008ffc:	0c1e      	lsrs	r6, r3, #16
 8008ffe:	0c0b      	lsrs	r3, r1, #16
 8009000:	fb02 3306 	mla	r3, r2, r6, r3
 8009004:	b289      	uxth	r1, r1
 8009006:	3001      	adds	r0, #1
 8009008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800900c:	4285      	cmp	r5, r0
 800900e:	f84c 1b04 	str.w	r1, [ip], #4
 8009012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009016:	dcec      	bgt.n	8008ff2 <__multadd+0x12>
 8009018:	b30e      	cbz	r6, 800905e <__multadd+0x7e>
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	42ab      	cmp	r3, r5
 800901e:	dc19      	bgt.n	8009054 <__multadd+0x74>
 8009020:	6861      	ldr	r1, [r4, #4]
 8009022:	4638      	mov	r0, r7
 8009024:	3101      	adds	r1, #1
 8009026:	f7ff ff79 	bl	8008f1c <_Balloc>
 800902a:	4680      	mov	r8, r0
 800902c:	b928      	cbnz	r0, 800903a <__multadd+0x5a>
 800902e:	4602      	mov	r2, r0
 8009030:	4b0c      	ldr	r3, [pc, #48]	@ (8009064 <__multadd+0x84>)
 8009032:	480d      	ldr	r0, [pc, #52]	@ (8009068 <__multadd+0x88>)
 8009034:	21ba      	movs	r1, #186	@ 0xba
 8009036:	f000 fd1f 	bl	8009a78 <__assert_func>
 800903a:	6922      	ldr	r2, [r4, #16]
 800903c:	3202      	adds	r2, #2
 800903e:	f104 010c 	add.w	r1, r4, #12
 8009042:	0092      	lsls	r2, r2, #2
 8009044:	300c      	adds	r0, #12
 8009046:	f000 fd09 	bl	8009a5c <memcpy>
 800904a:	4621      	mov	r1, r4
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff ffa5 	bl	8008f9c <_Bfree>
 8009052:	4644      	mov	r4, r8
 8009054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009058:	3501      	adds	r5, #1
 800905a:	615e      	str	r6, [r3, #20]
 800905c:	6125      	str	r5, [r4, #16]
 800905e:	4620      	mov	r0, r4
 8009060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009064:	0800a5d0 	.word	0x0800a5d0
 8009068:	0800a5e1 	.word	0x0800a5e1

0800906c <__hi0bits>:
 800906c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009070:	4603      	mov	r3, r0
 8009072:	bf36      	itet	cc
 8009074:	0403      	lslcc	r3, r0, #16
 8009076:	2000      	movcs	r0, #0
 8009078:	2010      	movcc	r0, #16
 800907a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800907e:	bf3c      	itt	cc
 8009080:	021b      	lslcc	r3, r3, #8
 8009082:	3008      	addcc	r0, #8
 8009084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009088:	bf3c      	itt	cc
 800908a:	011b      	lslcc	r3, r3, #4
 800908c:	3004      	addcc	r0, #4
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009092:	bf3c      	itt	cc
 8009094:	009b      	lslcc	r3, r3, #2
 8009096:	3002      	addcc	r0, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	db05      	blt.n	80090a8 <__hi0bits+0x3c>
 800909c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090a0:	f100 0001 	add.w	r0, r0, #1
 80090a4:	bf08      	it	eq
 80090a6:	2020      	moveq	r0, #32
 80090a8:	4770      	bx	lr

080090aa <__lo0bits>:
 80090aa:	6803      	ldr	r3, [r0, #0]
 80090ac:	4602      	mov	r2, r0
 80090ae:	f013 0007 	ands.w	r0, r3, #7
 80090b2:	d00b      	beq.n	80090cc <__lo0bits+0x22>
 80090b4:	07d9      	lsls	r1, r3, #31
 80090b6:	d421      	bmi.n	80090fc <__lo0bits+0x52>
 80090b8:	0798      	lsls	r0, r3, #30
 80090ba:	bf49      	itett	mi
 80090bc:	085b      	lsrmi	r3, r3, #1
 80090be:	089b      	lsrpl	r3, r3, #2
 80090c0:	2001      	movmi	r0, #1
 80090c2:	6013      	strmi	r3, [r2, #0]
 80090c4:	bf5c      	itt	pl
 80090c6:	6013      	strpl	r3, [r2, #0]
 80090c8:	2002      	movpl	r0, #2
 80090ca:	4770      	bx	lr
 80090cc:	b299      	uxth	r1, r3
 80090ce:	b909      	cbnz	r1, 80090d4 <__lo0bits+0x2a>
 80090d0:	0c1b      	lsrs	r3, r3, #16
 80090d2:	2010      	movs	r0, #16
 80090d4:	b2d9      	uxtb	r1, r3
 80090d6:	b909      	cbnz	r1, 80090dc <__lo0bits+0x32>
 80090d8:	3008      	adds	r0, #8
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	0719      	lsls	r1, r3, #28
 80090de:	bf04      	itt	eq
 80090e0:	091b      	lsreq	r3, r3, #4
 80090e2:	3004      	addeq	r0, #4
 80090e4:	0799      	lsls	r1, r3, #30
 80090e6:	bf04      	itt	eq
 80090e8:	089b      	lsreq	r3, r3, #2
 80090ea:	3002      	addeq	r0, #2
 80090ec:	07d9      	lsls	r1, r3, #31
 80090ee:	d403      	bmi.n	80090f8 <__lo0bits+0x4e>
 80090f0:	085b      	lsrs	r3, r3, #1
 80090f2:	f100 0001 	add.w	r0, r0, #1
 80090f6:	d003      	beq.n	8009100 <__lo0bits+0x56>
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	4770      	bx	lr
 80090fc:	2000      	movs	r0, #0
 80090fe:	4770      	bx	lr
 8009100:	2020      	movs	r0, #32
 8009102:	4770      	bx	lr

08009104 <__i2b>:
 8009104:	b510      	push	{r4, lr}
 8009106:	460c      	mov	r4, r1
 8009108:	2101      	movs	r1, #1
 800910a:	f7ff ff07 	bl	8008f1c <_Balloc>
 800910e:	4602      	mov	r2, r0
 8009110:	b928      	cbnz	r0, 800911e <__i2b+0x1a>
 8009112:	4b05      	ldr	r3, [pc, #20]	@ (8009128 <__i2b+0x24>)
 8009114:	4805      	ldr	r0, [pc, #20]	@ (800912c <__i2b+0x28>)
 8009116:	f240 1145 	movw	r1, #325	@ 0x145
 800911a:	f000 fcad 	bl	8009a78 <__assert_func>
 800911e:	2301      	movs	r3, #1
 8009120:	6144      	str	r4, [r0, #20]
 8009122:	6103      	str	r3, [r0, #16]
 8009124:	bd10      	pop	{r4, pc}
 8009126:	bf00      	nop
 8009128:	0800a5d0 	.word	0x0800a5d0
 800912c:	0800a5e1 	.word	0x0800a5e1

08009130 <__multiply>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	4614      	mov	r4, r2
 8009136:	690a      	ldr	r2, [r1, #16]
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	429a      	cmp	r2, r3
 800913c:	bfa8      	it	ge
 800913e:	4623      	movge	r3, r4
 8009140:	460f      	mov	r7, r1
 8009142:	bfa4      	itt	ge
 8009144:	460c      	movge	r4, r1
 8009146:	461f      	movge	r7, r3
 8009148:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800914c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009150:	68a3      	ldr	r3, [r4, #8]
 8009152:	6861      	ldr	r1, [r4, #4]
 8009154:	eb0a 0609 	add.w	r6, sl, r9
 8009158:	42b3      	cmp	r3, r6
 800915a:	b085      	sub	sp, #20
 800915c:	bfb8      	it	lt
 800915e:	3101      	addlt	r1, #1
 8009160:	f7ff fedc 	bl	8008f1c <_Balloc>
 8009164:	b930      	cbnz	r0, 8009174 <__multiply+0x44>
 8009166:	4602      	mov	r2, r0
 8009168:	4b44      	ldr	r3, [pc, #272]	@ (800927c <__multiply+0x14c>)
 800916a:	4845      	ldr	r0, [pc, #276]	@ (8009280 <__multiply+0x150>)
 800916c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009170:	f000 fc82 	bl	8009a78 <__assert_func>
 8009174:	f100 0514 	add.w	r5, r0, #20
 8009178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800917c:	462b      	mov	r3, r5
 800917e:	2200      	movs	r2, #0
 8009180:	4543      	cmp	r3, r8
 8009182:	d321      	bcc.n	80091c8 <__multiply+0x98>
 8009184:	f107 0114 	add.w	r1, r7, #20
 8009188:	f104 0214 	add.w	r2, r4, #20
 800918c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009190:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	1b13      	subs	r3, r2, r4
 8009198:	3b15      	subs	r3, #21
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	3304      	adds	r3, #4
 80091a0:	f104 0715 	add.w	r7, r4, #21
 80091a4:	42ba      	cmp	r2, r7
 80091a6:	bf38      	it	cc
 80091a8:	2304      	movcc	r3, #4
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	9103      	str	r1, [sp, #12]
 80091b0:	428b      	cmp	r3, r1
 80091b2:	d80c      	bhi.n	80091ce <__multiply+0x9e>
 80091b4:	2e00      	cmp	r6, #0
 80091b6:	dd03      	ble.n	80091c0 <__multiply+0x90>
 80091b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d05b      	beq.n	8009278 <__multiply+0x148>
 80091c0:	6106      	str	r6, [r0, #16]
 80091c2:	b005      	add	sp, #20
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	f843 2b04 	str.w	r2, [r3], #4
 80091cc:	e7d8      	b.n	8009180 <__multiply+0x50>
 80091ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80091d2:	f1ba 0f00 	cmp.w	sl, #0
 80091d6:	d024      	beq.n	8009222 <__multiply+0xf2>
 80091d8:	f104 0e14 	add.w	lr, r4, #20
 80091dc:	46a9      	mov	r9, r5
 80091de:	f04f 0c00 	mov.w	ip, #0
 80091e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091e6:	f8d9 3000 	ldr.w	r3, [r9]
 80091ea:	fa1f fb87 	uxth.w	fp, r7
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80091f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80091f8:	f8d9 7000 	ldr.w	r7, [r9]
 80091fc:	4463      	add	r3, ip
 80091fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009202:	fb0a c70b 	mla	r7, sl, fp, ip
 8009206:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800920a:	b29b      	uxth	r3, r3
 800920c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009210:	4572      	cmp	r2, lr
 8009212:	f849 3b04 	str.w	r3, [r9], #4
 8009216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800921a:	d8e2      	bhi.n	80091e2 <__multiply+0xb2>
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	f845 c003 	str.w	ip, [r5, r3]
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009228:	3104      	adds	r1, #4
 800922a:	f1b9 0f00 	cmp.w	r9, #0
 800922e:	d021      	beq.n	8009274 <__multiply+0x144>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	f104 0c14 	add.w	ip, r4, #20
 8009236:	46ae      	mov	lr, r5
 8009238:	f04f 0a00 	mov.w	sl, #0
 800923c:	f8bc b000 	ldrh.w	fp, [ip]
 8009240:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009244:	fb09 770b 	mla	r7, r9, fp, r7
 8009248:	4457      	add	r7, sl
 800924a:	b29b      	uxth	r3, r3
 800924c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009250:	f84e 3b04 	str.w	r3, [lr], #4
 8009254:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800925c:	f8be 3000 	ldrh.w	r3, [lr]
 8009260:	fb09 330a 	mla	r3, r9, sl, r3
 8009264:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009268:	4562      	cmp	r2, ip
 800926a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800926e:	d8e5      	bhi.n	800923c <__multiply+0x10c>
 8009270:	9f01      	ldr	r7, [sp, #4]
 8009272:	51eb      	str	r3, [r5, r7]
 8009274:	3504      	adds	r5, #4
 8009276:	e799      	b.n	80091ac <__multiply+0x7c>
 8009278:	3e01      	subs	r6, #1
 800927a:	e79b      	b.n	80091b4 <__multiply+0x84>
 800927c:	0800a5d0 	.word	0x0800a5d0
 8009280:	0800a5e1 	.word	0x0800a5e1

08009284 <__pow5mult>:
 8009284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009288:	4615      	mov	r5, r2
 800928a:	f012 0203 	ands.w	r2, r2, #3
 800928e:	4607      	mov	r7, r0
 8009290:	460e      	mov	r6, r1
 8009292:	d007      	beq.n	80092a4 <__pow5mult+0x20>
 8009294:	4c25      	ldr	r4, [pc, #148]	@ (800932c <__pow5mult+0xa8>)
 8009296:	3a01      	subs	r2, #1
 8009298:	2300      	movs	r3, #0
 800929a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800929e:	f7ff fe9f 	bl	8008fe0 <__multadd>
 80092a2:	4606      	mov	r6, r0
 80092a4:	10ad      	asrs	r5, r5, #2
 80092a6:	d03d      	beq.n	8009324 <__pow5mult+0xa0>
 80092a8:	69fc      	ldr	r4, [r7, #28]
 80092aa:	b97c      	cbnz	r4, 80092cc <__pow5mult+0x48>
 80092ac:	2010      	movs	r0, #16
 80092ae:	f7fe f8b5 	bl	800741c <malloc>
 80092b2:	4602      	mov	r2, r0
 80092b4:	61f8      	str	r0, [r7, #28]
 80092b6:	b928      	cbnz	r0, 80092c4 <__pow5mult+0x40>
 80092b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009330 <__pow5mult+0xac>)
 80092ba:	481e      	ldr	r0, [pc, #120]	@ (8009334 <__pow5mult+0xb0>)
 80092bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092c0:	f000 fbda 	bl	8009a78 <__assert_func>
 80092c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092c8:	6004      	str	r4, [r0, #0]
 80092ca:	60c4      	str	r4, [r0, #12]
 80092cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092d4:	b94c      	cbnz	r4, 80092ea <__pow5mult+0x66>
 80092d6:	f240 2171 	movw	r1, #625	@ 0x271
 80092da:	4638      	mov	r0, r7
 80092dc:	f7ff ff12 	bl	8009104 <__i2b>
 80092e0:	2300      	movs	r3, #0
 80092e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092e6:	4604      	mov	r4, r0
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	f04f 0900 	mov.w	r9, #0
 80092ee:	07eb      	lsls	r3, r5, #31
 80092f0:	d50a      	bpl.n	8009308 <__pow5mult+0x84>
 80092f2:	4631      	mov	r1, r6
 80092f4:	4622      	mov	r2, r4
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7ff ff1a 	bl	8009130 <__multiply>
 80092fc:	4631      	mov	r1, r6
 80092fe:	4680      	mov	r8, r0
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff fe4b 	bl	8008f9c <_Bfree>
 8009306:	4646      	mov	r6, r8
 8009308:	106d      	asrs	r5, r5, #1
 800930a:	d00b      	beq.n	8009324 <__pow5mult+0xa0>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	b938      	cbnz	r0, 8009320 <__pow5mult+0x9c>
 8009310:	4622      	mov	r2, r4
 8009312:	4621      	mov	r1, r4
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff ff0b 	bl	8009130 <__multiply>
 800931a:	6020      	str	r0, [r4, #0]
 800931c:	f8c0 9000 	str.w	r9, [r0]
 8009320:	4604      	mov	r4, r0
 8009322:	e7e4      	b.n	80092ee <__pow5mult+0x6a>
 8009324:	4630      	mov	r0, r6
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	bf00      	nop
 800932c:	0800a63c 	.word	0x0800a63c
 8009330:	0800a561 	.word	0x0800a561
 8009334:	0800a5e1 	.word	0x0800a5e1

08009338 <__lshift>:
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	460c      	mov	r4, r1
 800933e:	6849      	ldr	r1, [r1, #4]
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009346:	68a3      	ldr	r3, [r4, #8]
 8009348:	4607      	mov	r7, r0
 800934a:	4691      	mov	r9, r2
 800934c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009350:	f108 0601 	add.w	r6, r8, #1
 8009354:	42b3      	cmp	r3, r6
 8009356:	db0b      	blt.n	8009370 <__lshift+0x38>
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff fddf 	bl	8008f1c <_Balloc>
 800935e:	4605      	mov	r5, r0
 8009360:	b948      	cbnz	r0, 8009376 <__lshift+0x3e>
 8009362:	4602      	mov	r2, r0
 8009364:	4b28      	ldr	r3, [pc, #160]	@ (8009408 <__lshift+0xd0>)
 8009366:	4829      	ldr	r0, [pc, #164]	@ (800940c <__lshift+0xd4>)
 8009368:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800936c:	f000 fb84 	bl	8009a78 <__assert_func>
 8009370:	3101      	adds	r1, #1
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	e7ee      	b.n	8009354 <__lshift+0x1c>
 8009376:	2300      	movs	r3, #0
 8009378:	f100 0114 	add.w	r1, r0, #20
 800937c:	f100 0210 	add.w	r2, r0, #16
 8009380:	4618      	mov	r0, r3
 8009382:	4553      	cmp	r3, sl
 8009384:	db33      	blt.n	80093ee <__lshift+0xb6>
 8009386:	6920      	ldr	r0, [r4, #16]
 8009388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800938c:	f104 0314 	add.w	r3, r4, #20
 8009390:	f019 091f 	ands.w	r9, r9, #31
 8009394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800939c:	d02b      	beq.n	80093f6 <__lshift+0xbe>
 800939e:	f1c9 0e20 	rsb	lr, r9, #32
 80093a2:	468a      	mov	sl, r1
 80093a4:	2200      	movs	r2, #0
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	fa00 f009 	lsl.w	r0, r0, r9
 80093ac:	4310      	orrs	r0, r2
 80093ae:	f84a 0b04 	str.w	r0, [sl], #4
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	459c      	cmp	ip, r3
 80093b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093bc:	d8f3      	bhi.n	80093a6 <__lshift+0x6e>
 80093be:	ebac 0304 	sub.w	r3, ip, r4
 80093c2:	3b15      	subs	r3, #21
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	3304      	adds	r3, #4
 80093ca:	f104 0015 	add.w	r0, r4, #21
 80093ce:	4584      	cmp	ip, r0
 80093d0:	bf38      	it	cc
 80093d2:	2304      	movcc	r3, #4
 80093d4:	50ca      	str	r2, [r1, r3]
 80093d6:	b10a      	cbz	r2, 80093dc <__lshift+0xa4>
 80093d8:	f108 0602 	add.w	r6, r8, #2
 80093dc:	3e01      	subs	r6, #1
 80093de:	4638      	mov	r0, r7
 80093e0:	612e      	str	r6, [r5, #16]
 80093e2:	4621      	mov	r1, r4
 80093e4:	f7ff fdda 	bl	8008f9c <_Bfree>
 80093e8:	4628      	mov	r0, r5
 80093ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80093f2:	3301      	adds	r3, #1
 80093f4:	e7c5      	b.n	8009382 <__lshift+0x4a>
 80093f6:	3904      	subs	r1, #4
 80093f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009400:	459c      	cmp	ip, r3
 8009402:	d8f9      	bhi.n	80093f8 <__lshift+0xc0>
 8009404:	e7ea      	b.n	80093dc <__lshift+0xa4>
 8009406:	bf00      	nop
 8009408:	0800a5d0 	.word	0x0800a5d0
 800940c:	0800a5e1 	.word	0x0800a5e1

08009410 <__mcmp>:
 8009410:	690a      	ldr	r2, [r1, #16]
 8009412:	4603      	mov	r3, r0
 8009414:	6900      	ldr	r0, [r0, #16]
 8009416:	1a80      	subs	r0, r0, r2
 8009418:	b530      	push	{r4, r5, lr}
 800941a:	d10e      	bne.n	800943a <__mcmp+0x2a>
 800941c:	3314      	adds	r3, #20
 800941e:	3114      	adds	r1, #20
 8009420:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800942c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009430:	4295      	cmp	r5, r2
 8009432:	d003      	beq.n	800943c <__mcmp+0x2c>
 8009434:	d205      	bcs.n	8009442 <__mcmp+0x32>
 8009436:	f04f 30ff 	mov.w	r0, #4294967295
 800943a:	bd30      	pop	{r4, r5, pc}
 800943c:	42a3      	cmp	r3, r4
 800943e:	d3f3      	bcc.n	8009428 <__mcmp+0x18>
 8009440:	e7fb      	b.n	800943a <__mcmp+0x2a>
 8009442:	2001      	movs	r0, #1
 8009444:	e7f9      	b.n	800943a <__mcmp+0x2a>
	...

08009448 <__mdiff>:
 8009448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	4689      	mov	r9, r1
 800944e:	4606      	mov	r6, r0
 8009450:	4611      	mov	r1, r2
 8009452:	4648      	mov	r0, r9
 8009454:	4614      	mov	r4, r2
 8009456:	f7ff ffdb 	bl	8009410 <__mcmp>
 800945a:	1e05      	subs	r5, r0, #0
 800945c:	d112      	bne.n	8009484 <__mdiff+0x3c>
 800945e:	4629      	mov	r1, r5
 8009460:	4630      	mov	r0, r6
 8009462:	f7ff fd5b 	bl	8008f1c <_Balloc>
 8009466:	4602      	mov	r2, r0
 8009468:	b928      	cbnz	r0, 8009476 <__mdiff+0x2e>
 800946a:	4b3f      	ldr	r3, [pc, #252]	@ (8009568 <__mdiff+0x120>)
 800946c:	f240 2137 	movw	r1, #567	@ 0x237
 8009470:	483e      	ldr	r0, [pc, #248]	@ (800956c <__mdiff+0x124>)
 8009472:	f000 fb01 	bl	8009a78 <__assert_func>
 8009476:	2301      	movs	r3, #1
 8009478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800947c:	4610      	mov	r0, r2
 800947e:	b003      	add	sp, #12
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	bfbc      	itt	lt
 8009486:	464b      	movlt	r3, r9
 8009488:	46a1      	movlt	r9, r4
 800948a:	4630      	mov	r0, r6
 800948c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009490:	bfba      	itte	lt
 8009492:	461c      	movlt	r4, r3
 8009494:	2501      	movlt	r5, #1
 8009496:	2500      	movge	r5, #0
 8009498:	f7ff fd40 	bl	8008f1c <_Balloc>
 800949c:	4602      	mov	r2, r0
 800949e:	b918      	cbnz	r0, 80094a8 <__mdiff+0x60>
 80094a0:	4b31      	ldr	r3, [pc, #196]	@ (8009568 <__mdiff+0x120>)
 80094a2:	f240 2145 	movw	r1, #581	@ 0x245
 80094a6:	e7e3      	b.n	8009470 <__mdiff+0x28>
 80094a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094ac:	6926      	ldr	r6, [r4, #16]
 80094ae:	60c5      	str	r5, [r0, #12]
 80094b0:	f109 0310 	add.w	r3, r9, #16
 80094b4:	f109 0514 	add.w	r5, r9, #20
 80094b8:	f104 0e14 	add.w	lr, r4, #20
 80094bc:	f100 0b14 	add.w	fp, r0, #20
 80094c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	46d9      	mov	r9, fp
 80094cc:	f04f 0c00 	mov.w	ip, #0
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	fa1f f38a 	uxth.w	r3, sl
 80094e0:	4619      	mov	r1, r3
 80094e2:	b283      	uxth	r3, r0
 80094e4:	1acb      	subs	r3, r1, r3
 80094e6:	0c00      	lsrs	r0, r0, #16
 80094e8:	4463      	add	r3, ip
 80094ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094f8:	4576      	cmp	r6, lr
 80094fa:	f849 3b04 	str.w	r3, [r9], #4
 80094fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009502:	d8e5      	bhi.n	80094d0 <__mdiff+0x88>
 8009504:	1b33      	subs	r3, r6, r4
 8009506:	3b15      	subs	r3, #21
 8009508:	f023 0303 	bic.w	r3, r3, #3
 800950c:	3415      	adds	r4, #21
 800950e:	3304      	adds	r3, #4
 8009510:	42a6      	cmp	r6, r4
 8009512:	bf38      	it	cc
 8009514:	2304      	movcc	r3, #4
 8009516:	441d      	add	r5, r3
 8009518:	445b      	add	r3, fp
 800951a:	461e      	mov	r6, r3
 800951c:	462c      	mov	r4, r5
 800951e:	4544      	cmp	r4, r8
 8009520:	d30e      	bcc.n	8009540 <__mdiff+0xf8>
 8009522:	f108 0103 	add.w	r1, r8, #3
 8009526:	1b49      	subs	r1, r1, r5
 8009528:	f021 0103 	bic.w	r1, r1, #3
 800952c:	3d03      	subs	r5, #3
 800952e:	45a8      	cmp	r8, r5
 8009530:	bf38      	it	cc
 8009532:	2100      	movcc	r1, #0
 8009534:	440b      	add	r3, r1
 8009536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800953a:	b191      	cbz	r1, 8009562 <__mdiff+0x11a>
 800953c:	6117      	str	r7, [r2, #16]
 800953e:	e79d      	b.n	800947c <__mdiff+0x34>
 8009540:	f854 1b04 	ldr.w	r1, [r4], #4
 8009544:	46e6      	mov	lr, ip
 8009546:	0c08      	lsrs	r0, r1, #16
 8009548:	fa1c fc81 	uxtah	ip, ip, r1
 800954c:	4471      	add	r1, lr
 800954e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009552:	b289      	uxth	r1, r1
 8009554:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009558:	f846 1b04 	str.w	r1, [r6], #4
 800955c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009560:	e7dd      	b.n	800951e <__mdiff+0xd6>
 8009562:	3f01      	subs	r7, #1
 8009564:	e7e7      	b.n	8009536 <__mdiff+0xee>
 8009566:	bf00      	nop
 8009568:	0800a5d0 	.word	0x0800a5d0
 800956c:	0800a5e1 	.word	0x0800a5e1

08009570 <__d2b>:
 8009570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009574:	460f      	mov	r7, r1
 8009576:	2101      	movs	r1, #1
 8009578:	ec59 8b10 	vmov	r8, r9, d0
 800957c:	4616      	mov	r6, r2
 800957e:	f7ff fccd 	bl	8008f1c <_Balloc>
 8009582:	4604      	mov	r4, r0
 8009584:	b930      	cbnz	r0, 8009594 <__d2b+0x24>
 8009586:	4602      	mov	r2, r0
 8009588:	4b23      	ldr	r3, [pc, #140]	@ (8009618 <__d2b+0xa8>)
 800958a:	4824      	ldr	r0, [pc, #144]	@ (800961c <__d2b+0xac>)
 800958c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009590:	f000 fa72 	bl	8009a78 <__assert_func>
 8009594:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800959c:	b10d      	cbz	r5, 80095a2 <__d2b+0x32>
 800959e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	f1b8 0300 	subs.w	r3, r8, #0
 80095a8:	d023      	beq.n	80095f2 <__d2b+0x82>
 80095aa:	4668      	mov	r0, sp
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	f7ff fd7c 	bl	80090aa <__lo0bits>
 80095b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095b6:	b1d0      	cbz	r0, 80095ee <__d2b+0x7e>
 80095b8:	f1c0 0320 	rsb	r3, r0, #32
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	430b      	orrs	r3, r1
 80095c2:	40c2      	lsrs	r2, r0
 80095c4:	6163      	str	r3, [r4, #20]
 80095c6:	9201      	str	r2, [sp, #4]
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	61a3      	str	r3, [r4, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bf0c      	ite	eq
 80095d0:	2201      	moveq	r2, #1
 80095d2:	2202      	movne	r2, #2
 80095d4:	6122      	str	r2, [r4, #16]
 80095d6:	b1a5      	cbz	r5, 8009602 <__d2b+0x92>
 80095d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095dc:	4405      	add	r5, r0
 80095de:	603d      	str	r5, [r7, #0]
 80095e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095e4:	6030      	str	r0, [r6, #0]
 80095e6:	4620      	mov	r0, r4
 80095e8:	b003      	add	sp, #12
 80095ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ee:	6161      	str	r1, [r4, #20]
 80095f0:	e7ea      	b.n	80095c8 <__d2b+0x58>
 80095f2:	a801      	add	r0, sp, #4
 80095f4:	f7ff fd59 	bl	80090aa <__lo0bits>
 80095f8:	9b01      	ldr	r3, [sp, #4]
 80095fa:	6163      	str	r3, [r4, #20]
 80095fc:	3020      	adds	r0, #32
 80095fe:	2201      	movs	r2, #1
 8009600:	e7e8      	b.n	80095d4 <__d2b+0x64>
 8009602:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009606:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800960a:	6038      	str	r0, [r7, #0]
 800960c:	6918      	ldr	r0, [r3, #16]
 800960e:	f7ff fd2d 	bl	800906c <__hi0bits>
 8009612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009616:	e7e5      	b.n	80095e4 <__d2b+0x74>
 8009618:	0800a5d0 	.word	0x0800a5d0
 800961c:	0800a5e1 	.word	0x0800a5e1

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	461f      	mov	r7, r3
 8009628:	42be      	cmp	r6, r7
 800962a:	680b      	ldr	r3, [r1, #0]
 800962c:	4682      	mov	sl, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4690      	mov	r8, r2
 8009632:	d82d      	bhi.n	8009690 <__ssputs_r+0x70>
 8009634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800963c:	d026      	beq.n	800968c <__ssputs_r+0x6c>
 800963e:	6965      	ldr	r5, [r4, #20]
 8009640:	6909      	ldr	r1, [r1, #16]
 8009642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009646:	eba3 0901 	sub.w	r9, r3, r1
 800964a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964e:	1c7b      	adds	r3, r7, #1
 8009650:	444b      	add	r3, r9
 8009652:	106d      	asrs	r5, r5, #1
 8009654:	429d      	cmp	r5, r3
 8009656:	bf38      	it	cc
 8009658:	461d      	movcc	r5, r3
 800965a:	0553      	lsls	r3, r2, #21
 800965c:	d527      	bpl.n	80096ae <__ssputs_r+0x8e>
 800965e:	4629      	mov	r1, r5
 8009660:	f7fd ff06 	bl	8007470 <_malloc_r>
 8009664:	4606      	mov	r6, r0
 8009666:	b360      	cbz	r0, 80096c2 <__ssputs_r+0xa2>
 8009668:	6921      	ldr	r1, [r4, #16]
 800966a:	464a      	mov	r2, r9
 800966c:	f000 f9f6 	bl	8009a5c <memcpy>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	6126      	str	r6, [r4, #16]
 800967e:	6165      	str	r5, [r4, #20]
 8009680:	444e      	add	r6, r9
 8009682:	eba5 0509 	sub.w	r5, r5, r9
 8009686:	6026      	str	r6, [r4, #0]
 8009688:	60a5      	str	r5, [r4, #8]
 800968a:	463e      	mov	r6, r7
 800968c:	42be      	cmp	r6, r7
 800968e:	d900      	bls.n	8009692 <__ssputs_r+0x72>
 8009690:	463e      	mov	r6, r7
 8009692:	6820      	ldr	r0, [r4, #0]
 8009694:	4632      	mov	r2, r6
 8009696:	4641      	mov	r1, r8
 8009698:	f000 f9c6 	bl	8009a28 <memmove>
 800969c:	68a3      	ldr	r3, [r4, #8]
 800969e:	1b9b      	subs	r3, r3, r6
 80096a0:	60a3      	str	r3, [r4, #8]
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	4433      	add	r3, r6
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	2000      	movs	r0, #0
 80096aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ae:	462a      	mov	r2, r5
 80096b0:	f000 fa26 	bl	8009b00 <_realloc_r>
 80096b4:	4606      	mov	r6, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d1e0      	bne.n	800967c <__ssputs_r+0x5c>
 80096ba:	6921      	ldr	r1, [r4, #16]
 80096bc:	4650      	mov	r0, sl
 80096be:	f7ff fbe3 	bl	8008e88 <_free_r>
 80096c2:	230c      	movs	r3, #12
 80096c4:	f8ca 3000 	str.w	r3, [sl]
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	e7e9      	b.n	80096aa <__ssputs_r+0x8a>
	...

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4698      	mov	r8, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061b      	lsls	r3, r3, #24
 80096e2:	b09d      	sub	sp, #116	@ 0x74
 80096e4:	4607      	mov	r7, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	d510      	bpl.n	800970e <_svfiprintf_r+0x36>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b973      	cbnz	r3, 800970e <_svfiprintf_r+0x36>
 80096f0:	2140      	movs	r1, #64	@ 0x40
 80096f2:	f7fd febd 	bl	8007470 <_malloc_r>
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	6128      	str	r0, [r5, #16]
 80096fa:	b930      	cbnz	r0, 800970a <_svfiprintf_r+0x32>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b01d      	add	sp, #116	@ 0x74
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970a:	2340      	movs	r3, #64	@ 0x40
 800970c:	616b      	str	r3, [r5, #20]
 800970e:	2300      	movs	r3, #0
 8009710:	9309      	str	r3, [sp, #36]	@ 0x24
 8009712:	2320      	movs	r3, #32
 8009714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009718:	f8cd 800c 	str.w	r8, [sp, #12]
 800971c:	2330      	movs	r3, #48	@ 0x30
 800971e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098bc <_svfiprintf_r+0x1e4>
 8009722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009726:	f04f 0901 	mov.w	r9, #1
 800972a:	4623      	mov	r3, r4
 800972c:	469a      	mov	sl, r3
 800972e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009732:	b10a      	cbz	r2, 8009738 <_svfiprintf_r+0x60>
 8009734:	2a25      	cmp	r2, #37	@ 0x25
 8009736:	d1f9      	bne.n	800972c <_svfiprintf_r+0x54>
 8009738:	ebba 0b04 	subs.w	fp, sl, r4
 800973c:	d00b      	beq.n	8009756 <_svfiprintf_r+0x7e>
 800973e:	465b      	mov	r3, fp
 8009740:	4622      	mov	r2, r4
 8009742:	4629      	mov	r1, r5
 8009744:	4638      	mov	r0, r7
 8009746:	f7ff ff6b 	bl	8009620 <__ssputs_r>
 800974a:	3001      	adds	r0, #1
 800974c:	f000 80a7 	beq.w	800989e <_svfiprintf_r+0x1c6>
 8009750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009752:	445a      	add	r2, fp
 8009754:	9209      	str	r2, [sp, #36]	@ 0x24
 8009756:	f89a 3000 	ldrb.w	r3, [sl]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 809f 	beq.w	800989e <_svfiprintf_r+0x1c6>
 8009760:	2300      	movs	r3, #0
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800976a:	f10a 0a01 	add.w	sl, sl, #1
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	9307      	str	r3, [sp, #28]
 8009772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009776:	931a      	str	r3, [sp, #104]	@ 0x68
 8009778:	4654      	mov	r4, sl
 800977a:	2205      	movs	r2, #5
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	484e      	ldr	r0, [pc, #312]	@ (80098bc <_svfiprintf_r+0x1e4>)
 8009782:	f7f6 fd25 	bl	80001d0 <memchr>
 8009786:	9a04      	ldr	r2, [sp, #16]
 8009788:	b9d8      	cbnz	r0, 80097c2 <_svfiprintf_r+0xea>
 800978a:	06d0      	lsls	r0, r2, #27
 800978c:	bf44      	itt	mi
 800978e:	2320      	movmi	r3, #32
 8009790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009794:	0711      	lsls	r1, r2, #28
 8009796:	bf44      	itt	mi
 8009798:	232b      	movmi	r3, #43	@ 0x2b
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800979e:	f89a 3000 	ldrb.w	r3, [sl]
 80097a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a4:	d015      	beq.n	80097d2 <_svfiprintf_r+0xfa>
 80097a6:	9a07      	ldr	r2, [sp, #28]
 80097a8:	4654      	mov	r4, sl
 80097aa:	2000      	movs	r0, #0
 80097ac:	f04f 0c0a 	mov.w	ip, #10
 80097b0:	4621      	mov	r1, r4
 80097b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b6:	3b30      	subs	r3, #48	@ 0x30
 80097b8:	2b09      	cmp	r3, #9
 80097ba:	d94b      	bls.n	8009854 <_svfiprintf_r+0x17c>
 80097bc:	b1b0      	cbz	r0, 80097ec <_svfiprintf_r+0x114>
 80097be:	9207      	str	r2, [sp, #28]
 80097c0:	e014      	b.n	80097ec <_svfiprintf_r+0x114>
 80097c2:	eba0 0308 	sub.w	r3, r0, r8
 80097c6:	fa09 f303 	lsl.w	r3, r9, r3
 80097ca:	4313      	orrs	r3, r2
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	46a2      	mov	sl, r4
 80097d0:	e7d2      	b.n	8009778 <_svfiprintf_r+0xa0>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	1d19      	adds	r1, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9103      	str	r1, [sp, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	bfbb      	ittet	lt
 80097de:	425b      	neglt	r3, r3
 80097e0:	f042 0202 	orrlt.w	r2, r2, #2
 80097e4:	9307      	strge	r3, [sp, #28]
 80097e6:	9307      	strlt	r3, [sp, #28]
 80097e8:	bfb8      	it	lt
 80097ea:	9204      	strlt	r2, [sp, #16]
 80097ec:	7823      	ldrb	r3, [r4, #0]
 80097ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80097f0:	d10a      	bne.n	8009808 <_svfiprintf_r+0x130>
 80097f2:	7863      	ldrb	r3, [r4, #1]
 80097f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097f6:	d132      	bne.n	800985e <_svfiprintf_r+0x186>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	1d1a      	adds	r2, r3, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	9203      	str	r2, [sp, #12]
 8009800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009804:	3402      	adds	r4, #2
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098cc <_svfiprintf_r+0x1f4>
 800980c:	7821      	ldrb	r1, [r4, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	4650      	mov	r0, sl
 8009812:	f7f6 fcdd 	bl	80001d0 <memchr>
 8009816:	b138      	cbz	r0, 8009828 <_svfiprintf_r+0x150>
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	eba0 000a 	sub.w	r0, r0, sl
 800981e:	2240      	movs	r2, #64	@ 0x40
 8009820:	4082      	lsls	r2, r0
 8009822:	4313      	orrs	r3, r2
 8009824:	3401      	adds	r4, #1
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982c:	4824      	ldr	r0, [pc, #144]	@ (80098c0 <_svfiprintf_r+0x1e8>)
 800982e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009832:	2206      	movs	r2, #6
 8009834:	f7f6 fccc 	bl	80001d0 <memchr>
 8009838:	2800      	cmp	r0, #0
 800983a:	d036      	beq.n	80098aa <_svfiprintf_r+0x1d2>
 800983c:	4b21      	ldr	r3, [pc, #132]	@ (80098c4 <_svfiprintf_r+0x1ec>)
 800983e:	bb1b      	cbnz	r3, 8009888 <_svfiprintf_r+0x1b0>
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	3307      	adds	r3, #7
 8009844:	f023 0307 	bic.w	r3, r3, #7
 8009848:	3308      	adds	r3, #8
 800984a:	9303      	str	r3, [sp, #12]
 800984c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800984e:	4433      	add	r3, r6
 8009850:	9309      	str	r3, [sp, #36]	@ 0x24
 8009852:	e76a      	b.n	800972a <_svfiprintf_r+0x52>
 8009854:	fb0c 3202 	mla	r2, ip, r2, r3
 8009858:	460c      	mov	r4, r1
 800985a:	2001      	movs	r0, #1
 800985c:	e7a8      	b.n	80097b0 <_svfiprintf_r+0xd8>
 800985e:	2300      	movs	r3, #0
 8009860:	3401      	adds	r4, #1
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	4619      	mov	r1, r3
 8009866:	f04f 0c0a 	mov.w	ip, #10
 800986a:	4620      	mov	r0, r4
 800986c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009870:	3a30      	subs	r2, #48	@ 0x30
 8009872:	2a09      	cmp	r2, #9
 8009874:	d903      	bls.n	800987e <_svfiprintf_r+0x1a6>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0c6      	beq.n	8009808 <_svfiprintf_r+0x130>
 800987a:	9105      	str	r1, [sp, #20]
 800987c:	e7c4      	b.n	8009808 <_svfiprintf_r+0x130>
 800987e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009882:	4604      	mov	r4, r0
 8009884:	2301      	movs	r3, #1
 8009886:	e7f0      	b.n	800986a <_svfiprintf_r+0x192>
 8009888:	ab03      	add	r3, sp, #12
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	462a      	mov	r2, r5
 800988e:	4b0e      	ldr	r3, [pc, #56]	@ (80098c8 <_svfiprintf_r+0x1f0>)
 8009890:	a904      	add	r1, sp, #16
 8009892:	4638      	mov	r0, r7
 8009894:	f7fd ff18 	bl	80076c8 <_printf_float>
 8009898:	1c42      	adds	r2, r0, #1
 800989a:	4606      	mov	r6, r0
 800989c:	d1d6      	bne.n	800984c <_svfiprintf_r+0x174>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	065b      	lsls	r3, r3, #25
 80098a2:	f53f af2d 	bmi.w	8009700 <_svfiprintf_r+0x28>
 80098a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098a8:	e72c      	b.n	8009704 <_svfiprintf_r+0x2c>
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4b05      	ldr	r3, [pc, #20]	@ (80098c8 <_svfiprintf_r+0x1f0>)
 80098b2:	a904      	add	r1, sp, #16
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7fe f99f 	bl	8007bf8 <_printf_i>
 80098ba:	e7ed      	b.n	8009898 <_svfiprintf_r+0x1c0>
 80098bc:	0800a738 	.word	0x0800a738
 80098c0:	0800a742 	.word	0x0800a742
 80098c4:	080076c9 	.word	0x080076c9
 80098c8:	08009621 	.word	0x08009621
 80098cc:	0800a73e 	.word	0x0800a73e

080098d0 <__sflush_r>:
 80098d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	0716      	lsls	r6, r2, #28
 80098da:	4605      	mov	r5, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	d454      	bmi.n	800998a <__sflush_r+0xba>
 80098e0:	684b      	ldr	r3, [r1, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dc02      	bgt.n	80098ec <__sflush_r+0x1c>
 80098e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dd48      	ble.n	800997e <__sflush_r+0xae>
 80098ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	d045      	beq.n	800997e <__sflush_r+0xae>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098f8:	682f      	ldr	r7, [r5, #0]
 80098fa:	6a21      	ldr	r1, [r4, #32]
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	d030      	beq.n	8009962 <__sflush_r+0x92>
 8009900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	0759      	lsls	r1, r3, #29
 8009906:	d505      	bpl.n	8009914 <__sflush_r+0x44>
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800990e:	b10b      	cbz	r3, 8009914 <__sflush_r+0x44>
 8009910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009912:	1ad2      	subs	r2, r2, r3
 8009914:	2300      	movs	r3, #0
 8009916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009918:	6a21      	ldr	r1, [r4, #32]
 800991a:	4628      	mov	r0, r5
 800991c:	47b0      	blx	r6
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	d106      	bne.n	8009932 <__sflush_r+0x62>
 8009924:	6829      	ldr	r1, [r5, #0]
 8009926:	291d      	cmp	r1, #29
 8009928:	d82b      	bhi.n	8009982 <__sflush_r+0xb2>
 800992a:	4a2a      	ldr	r2, [pc, #168]	@ (80099d4 <__sflush_r+0x104>)
 800992c:	410a      	asrs	r2, r1
 800992e:	07d6      	lsls	r6, r2, #31
 8009930:	d427      	bmi.n	8009982 <__sflush_r+0xb2>
 8009932:	2200      	movs	r2, #0
 8009934:	6062      	str	r2, [r4, #4]
 8009936:	04d9      	lsls	r1, r3, #19
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	6022      	str	r2, [r4, #0]
 800993c:	d504      	bpl.n	8009948 <__sflush_r+0x78>
 800993e:	1c42      	adds	r2, r0, #1
 8009940:	d101      	bne.n	8009946 <__sflush_r+0x76>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	b903      	cbnz	r3, 8009948 <__sflush_r+0x78>
 8009946:	6560      	str	r0, [r4, #84]	@ 0x54
 8009948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800994a:	602f      	str	r7, [r5, #0]
 800994c:	b1b9      	cbz	r1, 800997e <__sflush_r+0xae>
 800994e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009952:	4299      	cmp	r1, r3
 8009954:	d002      	beq.n	800995c <__sflush_r+0x8c>
 8009956:	4628      	mov	r0, r5
 8009958:	f7ff fa96 	bl	8008e88 <_free_r>
 800995c:	2300      	movs	r3, #0
 800995e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009960:	e00d      	b.n	800997e <__sflush_r+0xae>
 8009962:	2301      	movs	r3, #1
 8009964:	4628      	mov	r0, r5
 8009966:	47b0      	blx	r6
 8009968:	4602      	mov	r2, r0
 800996a:	1c50      	adds	r0, r2, #1
 800996c:	d1c9      	bne.n	8009902 <__sflush_r+0x32>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0c6      	beq.n	8009902 <__sflush_r+0x32>
 8009974:	2b1d      	cmp	r3, #29
 8009976:	d001      	beq.n	800997c <__sflush_r+0xac>
 8009978:	2b16      	cmp	r3, #22
 800997a:	d11e      	bne.n	80099ba <__sflush_r+0xea>
 800997c:	602f      	str	r7, [r5, #0]
 800997e:	2000      	movs	r0, #0
 8009980:	e022      	b.n	80099c8 <__sflush_r+0xf8>
 8009982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009986:	b21b      	sxth	r3, r3
 8009988:	e01b      	b.n	80099c2 <__sflush_r+0xf2>
 800998a:	690f      	ldr	r7, [r1, #16]
 800998c:	2f00      	cmp	r7, #0
 800998e:	d0f6      	beq.n	800997e <__sflush_r+0xae>
 8009990:	0793      	lsls	r3, r2, #30
 8009992:	680e      	ldr	r6, [r1, #0]
 8009994:	bf08      	it	eq
 8009996:	694b      	ldreq	r3, [r1, #20]
 8009998:	600f      	str	r7, [r1, #0]
 800999a:	bf18      	it	ne
 800999c:	2300      	movne	r3, #0
 800999e:	eba6 0807 	sub.w	r8, r6, r7
 80099a2:	608b      	str	r3, [r1, #8]
 80099a4:	f1b8 0f00 	cmp.w	r8, #0
 80099a8:	dde9      	ble.n	800997e <__sflush_r+0xae>
 80099aa:	6a21      	ldr	r1, [r4, #32]
 80099ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ae:	4643      	mov	r3, r8
 80099b0:	463a      	mov	r2, r7
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b0      	blx	r6
 80099b6:	2800      	cmp	r0, #0
 80099b8:	dc08      	bgt.n	80099cc <__sflush_r+0xfc>
 80099ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	4407      	add	r7, r0
 80099ce:	eba8 0800 	sub.w	r8, r8, r0
 80099d2:	e7e7      	b.n	80099a4 <__sflush_r+0xd4>
 80099d4:	dfbffffe 	.word	0xdfbffffe

080099d8 <_fflush_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	690b      	ldr	r3, [r1, #16]
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	b913      	cbnz	r3, 80099e8 <_fflush_r+0x10>
 80099e2:	2500      	movs	r5, #0
 80099e4:	4628      	mov	r0, r5
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	b118      	cbz	r0, 80099f2 <_fflush_r+0x1a>
 80099ea:	6a03      	ldr	r3, [r0, #32]
 80099ec:	b90b      	cbnz	r3, 80099f2 <_fflush_r+0x1a>
 80099ee:	f7fe faaf 	bl	8007f50 <__sinit>
 80099f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0f3      	beq.n	80099e2 <_fflush_r+0xa>
 80099fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099fc:	07d0      	lsls	r0, r2, #31
 80099fe:	d404      	bmi.n	8009a0a <_fflush_r+0x32>
 8009a00:	0599      	lsls	r1, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_fflush_r+0x32>
 8009a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a06:	f7fe fbf0 	bl	80081ea <__retarget_lock_acquire_recursive>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f7ff ff5f 	bl	80098d0 <__sflush_r>
 8009a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a14:	07da      	lsls	r2, r3, #31
 8009a16:	4605      	mov	r5, r0
 8009a18:	d4e4      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	059b      	lsls	r3, r3, #22
 8009a1e:	d4e1      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a22:	f7fe fbe3 	bl	80081ec <__retarget_lock_release_recursive>
 8009a26:	e7dd      	b.n	80099e4 <_fflush_r+0xc>

08009a28 <memmove>:
 8009a28:	4288      	cmp	r0, r1
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	eb01 0402 	add.w	r4, r1, r2
 8009a30:	d902      	bls.n	8009a38 <memmove+0x10>
 8009a32:	4284      	cmp	r4, r0
 8009a34:	4623      	mov	r3, r4
 8009a36:	d807      	bhi.n	8009a48 <memmove+0x20>
 8009a38:	1e43      	subs	r3, r0, #1
 8009a3a:	42a1      	cmp	r1, r4
 8009a3c:	d008      	beq.n	8009a50 <memmove+0x28>
 8009a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a46:	e7f8      	b.n	8009a3a <memmove+0x12>
 8009a48:	4402      	add	r2, r0
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	428a      	cmp	r2, r1
 8009a4e:	d100      	bne.n	8009a52 <memmove+0x2a>
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a5a:	e7f7      	b.n	8009a4c <memmove+0x24>

08009a5c <memcpy>:
 8009a5c:	440a      	add	r2, r1
 8009a5e:	4291      	cmp	r1, r2
 8009a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a64:	d100      	bne.n	8009a68 <memcpy+0xc>
 8009a66:	4770      	bx	lr
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a72:	4291      	cmp	r1, r2
 8009a74:	d1f9      	bne.n	8009a6a <memcpy+0xe>
 8009a76:	bd10      	pop	{r4, pc}

08009a78 <__assert_func>:
 8009a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a7a:	4614      	mov	r4, r2
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <__assert_func+0x2c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4605      	mov	r5, r0
 8009a84:	68d8      	ldr	r0, [r3, #12]
 8009a86:	b954      	cbnz	r4, 8009a9e <__assert_func+0x26>
 8009a88:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <__assert_func+0x30>)
 8009a8a:	461c      	mov	r4, r3
 8009a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a90:	9100      	str	r1, [sp, #0]
 8009a92:	462b      	mov	r3, r5
 8009a94:	4905      	ldr	r1, [pc, #20]	@ (8009aac <__assert_func+0x34>)
 8009a96:	f000 f86f 	bl	8009b78 <fiprintf>
 8009a9a:	f000 f87f 	bl	8009b9c <abort>
 8009a9e:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <__assert_func+0x38>)
 8009aa0:	e7f4      	b.n	8009a8c <__assert_func+0x14>
 8009aa2:	bf00      	nop
 8009aa4:	20000018 	.word	0x20000018
 8009aa8:	0800a78e 	.word	0x0800a78e
 8009aac:	0800a760 	.word	0x0800a760
 8009ab0:	0800a753 	.word	0x0800a753

08009ab4 <_calloc_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	fba1 5402 	umull	r5, r4, r1, r2
 8009aba:	b93c      	cbnz	r4, 8009acc <_calloc_r+0x18>
 8009abc:	4629      	mov	r1, r5
 8009abe:	f7fd fcd7 	bl	8007470 <_malloc_r>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	b928      	cbnz	r0, 8009ad2 <_calloc_r+0x1e>
 8009ac6:	2600      	movs	r6, #0
 8009ac8:	4630      	mov	r0, r6
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	220c      	movs	r2, #12
 8009ace:	6002      	str	r2, [r0, #0]
 8009ad0:	e7f9      	b.n	8009ac6 <_calloc_r+0x12>
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f7fe fae8 	bl	80080aa <memset>
 8009ada:	e7f5      	b.n	8009ac8 <_calloc_r+0x14>

08009adc <__ascii_mbtowc>:
 8009adc:	b082      	sub	sp, #8
 8009ade:	b901      	cbnz	r1, 8009ae2 <__ascii_mbtowc+0x6>
 8009ae0:	a901      	add	r1, sp, #4
 8009ae2:	b142      	cbz	r2, 8009af6 <__ascii_mbtowc+0x1a>
 8009ae4:	b14b      	cbz	r3, 8009afa <__ascii_mbtowc+0x1e>
 8009ae6:	7813      	ldrb	r3, [r2, #0]
 8009ae8:	600b      	str	r3, [r1, #0]
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	1e10      	subs	r0, r2, #0
 8009aee:	bf18      	it	ne
 8009af0:	2001      	movne	r0, #1
 8009af2:	b002      	add	sp, #8
 8009af4:	4770      	bx	lr
 8009af6:	4610      	mov	r0, r2
 8009af8:	e7fb      	b.n	8009af2 <__ascii_mbtowc+0x16>
 8009afa:	f06f 0001 	mvn.w	r0, #1
 8009afe:	e7f8      	b.n	8009af2 <__ascii_mbtowc+0x16>

08009b00 <_realloc_r>:
 8009b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	4680      	mov	r8, r0
 8009b06:	4615      	mov	r5, r2
 8009b08:	460c      	mov	r4, r1
 8009b0a:	b921      	cbnz	r1, 8009b16 <_realloc_r+0x16>
 8009b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b10:	4611      	mov	r1, r2
 8009b12:	f7fd bcad 	b.w	8007470 <_malloc_r>
 8009b16:	b92a      	cbnz	r2, 8009b24 <_realloc_r+0x24>
 8009b18:	f7ff f9b6 	bl	8008e88 <_free_r>
 8009b1c:	2400      	movs	r4, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	f000 f841 	bl	8009baa <_malloc_usable_size_r>
 8009b28:	4285      	cmp	r5, r0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	d802      	bhi.n	8009b34 <_realloc_r+0x34>
 8009b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b32:	d8f4      	bhi.n	8009b1e <_realloc_r+0x1e>
 8009b34:	4629      	mov	r1, r5
 8009b36:	4640      	mov	r0, r8
 8009b38:	f7fd fc9a 	bl	8007470 <_malloc_r>
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0ec      	beq.n	8009b1c <_realloc_r+0x1c>
 8009b42:	42b5      	cmp	r5, r6
 8009b44:	462a      	mov	r2, r5
 8009b46:	4621      	mov	r1, r4
 8009b48:	bf28      	it	cs
 8009b4a:	4632      	movcs	r2, r6
 8009b4c:	f7ff ff86 	bl	8009a5c <memcpy>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4640      	mov	r0, r8
 8009b54:	f7ff f998 	bl	8008e88 <_free_r>
 8009b58:	463c      	mov	r4, r7
 8009b5a:	e7e0      	b.n	8009b1e <_realloc_r+0x1e>

08009b5c <__ascii_wctomb>:
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	b141      	cbz	r1, 8009b74 <__ascii_wctomb+0x18>
 8009b62:	2aff      	cmp	r2, #255	@ 0xff
 8009b64:	d904      	bls.n	8009b70 <__ascii_wctomb+0x14>
 8009b66:	228a      	movs	r2, #138	@ 0x8a
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6e:	4770      	bx	lr
 8009b70:	700a      	strb	r2, [r1, #0]
 8009b72:	2001      	movs	r0, #1
 8009b74:	4770      	bx	lr
	...

08009b78 <fiprintf>:
 8009b78:	b40e      	push	{r1, r2, r3}
 8009b7a:	b503      	push	{r0, r1, lr}
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	4805      	ldr	r0, [pc, #20]	@ (8009b98 <fiprintf+0x20>)
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	6800      	ldr	r0, [r0, #0]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f000 f83f 	bl	8009c0c <_vfiprintf_r>
 8009b8e:	b002      	add	sp, #8
 8009b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b94:	b003      	add	sp, #12
 8009b96:	4770      	bx	lr
 8009b98:	20000018 	.word	0x20000018

08009b9c <abort>:
 8009b9c:	b508      	push	{r3, lr}
 8009b9e:	2006      	movs	r0, #6
 8009ba0:	f000 fa08 	bl	8009fb4 <raise>
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	f7f8 ff47 	bl	8002a38 <_exit>

08009baa <_malloc_usable_size_r>:
 8009baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bae:	1f18      	subs	r0, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfbc      	itt	lt
 8009bb4:	580b      	ldrlt	r3, [r1, r0]
 8009bb6:	18c0      	addlt	r0, r0, r3
 8009bb8:	4770      	bx	lr

08009bba <__sfputc_r>:
 8009bba:	6893      	ldr	r3, [r2, #8]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	b410      	push	{r4}
 8009bc2:	6093      	str	r3, [r2, #8]
 8009bc4:	da08      	bge.n	8009bd8 <__sfputc_r+0x1e>
 8009bc6:	6994      	ldr	r4, [r2, #24]
 8009bc8:	42a3      	cmp	r3, r4
 8009bca:	db01      	blt.n	8009bd0 <__sfputc_r+0x16>
 8009bcc:	290a      	cmp	r1, #10
 8009bce:	d103      	bne.n	8009bd8 <__sfputc_r+0x1e>
 8009bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd4:	f000 b932 	b.w	8009e3c <__swbuf_r>
 8009bd8:	6813      	ldr	r3, [r2, #0]
 8009bda:	1c58      	adds	r0, r3, #1
 8009bdc:	6010      	str	r0, [r2, #0]
 8009bde:	7019      	strb	r1, [r3, #0]
 8009be0:	4608      	mov	r0, r1
 8009be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <__sfputs_r>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	4614      	mov	r4, r2
 8009bf0:	18d5      	adds	r5, r2, r3
 8009bf2:	42ac      	cmp	r4, r5
 8009bf4:	d101      	bne.n	8009bfa <__sfputs_r+0x12>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e007      	b.n	8009c0a <__sfputs_r+0x22>
 8009bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ffda 	bl	8009bba <__sfputc_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d1f3      	bne.n	8009bf2 <__sfputs_r+0xa>
 8009c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c0c <_vfiprintf_r>:
 8009c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	460d      	mov	r5, r1
 8009c12:	b09d      	sub	sp, #116	@ 0x74
 8009c14:	4614      	mov	r4, r2
 8009c16:	4698      	mov	r8, r3
 8009c18:	4606      	mov	r6, r0
 8009c1a:	b118      	cbz	r0, 8009c24 <_vfiprintf_r+0x18>
 8009c1c:	6a03      	ldr	r3, [r0, #32]
 8009c1e:	b90b      	cbnz	r3, 8009c24 <_vfiprintf_r+0x18>
 8009c20:	f7fe f996 	bl	8007f50 <__sinit>
 8009c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d405      	bmi.n	8009c36 <_vfiprintf_r+0x2a>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_vfiprintf_r+0x2a>
 8009c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c32:	f7fe fada 	bl	80081ea <__retarget_lock_acquire_recursive>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	071b      	lsls	r3, r3, #28
 8009c3a:	d501      	bpl.n	8009c40 <_vfiprintf_r+0x34>
 8009c3c:	692b      	ldr	r3, [r5, #16]
 8009c3e:	b99b      	cbnz	r3, 8009c68 <_vfiprintf_r+0x5c>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 f938 	bl	8009eb8 <__swsetup_r>
 8009c48:	b170      	cbz	r0, 8009c68 <_vfiprintf_r+0x5c>
 8009c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c4c:	07dc      	lsls	r4, r3, #31
 8009c4e:	d504      	bpl.n	8009c5a <_vfiprintf_r+0x4e>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b01d      	add	sp, #116	@ 0x74
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	0598      	lsls	r0, r3, #22
 8009c5e:	d4f7      	bmi.n	8009c50 <_vfiprintf_r+0x44>
 8009c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c62:	f7fe fac3 	bl	80081ec <__retarget_lock_release_recursive>
 8009c66:	e7f3      	b.n	8009c50 <_vfiprintf_r+0x44>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c76:	2330      	movs	r3, #48	@ 0x30
 8009c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e28 <_vfiprintf_r+0x21c>
 8009c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c80:	f04f 0901 	mov.w	r9, #1
 8009c84:	4623      	mov	r3, r4
 8009c86:	469a      	mov	sl, r3
 8009c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8c:	b10a      	cbz	r2, 8009c92 <_vfiprintf_r+0x86>
 8009c8e:	2a25      	cmp	r2, #37	@ 0x25
 8009c90:	d1f9      	bne.n	8009c86 <_vfiprintf_r+0x7a>
 8009c92:	ebba 0b04 	subs.w	fp, sl, r4
 8009c96:	d00b      	beq.n	8009cb0 <_vfiprintf_r+0xa4>
 8009c98:	465b      	mov	r3, fp
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff ffa2 	bl	8009be8 <__sfputs_r>
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f000 80a7 	beq.w	8009df8 <_vfiprintf_r+0x1ec>
 8009caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cac:	445a      	add	r2, fp
 8009cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 809f 	beq.w	8009df8 <_vfiprintf_r+0x1ec>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc4:	f10a 0a01 	add.w	sl, sl, #1
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	9307      	str	r3, [sp, #28]
 8009ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cd2:	4654      	mov	r4, sl
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cda:	4853      	ldr	r0, [pc, #332]	@ (8009e28 <_vfiprintf_r+0x21c>)
 8009cdc:	f7f6 fa78 	bl	80001d0 <memchr>
 8009ce0:	9a04      	ldr	r2, [sp, #16]
 8009ce2:	b9d8      	cbnz	r0, 8009d1c <_vfiprintf_r+0x110>
 8009ce4:	06d1      	lsls	r1, r2, #27
 8009ce6:	bf44      	itt	mi
 8009ce8:	2320      	movmi	r3, #32
 8009cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cee:	0713      	lsls	r3, r2, #28
 8009cf0:	bf44      	itt	mi
 8009cf2:	232b      	movmi	r3, #43	@ 0x2b
 8009cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfe:	d015      	beq.n	8009d2c <_vfiprintf_r+0x120>
 8009d00:	9a07      	ldr	r2, [sp, #28]
 8009d02:	4654      	mov	r4, sl
 8009d04:	2000      	movs	r0, #0
 8009d06:	f04f 0c0a 	mov.w	ip, #10
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d10:	3b30      	subs	r3, #48	@ 0x30
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d94b      	bls.n	8009dae <_vfiprintf_r+0x1a2>
 8009d16:	b1b0      	cbz	r0, 8009d46 <_vfiprintf_r+0x13a>
 8009d18:	9207      	str	r2, [sp, #28]
 8009d1a:	e014      	b.n	8009d46 <_vfiprintf_r+0x13a>
 8009d1c:	eba0 0308 	sub.w	r3, r0, r8
 8009d20:	fa09 f303 	lsl.w	r3, r9, r3
 8009d24:	4313      	orrs	r3, r2
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	46a2      	mov	sl, r4
 8009d2a:	e7d2      	b.n	8009cd2 <_vfiprintf_r+0xc6>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	1d19      	adds	r1, r3, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	9103      	str	r1, [sp, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfbb      	ittet	lt
 8009d38:	425b      	neglt	r3, r3
 8009d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d3e:	9307      	strge	r3, [sp, #28]
 8009d40:	9307      	strlt	r3, [sp, #28]
 8009d42:	bfb8      	it	lt
 8009d44:	9204      	strlt	r2, [sp, #16]
 8009d46:	7823      	ldrb	r3, [r4, #0]
 8009d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d4a:	d10a      	bne.n	8009d62 <_vfiprintf_r+0x156>
 8009d4c:	7863      	ldrb	r3, [r4, #1]
 8009d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d50:	d132      	bne.n	8009db8 <_vfiprintf_r+0x1ac>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	9203      	str	r2, [sp, #12]
 8009d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d5e:	3402      	adds	r4, #2
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e38 <_vfiprintf_r+0x22c>
 8009d66:	7821      	ldrb	r1, [r4, #0]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f7f6 fa30 	bl	80001d0 <memchr>
 8009d70:	b138      	cbz	r0, 8009d82 <_vfiprintf_r+0x176>
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	eba0 000a 	sub.w	r0, r0, sl
 8009d78:	2240      	movs	r2, #64	@ 0x40
 8009d7a:	4082      	lsls	r2, r0
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	3401      	adds	r4, #1
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	4829      	ldr	r0, [pc, #164]	@ (8009e2c <_vfiprintf_r+0x220>)
 8009d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d8c:	2206      	movs	r2, #6
 8009d8e:	f7f6 fa1f 	bl	80001d0 <memchr>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d03f      	beq.n	8009e16 <_vfiprintf_r+0x20a>
 8009d96:	4b26      	ldr	r3, [pc, #152]	@ (8009e30 <_vfiprintf_r+0x224>)
 8009d98:	bb1b      	cbnz	r3, 8009de2 <_vfiprintf_r+0x1d6>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	3307      	adds	r3, #7
 8009d9e:	f023 0307 	bic.w	r3, r3, #7
 8009da2:	3308      	adds	r3, #8
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	443b      	add	r3, r7
 8009daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dac:	e76a      	b.n	8009c84 <_vfiprintf_r+0x78>
 8009dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009db2:	460c      	mov	r4, r1
 8009db4:	2001      	movs	r0, #1
 8009db6:	e7a8      	b.n	8009d0a <_vfiprintf_r+0xfe>
 8009db8:	2300      	movs	r3, #0
 8009dba:	3401      	adds	r4, #1
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f04f 0c0a 	mov.w	ip, #10
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dca:	3a30      	subs	r2, #48	@ 0x30
 8009dcc:	2a09      	cmp	r2, #9
 8009dce:	d903      	bls.n	8009dd8 <_vfiprintf_r+0x1cc>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0c6      	beq.n	8009d62 <_vfiprintf_r+0x156>
 8009dd4:	9105      	str	r1, [sp, #20]
 8009dd6:	e7c4      	b.n	8009d62 <_vfiprintf_r+0x156>
 8009dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7f0      	b.n	8009dc4 <_vfiprintf_r+0x1b8>
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	462a      	mov	r2, r5
 8009de8:	4b12      	ldr	r3, [pc, #72]	@ (8009e34 <_vfiprintf_r+0x228>)
 8009dea:	a904      	add	r1, sp, #16
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7fd fc6b 	bl	80076c8 <_printf_float>
 8009df2:	4607      	mov	r7, r0
 8009df4:	1c78      	adds	r0, r7, #1
 8009df6:	d1d6      	bne.n	8009da6 <_vfiprintf_r+0x19a>
 8009df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d405      	bmi.n	8009e0a <_vfiprintf_r+0x1fe>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_vfiprintf_r+0x1fe>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7fe f9f1 	bl	80081ec <__retarget_lock_release_recursive>
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	065b      	lsls	r3, r3, #25
 8009e0e:	f53f af1f 	bmi.w	8009c50 <_vfiprintf_r+0x44>
 8009e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e14:	e71e      	b.n	8009c54 <_vfiprintf_r+0x48>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b05      	ldr	r3, [pc, #20]	@ (8009e34 <_vfiprintf_r+0x228>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7fd fee9 	bl	8007bf8 <_printf_i>
 8009e26:	e7e4      	b.n	8009df2 <_vfiprintf_r+0x1e6>
 8009e28:	0800a738 	.word	0x0800a738
 8009e2c:	0800a742 	.word	0x0800a742
 8009e30:	080076c9 	.word	0x080076c9
 8009e34:	08009be9 	.word	0x08009be9
 8009e38:	0800a73e 	.word	0x0800a73e

08009e3c <__swbuf_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	460e      	mov	r6, r1
 8009e40:	4614      	mov	r4, r2
 8009e42:	4605      	mov	r5, r0
 8009e44:	b118      	cbz	r0, 8009e4e <__swbuf_r+0x12>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <__swbuf_r+0x12>
 8009e4a:	f7fe f881 	bl	8007f50 <__sinit>
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d501      	bpl.n	8009e5c <__swbuf_r+0x20>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b943      	cbnz	r3, 8009e6e <__swbuf_r+0x32>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f82a 	bl	8009eb8 <__swsetup_r>
 8009e64:	b118      	cbz	r0, 8009e6e <__swbuf_r+0x32>
 8009e66:	f04f 37ff 	mov.w	r7, #4294967295
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	1a98      	subs	r0, r3, r2
 8009e74:	6963      	ldr	r3, [r4, #20]
 8009e76:	b2f6      	uxtb	r6, r6
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	dc05      	bgt.n	8009e8a <__swbuf_r+0x4e>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff fda9 	bl	80099d8 <_fflush_r>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d1ed      	bne.n	8009e66 <__swbuf_r+0x2a>
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	6022      	str	r2, [r4, #0]
 8009e96:	701e      	strb	r6, [r3, #0]
 8009e98:	6962      	ldr	r2, [r4, #20]
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d004      	beq.n	8009eaa <__swbuf_r+0x6e>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d5e1      	bpl.n	8009e6a <__swbuf_r+0x2e>
 8009ea6:	2e0a      	cmp	r6, #10
 8009ea8:	d1df      	bne.n	8009e6a <__swbuf_r+0x2e>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fd93 	bl	80099d8 <_fflush_r>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0d9      	beq.n	8009e6a <__swbuf_r+0x2e>
 8009eb6:	e7d6      	b.n	8009e66 <__swbuf_r+0x2a>

08009eb8 <__swsetup_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4b29      	ldr	r3, [pc, #164]	@ (8009f60 <__swsetup_r+0xa8>)
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	b118      	cbz	r0, 8009ecc <__swsetup_r+0x14>
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <__swsetup_r+0x14>
 8009ec8:	f7fe f842 	bl	8007f50 <__sinit>
 8009ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed0:	0719      	lsls	r1, r3, #28
 8009ed2:	d422      	bmi.n	8009f1a <__swsetup_r+0x62>
 8009ed4:	06da      	lsls	r2, r3, #27
 8009ed6:	d407      	bmi.n	8009ee8 <__swsetup_r+0x30>
 8009ed8:	2209      	movs	r2, #9
 8009eda:	602a      	str	r2, [r5, #0]
 8009edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	e033      	b.n	8009f50 <__swsetup_r+0x98>
 8009ee8:	0758      	lsls	r0, r3, #29
 8009eea:	d512      	bpl.n	8009f12 <__swsetup_r+0x5a>
 8009eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eee:	b141      	cbz	r1, 8009f02 <__swsetup_r+0x4a>
 8009ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	d002      	beq.n	8009efe <__swsetup_r+0x46>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7fe ffc5 	bl	8008e88 <_free_r>
 8009efe:	2300      	movs	r3, #0
 8009f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0308 	orr.w	r3, r3, #8
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	b94b      	cbnz	r3, 8009f32 <__swsetup_r+0x7a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f28:	d003      	beq.n	8009f32 <__swsetup_r+0x7a>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f883 	bl	800a038 <__smakebuf_r>
 8009f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f36:	f013 0201 	ands.w	r2, r3, #1
 8009f3a:	d00a      	beq.n	8009f52 <__swsetup_r+0x9a>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	60a2      	str	r2, [r4, #8]
 8009f40:	6962      	ldr	r2, [r4, #20]
 8009f42:	4252      	negs	r2, r2
 8009f44:	61a2      	str	r2, [r4, #24]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	b942      	cbnz	r2, 8009f5c <__swsetup_r+0xa4>
 8009f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f4e:	d1c5      	bne.n	8009edc <__swsetup_r+0x24>
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	0799      	lsls	r1, r3, #30
 8009f54:	bf58      	it	pl
 8009f56:	6962      	ldrpl	r2, [r4, #20]
 8009f58:	60a2      	str	r2, [r4, #8]
 8009f5a:	e7f4      	b.n	8009f46 <__swsetup_r+0x8e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7f7      	b.n	8009f50 <__swsetup_r+0x98>
 8009f60:	20000018 	.word	0x20000018

08009f64 <_raise_r>:
 8009f64:	291f      	cmp	r1, #31
 8009f66:	b538      	push	{r3, r4, r5, lr}
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	d904      	bls.n	8009f78 <_raise_r+0x14>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f7a:	b112      	cbz	r2, 8009f82 <_raise_r+0x1e>
 8009f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f80:	b94b      	cbnz	r3, 8009f96 <_raise_r+0x32>
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f830 	bl	8009fe8 <_getpid_r>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f92:	f000 b817 	b.w	8009fc4 <_kill_r>
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d00a      	beq.n	8009fb0 <_raise_r+0x4c>
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	d103      	bne.n	8009fa6 <_raise_r+0x42>
 8009f9e:	2316      	movs	r3, #22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e7e7      	b.n	8009f76 <_raise_r+0x12>
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fac:	4620      	mov	r0, r4
 8009fae:	4798      	blx	r3
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7e0      	b.n	8009f76 <_raise_r+0x12>

08009fb4 <raise>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	@ (8009fc0 <raise+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f7ff bfd3 	b.w	8009f64 <_raise_r>
 8009fbe:	bf00      	nop
 8009fc0:	20000018 	.word	0x20000018

08009fc4 <_kill_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	@ (8009fe4 <_kill_r+0x20>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	f7f8 fd21 	bl	8002a18 <_kill>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_kill_r+0x1c>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_kill_r+0x1c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200004d4 	.word	0x200004d4

08009fe8 <_getpid_r>:
 8009fe8:	f7f8 bd0e 	b.w	8002a08 <_getpid>

08009fec <__swhatbuf_r>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	b096      	sub	sp, #88	@ 0x58
 8009ff8:	4615      	mov	r5, r2
 8009ffa:	461e      	mov	r6, r3
 8009ffc:	da0d      	bge.n	800a01a <__swhatbuf_r+0x2e>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a004:	f04f 0100 	mov.w	r1, #0
 800a008:	bf14      	ite	ne
 800a00a:	2340      	movne	r3, #64	@ 0x40
 800a00c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a010:	2000      	movs	r0, #0
 800a012:	6031      	str	r1, [r6, #0]
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	b016      	add	sp, #88	@ 0x58
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	466a      	mov	r2, sp
 800a01c:	f000 f848 	bl	800a0b0 <_fstat_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	dbec      	blt.n	8009ffe <__swhatbuf_r+0x12>
 800a024:	9901      	ldr	r1, [sp, #4]
 800a026:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a02a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a02e:	4259      	negs	r1, r3
 800a030:	4159      	adcs	r1, r3
 800a032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a036:	e7eb      	b.n	800a010 <__swhatbuf_r+0x24>

0800a038 <__smakebuf_r>:
 800a038:	898b      	ldrh	r3, [r1, #12]
 800a03a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03c:	079d      	lsls	r5, r3, #30
 800a03e:	4606      	mov	r6, r0
 800a040:	460c      	mov	r4, r1
 800a042:	d507      	bpl.n	800a054 <__smakebuf_r+0x1c>
 800a044:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	2301      	movs	r3, #1
 800a04e:	6163      	str	r3, [r4, #20]
 800a050:	b003      	add	sp, #12
 800a052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a054:	ab01      	add	r3, sp, #4
 800a056:	466a      	mov	r2, sp
 800a058:	f7ff ffc8 	bl	8009fec <__swhatbuf_r>
 800a05c:	9f00      	ldr	r7, [sp, #0]
 800a05e:	4605      	mov	r5, r0
 800a060:	4639      	mov	r1, r7
 800a062:	4630      	mov	r0, r6
 800a064:	f7fd fa04 	bl	8007470 <_malloc_r>
 800a068:	b948      	cbnz	r0, 800a07e <__smakebuf_r+0x46>
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	059a      	lsls	r2, r3, #22
 800a070:	d4ee      	bmi.n	800a050 <__smakebuf_r+0x18>
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	f043 0302 	orr.w	r3, r3, #2
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	e7e2      	b.n	800a044 <__smakebuf_r+0xc>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	6020      	str	r0, [r4, #0]
 800a082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a08e:	b15b      	cbz	r3, 800a0a8 <__smakebuf_r+0x70>
 800a090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f81d 	bl	800a0d4 <_isatty_r>
 800a09a:	b128      	cbz	r0, 800a0a8 <__smakebuf_r+0x70>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	f043 0301 	orr.w	r3, r3, #1
 800a0a6:	81a3      	strh	r3, [r4, #12]
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	431d      	orrs	r5, r3
 800a0ac:	81a5      	strh	r5, [r4, #12]
 800a0ae:	e7cf      	b.n	800a050 <__smakebuf_r+0x18>

0800a0b0 <_fstat_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	@ (800a0d0 <_fstat_r+0x20>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	f7f8 fd0b 	bl	8002ad8 <_fstat>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	d102      	bne.n	800a0cc <_fstat_r+0x1c>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b103      	cbz	r3, 800a0cc <_fstat_r+0x1c>
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200004d4 	.word	0x200004d4

0800a0d4 <_isatty_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_isatty_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f8 fd0a 	bl	8002af8 <_isatty>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_isatty_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_isatty_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	200004d4 	.word	0x200004d4

0800a0f4 <_init>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr

0800a100 <_fini>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr
